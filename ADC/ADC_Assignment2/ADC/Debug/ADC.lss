
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000025f0  00002664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001dc4  00000000  00000000  0000266c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d88  00000000  00000000  00004430  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000051b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000054a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  000074ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  000085ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  000096f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  000099b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 33 12 	call	0x2466	; 0x2466 <main>
      7a:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <ADC_voidInit>:
#include "ADC_Interface.h"
#include   "ADC_Private.h"


void ADC_voidInit(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62

	/* ADC ENABLE*/
	set_bit(ADC_U8_ADCSRA,ADCSRA_ADEN);
     c96:	a6 e2       	ldi	r26, 0x26	; 38
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e6 e2       	ldi	r30, 0x26	; 38
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	80 68       	ori	r24, 0x80	; 128
     ca2:	8c 93       	st	X, r24
	/*Voltage Reference Selections for ADC*/
	#if Voltage_Reference_Selections_for_ADC==AREF
		clear_bit(ADC_U8_ADMUX,ADMUX_REFS1);
     ca4:	a7 e2       	ldi	r26, 0x27	; 39
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e7 e2       	ldi	r30, 0x27	; 39
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	8f 77       	andi	r24, 0x7F	; 127
     cb0:	8c 93       	st	X, r24
		clear_bit(ADC_U8_ADMUX,ADMUX_REFS0);
     cb2:	a7 e2       	ldi	r26, 0x27	; 39
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e7 e2       	ldi	r30, 0x27	; 39
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8f 7b       	andi	r24, 0xBF	; 191
     cbe:	8c 93       	st	X, r24
		set_bit(ADC_U8_ADMUX,ADMUX_REFS1);
		set_bit(ADC_U8_ADMUX,ADMUX_REFS0);
	#endif
		/*Input Channel and Gain Selections*/
	#if Input_Channel_and_Gain_Selections==single_Ended_input_ADC0
		DIO_u8set_pin_dir(GROUP_A,ADC_U8_CH0,DIO_u8_INPUT);
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	0e 94 30 08 	call	0x1060	; 0x1060 <DIO_u8set_pin_dir>
		clear_bit(ADC_U8_ADMUX,ADMUX_MUX4);
     cca:	a7 e2       	ldi	r26, 0x27	; 39
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e7 e2       	ldi	r30, 0x27	; 39
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	8f 7e       	andi	r24, 0xEF	; 239
     cd6:	8c 93       	st	X, r24
		clear_bit(ADC_U8_ADMUX,ADMUX_MUX3);
     cd8:	a7 e2       	ldi	r26, 0x27	; 39
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e7 e2       	ldi	r30, 0x27	; 39
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	87 7f       	andi	r24, 0xF7	; 247
     ce4:	8c 93       	st	X, r24
		clear_bit(ADC_U8_ADMUX,ADMUX_MUX2);
     ce6:	a7 e2       	ldi	r26, 0x27	; 39
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e7 e2       	ldi	r30, 0x27	; 39
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	8b 7f       	andi	r24, 0xFB	; 251
     cf2:	8c 93       	st	X, r24
		clear_bit(ADC_U8_ADMUX,ADMUX_MUX1);
     cf4:	a7 e2       	ldi	r26, 0x27	; 39
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e7 e2       	ldi	r30, 0x27	; 39
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	8d 7f       	andi	r24, 0xFD	; 253
     d00:	8c 93       	st	X, r24
		clear_bit(ADC_U8_ADMUX,ADMUX_MUX0);
     d02:	a7 e2       	ldi	r26, 0x27	; 39
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e7 e2       	ldi	r30, 0x27	; 39
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	8e 7f       	andi	r24, 0xFE	; 254
     d0e:	8c 93       	st	X, r24
	#elif ADC_Prescaler_Selections==ADC_Prescalar_64
		set_bit(ADC_U8_ADCSRA,ADCSRA_ADPS2);
		set_bit(ADC_U8_ADCSRA,ADCSRA_ADPS1);
		clear_bit(ADC_U8_ADCSRA,ADCSRA_ADPS0);
	#elif ADC_Prescaler_Selections==ADC_Prescalar_128
		set_bit(ADC_U8_ADCSRA,ADCSRA_ADPS2);
     d10:	a6 e2       	ldi	r26, 0x26	; 38
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e6 e2       	ldi	r30, 0x26	; 38
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	84 60       	ori	r24, 0x04	; 4
     d1c:	8c 93       	st	X, r24
		set_bit(ADC_U8_ADCSRA,ADCSRA_ADPS1);
     d1e:	a6 e2       	ldi	r26, 0x26	; 38
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e6 e2       	ldi	r30, 0x26	; 38
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	82 60       	ori	r24, 0x02	; 2
     d2a:	8c 93       	st	X, r24
		set_bit(ADC_U8_ADCSRA,ADCSRA_ADPS0);
     d2c:	a6 e2       	ldi	r26, 0x26	; 38
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e6 e2       	ldi	r30, 0x26	; 38
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	81 60       	ori	r24, 0x01	; 1
     d38:	8c 93       	st	X, r24
	#endif

	/*right  or left  adjustment*/

	#if ADC_ADLAR_Adjustment==ADC_ADLAR_Right_Adjustment
	clear_bit(ADC_U8_ADMUX,ADMUX_ADLAR);
     d3a:	a7 e2       	ldi	r26, 0x27	; 39
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e7 e2       	ldi	r30, 0x27	; 39
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	8f 7d       	andi	r24, 0xDF	; 223
     d46:	8c 93       	st	X, r24
	#elif ADC_ADLAR_Adjustment==ADC_ADLAR_Left_Adjustment
	set_bit(ADC_U8_ADMUX,ADMUX_ADLAR);
	#endif
return;
}
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	08 95       	ret

00000d4e <ADC_SingleConversion>:

/*this function  will work  on  10bits single time and  using  the  polling  methhod   */
void ADC_SingleConversion (u16	*CopyPtr_u16_value )
{
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	00 d0       	rcall	.+0      	; 0xd54 <ADC_SingleConversion+0x6>
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	9a 83       	std	Y+2, r25	; 0x02
     d5a:	89 83       	std	Y+1, r24	; 0x01
		/*start conversion */
	set_bit(ADC_U8_ADCSRA,ADCSRA_ADSC); //  this bit when  finishes it cleared it's self   and interrupt  fires if u  enable  the interrupt bit
     d5c:	a6 e2       	ldi	r26, 0x26	; 38
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e6 e2       	ldi	r30, 0x26	; 38
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	80 64       	ori	r24, 0x40	; 64
     d68:	8c 93       	st	X, r24
	/*polling  method the best is by interrupt */
	while(get_bit(ADC_U8_ADCSRA,ADCSRA_ADIF) != 1); //  this work  on  the flag  when this bit is 0 it stuck  until  it turnes to  1
     d6a:	e6 e2       	ldi	r30, 0x26	; 38
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	82 95       	swap	r24
     d72:	8f 70       	andi	r24, 0x0F	; 15
     d74:	88 2f       	mov	r24, r24
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	81 70       	andi	r24, 0x01	; 1
     d7a:	90 70       	andi	r25, 0x00	; 0
     d7c:	00 97       	sbiw	r24, 0x00	; 0
     d7e:	a9 f3       	breq	.-22     	; 0xd6a <ADC_SingleConversion+0x1c>
	// or we can use the interrupt that fires when the conversion is finished and and then  continue  takes the result
	/*clearing the flag */
	set_bit(ADC_U8_ADCSRA,ADCSRA_ADIF);
     d80:	a6 e2       	ldi	r26, 0x26	; 38
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e6 e2       	ldi	r30, 0x26	; 38
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	80 61       	ori	r24, 0x10	; 16
     d8c:	8c 93       	st	X, r24

	*CopyPtr_u16_value=ADC_U8_ADCL;
     d8e:	e4 e2       	ldi	r30, 0x24	; 36
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	e9 81       	ldd	r30, Y+1	; 0x01
     d9a:	fa 81       	ldd	r31, Y+2	; 0x02
     d9c:	91 83       	std	Z+1, r25	; 0x01
     d9e:	80 83       	st	Z, r24
	*CopyPtr_u16_value=(ADC_U8_ADCH<<8);
     da0:	e5 e2       	ldi	r30, 0x25	; 37
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	98 2f       	mov	r25, r24
     dac:	88 27       	eor	r24, r24
     dae:	e9 81       	ldd	r30, Y+1	; 0x01
     db0:	fa 81       	ldd	r31, Y+2	; 0x02
     db2:	91 83       	std	Z+1, r25	; 0x01
     db4:	80 83       	st	Z, r24
}
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <ADC_u16Read>:

u16 ADC_u16Read(u8 Copy_u8Channel)
{
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <ADC_u16Read+0x6>
     dc6:	0f 92       	push	r0
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	8b 83       	std	Y+3, r24	; 0x03
	u16 res;
	ADC_U8_ADMUX &=0b11100000;
     dce:	a7 e2       	ldi	r26, 0x27	; 39
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e7 e2       	ldi	r30, 0x27	; 39
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	80 7e       	andi	r24, 0xE0	; 224
     dda:	8c 93       	st	X, r24


	ADC_U8_ADMUX |=Copy_u8Channel;
     ddc:	a7 e2       	ldi	r26, 0x27	; 39
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e7 e2       	ldi	r30, 0x27	; 39
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	90 81       	ld	r25, Z
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	89 2b       	or	r24, r25
     dea:	8c 93       	st	X, r24

	// start Signal conversion

	set_bit(ADC_U8_ADCSRA,6);
     dec:	a6 e2       	ldi	r26, 0x26	; 38
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e6 e2       	ldi	r30, 0x26	; 38
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	80 64       	ori	r24, 0x40	; 64
     df8:	8c 93       	st	X, r24

	while(get_bit(ADC_U8_ADCSRA,4) != 1); // polling on a flag
     dfa:	e6 e2       	ldi	r30, 0x26	; 38
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	82 95       	swap	r24
     e02:	8f 70       	andi	r24, 0x0F	; 15
     e04:	88 2f       	mov	r24, r24
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	81 70       	andi	r24, 0x01	; 1
     e0a:	90 70       	andi	r25, 0x00	; 0
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	a9 f3       	breq	.-22     	; 0xdfa <ADC_u16Read+0x3a>

	set_bit(ADC_U8_ADCSRA,4);
     e10:	a6 e2       	ldi	r26, 0x26	; 38
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e6 e2       	ldi	r30, 0x26	; 38
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	80 61       	ori	r24, 0x10	; 16
     e1c:	8c 93       	st	X, r24
	res =ADC_U8_ADCL>>6;
     e1e:	e4 e2       	ldi	r30, 0x24	; 36
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	82 95       	swap	r24
     e26:	86 95       	lsr	r24
     e28:	86 95       	lsr	r24
     e2a:	83 70       	andi	r24, 0x03	; 3
     e2c:	88 2f       	mov	r24, r24
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	9a 83       	std	Y+2, r25	; 0x02
     e32:	89 83       	std	Y+1, r24	; 0x01
	res |=(((u16) ADC_U8_ADCH)<<2);
     e34:	e5 e2       	ldi	r30, 0x25	; 37
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	88 2f       	mov	r24, r24
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	9c 01       	movw	r18, r24
     e40:	22 0f       	add	r18, r18
     e42:	33 1f       	adc	r19, r19
     e44:	22 0f       	add	r18, r18
     e46:	33 1f       	adc	r19, r19
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	9a 81       	ldd	r25, Y+2	; 0x02
     e4c:	82 2b       	or	r24, r18
     e4e:	93 2b       	or	r25, r19
     e50:	9a 83       	std	Y+2, r25	; 0x02
     e52:	89 83       	std	Y+1, r24	; 0x01

	return res;
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <DIO_u8set_pin_value>:
#include "../MCAL/DIO/DIO_INTERFACE.h"



u8 DIO_u8set_pin_value(u8 Copy_u8_port_ID,u8 Copy_u8_pin_ID,u8 Copy_u8_pin_val)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <DIO_u8set_pin_value+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <DIO_u8set_pin_value+0x8>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <DIO_u8set_pin_value+0xa>
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	8a 83       	std	Y+2, r24	; 0x02
     e74:	6b 83       	std	Y+3, r22	; 0x03
     e76:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
     e78:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	84 30       	cpi	r24, 0x04	; 4
     e7e:	08 f0       	brcs	.+2      	; 0xe82 <DIO_u8set_pin_value+0x1e>
     e80:	e3 c0       	rjmp	.+454    	; 0x1048 <DIO_u8set_pin_value+0x1e4>
	{
		if((Copy_u8_pin_ID>=MIN_u8_PIN_ID)&&(Copy_u8_pin_ID<=MAX_u8_PIN_ID))
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	88 30       	cpi	r24, 0x08	; 8
     e86:	08 f0       	brcs	.+2      	; 0xe8a <DIO_u8set_pin_value+0x26>
     e88:	dc c0       	rjmp	.+440    	; 0x1042 <DIO_u8set_pin_value+0x1de>
		{
			if((Copy_u8_pin_val==MIN_u8_PIN_VAL)||(Copy_u8_pin_val==MAX_u8_PIN_VAL))
     e8a:	8c 81       	ldd	r24, Y+4	; 0x04
     e8c:	88 23       	and	r24, r24
     e8e:	21 f0       	breq	.+8      	; 0xe98 <DIO_u8set_pin_value+0x34>
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	09 f0       	breq	.+2      	; 0xe98 <DIO_u8set_pin_value+0x34>
     e96:	d2 c0       	rjmp	.+420    	; 0x103c <DIO_u8set_pin_value+0x1d8>
					{
						switch(Copy_u8_port_ID)
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	3e 83       	std	Y+6, r19	; 0x06
     ea0:	2d 83       	std	Y+5, r18	; 0x05
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	91 05       	cpc	r25, r1
     eaa:	09 f4       	brne	.+2      	; 0xeae <DIO_u8set_pin_value+0x4a>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <DIO_u8set_pin_value+0xd0>
     eae:	2d 81       	ldd	r18, Y+5	; 0x05
     eb0:	3e 81       	ldd	r19, Y+6	; 0x06
     eb2:	22 30       	cpi	r18, 0x02	; 2
     eb4:	31 05       	cpc	r19, r1
     eb6:	2c f4       	brge	.+10     	; 0xec2 <DIO_u8set_pin_value+0x5e>
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	9e 81       	ldd	r25, Y+6	; 0x06
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	71 f0       	breq	.+28     	; 0xedc <DIO_u8set_pin_value+0x78>
     ec0:	c5 c0       	rjmp	.+394    	; 0x104c <DIO_u8set_pin_value+0x1e8>
     ec2:	2d 81       	ldd	r18, Y+5	; 0x05
     ec4:	3e 81       	ldd	r19, Y+6	; 0x06
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	09 f4       	brne	.+2      	; 0xece <DIO_u8set_pin_value+0x6a>
     ecc:	5f c0       	rjmp	.+190    	; 0xf8c <DIO_u8set_pin_value+0x128>
     ece:	8d 81       	ldd	r24, Y+5	; 0x05
     ed0:	9e 81       	ldd	r25, Y+6	; 0x06
     ed2:	83 30       	cpi	r24, 0x03	; 3
     ed4:	91 05       	cpc	r25, r1
     ed6:	09 f4       	brne	.+2      	; 0xeda <DIO_u8set_pin_value+0x76>
     ed8:	85 c0       	rjmp	.+266    	; 0xfe4 <DIO_u8set_pin_value+0x180>
     eda:	b8 c0       	rjmp	.+368    	; 0x104c <DIO_u8set_pin_value+0x1e8>
							{
								case GROUP_A:
									Assign_Bit(DIO_U8_PORTA,Copy_u8_pin_ID,Copy_u8_pin_val);
     edc:	8c 81       	ldd	r24, Y+4	; 0x04
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	a1 f4       	brne	.+40     	; 0xf0a <DIO_u8set_pin_value+0xa6>
     ee2:	ab e3       	ldi	r26, 0x3B	; 59
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	eb e3       	ldi	r30, 0x3B	; 59
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_u8set_pin_value+0x9c>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_u8set_pin_value+0x98>
     f04:	84 2b       	or	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	a1 c0       	rjmp	.+322    	; 0x104c <DIO_u8set_pin_value+0x1e8>
     f0a:	ab e3       	ldi	r26, 0x3B	; 59
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	eb e3       	ldi	r30, 0x3B	; 59
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <DIO_u8set_pin_value+0xc4>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <DIO_u8set_pin_value+0xc0>
     f2c:	80 95       	com	r24
     f2e:	84 23       	and	r24, r20
     f30:	8c 93       	st	X, r24
     f32:	8c c0       	rjmp	.+280    	; 0x104c <DIO_u8set_pin_value+0x1e8>
									break;
								case GROUP_B:
									Assign_Bit(DIO_U8_PORTB,Copy_u8_pin_ID,Copy_u8_pin_val);
     f34:	8c 81       	ldd	r24, Y+4	; 0x04
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	a1 f4       	brne	.+40     	; 0xf62 <DIO_u8set_pin_value+0xfe>
     f3a:	a8 e3       	ldi	r26, 0x38	; 56
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e8 e3       	ldi	r30, 0x38	; 56
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <DIO_u8set_pin_value+0xf4>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <DIO_u8set_pin_value+0xf0>
     f5c:	84 2b       	or	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	75 c0       	rjmp	.+234    	; 0x104c <DIO_u8set_pin_value+0x1e8>
     f62:	a8 e3       	ldi	r26, 0x38	; 56
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e8 e3       	ldi	r30, 0x38	; 56
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_u8set_pin_value+0x11c>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_u8set_pin_value+0x118>
     f84:	80 95       	com	r24
     f86:	84 23       	and	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	60 c0       	rjmp	.+192    	; 0x104c <DIO_u8set_pin_value+0x1e8>
									break;
								case GROUP_C:
									Assign_Bit(DIO_U8_PORTC,Copy_u8_pin_ID,Copy_u8_pin_val);
     f8c:	8c 81       	ldd	r24, Y+4	; 0x04
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	a1 f4       	brne	.+40     	; 0xfba <DIO_u8set_pin_value+0x156>
     f92:	a5 e3       	ldi	r26, 0x35	; 53
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e5 e3       	ldi	r30, 0x35	; 53
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_u8set_pin_value+0x14c>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_u8set_pin_value+0x148>
     fb4:	84 2b       	or	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	49 c0       	rjmp	.+146    	; 0x104c <DIO_u8set_pin_value+0x1e8>
     fba:	a5 e3       	ldi	r26, 0x35	; 53
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e5 e3       	ldi	r30, 0x35	; 53
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 2e       	mov	r0, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <DIO_u8set_pin_value+0x174>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <DIO_u8set_pin_value+0x170>
     fdc:	80 95       	com	r24
     fde:	84 23       	and	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	34 c0       	rjmp	.+104    	; 0x104c <DIO_u8set_pin_value+0x1e8>
									break;
								case GROUP_D:
									Assign_Bit(DIO_U8_PORTD,Copy_u8_pin_ID,Copy_u8_pin_val);
     fe4:	8c 81       	ldd	r24, Y+4	; 0x04
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	a1 f4       	brne	.+40     	; 0x1012 <DIO_u8set_pin_value+0x1ae>
     fea:	a2 e3       	ldi	r26, 0x32	; 50
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e2 e3       	ldi	r30, 0x32	; 50
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <DIO_u8set_pin_value+0x1a4>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <DIO_u8set_pin_value+0x1a0>
    100c:	84 2b       	or	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	1d c0       	rjmp	.+58     	; 0x104c <DIO_u8set_pin_value+0x1e8>
    1012:	a2 e3       	ldi	r26, 0x32	; 50
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e2 e3       	ldi	r30, 0x32	; 50
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_u8set_pin_value+0x1cc>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <DIO_u8set_pin_value+0x1c8>
    1034:	80 95       	com	r24
    1036:	84 23       	and	r24, r20
    1038:	8c 93       	st	X, r24
    103a:	08 c0       	rjmp	.+16     	; 0x104c <DIO_u8set_pin_value+0x1e8>

							}
					}
			else
				{
				Loc_u8Error_state=DIO_u8_PIN_VAL_ERROR;
    103c:	89 e0       	ldi	r24, 0x09	; 9
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	05 c0       	rjmp	.+10     	; 0x104c <DIO_u8set_pin_value+0x1e8>
				}

			}
		else
						{
			Loc_u8Error_state=DIO_u8_PIN_ID_ERROR;
    1042:	86 e0       	ldi	r24, 0x06	; 6
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_u8set_pin_value+0x1e8>


	}
	else
	{
			Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
    1048:	83 e0       	ldi	r24, 0x03	; 3
    104a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Loc_u8Error_state;
    104c:	89 81       	ldd	r24, Y+1	; 0x01
}
    104e:	26 96       	adiw	r28, 0x06	; 6
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <DIO_u8set_pin_dir>:

u8 DIO_u8set_pin_dir(u8 Copy_u8_port_ID,u8 Copy_u8_pin_ID,u8 Copy_u8_pin_dir)
{
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	00 d0       	rcall	.+0      	; 0x1066 <DIO_u8set_pin_dir+0x6>
    1066:	00 d0       	rcall	.+0      	; 0x1068 <DIO_u8set_pin_dir+0x8>
    1068:	00 d0       	rcall	.+0      	; 0x106a <DIO_u8set_pin_dir+0xa>
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	8a 83       	std	Y+2, r24	; 0x02
    1070:	6b 83       	std	Y+3, r22	; 0x03
    1072:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
    1074:	19 82       	std	Y+1, r1	; 0x01
		if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	84 30       	cpi	r24, 0x04	; 4
    107a:	08 f0       	brcs	.+2      	; 0x107e <DIO_u8set_pin_dir+0x1e>
    107c:	e3 c0       	rjmp	.+454    	; 0x1244 <DIO_u8set_pin_dir+0x1e4>
		{
			if((Copy_u8_pin_ID>=MIN_u8_PIN_ID)&&(Copy_u8_pin_ID<=MAX_u8_PIN_ID))
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	88 30       	cpi	r24, 0x08	; 8
    1082:	08 f0       	brcs	.+2      	; 0x1086 <DIO_u8set_pin_dir+0x26>
    1084:	dc c0       	rjmp	.+440    	; 0x123e <DIO_u8set_pin_dir+0x1de>
			{
				if((Copy_u8_pin_dir==MIN_u8_PIN_DIR)||(Copy_u8_pin_dir==MAX_u8_PIN_DIR))
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	88 23       	and	r24, r24
    108a:	21 f0       	breq	.+8      	; 0x1094 <DIO_u8set_pin_dir+0x34>
    108c:	8c 81       	ldd	r24, Y+4	; 0x04
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	09 f0       	breq	.+2      	; 0x1094 <DIO_u8set_pin_dir+0x34>
    1092:	d2 c0       	rjmp	.+420    	; 0x1238 <DIO_u8set_pin_dir+0x1d8>
						{
							switch(Copy_u8_port_ID)
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	3e 83       	std	Y+6, r19	; 0x06
    109c:	2d 83       	std	Y+5, r18	; 0x05
    109e:	8d 81       	ldd	r24, Y+5	; 0x05
    10a0:	9e 81       	ldd	r25, Y+6	; 0x06
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	91 05       	cpc	r25, r1
    10a6:	09 f4       	brne	.+2      	; 0x10aa <DIO_u8set_pin_dir+0x4a>
    10a8:	43 c0       	rjmp	.+134    	; 0x1130 <DIO_u8set_pin_dir+0xd0>
    10aa:	2d 81       	ldd	r18, Y+5	; 0x05
    10ac:	3e 81       	ldd	r19, Y+6	; 0x06
    10ae:	22 30       	cpi	r18, 0x02	; 2
    10b0:	31 05       	cpc	r19, r1
    10b2:	2c f4       	brge	.+10     	; 0x10be <DIO_u8set_pin_dir+0x5e>
    10b4:	8d 81       	ldd	r24, Y+5	; 0x05
    10b6:	9e 81       	ldd	r25, Y+6	; 0x06
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	71 f0       	breq	.+28     	; 0x10d8 <DIO_u8set_pin_dir+0x78>
    10bc:	c5 c0       	rjmp	.+394    	; 0x1248 <DIO_u8set_pin_dir+0x1e8>
    10be:	2d 81       	ldd	r18, Y+5	; 0x05
    10c0:	3e 81       	ldd	r19, Y+6	; 0x06
    10c2:	22 30       	cpi	r18, 0x02	; 2
    10c4:	31 05       	cpc	r19, r1
    10c6:	09 f4       	brne	.+2      	; 0x10ca <DIO_u8set_pin_dir+0x6a>
    10c8:	5f c0       	rjmp	.+190    	; 0x1188 <DIO_u8set_pin_dir+0x128>
    10ca:	8d 81       	ldd	r24, Y+5	; 0x05
    10cc:	9e 81       	ldd	r25, Y+6	; 0x06
    10ce:	83 30       	cpi	r24, 0x03	; 3
    10d0:	91 05       	cpc	r25, r1
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <DIO_u8set_pin_dir+0x76>
    10d4:	85 c0       	rjmp	.+266    	; 0x11e0 <DIO_u8set_pin_dir+0x180>
    10d6:	b8 c0       	rjmp	.+368    	; 0x1248 <DIO_u8set_pin_dir+0x1e8>
								{
									case GROUP_A:
										Assign_Bit(DIO_U8_DDRA,Copy_u8_pin_ID,Copy_u8_pin_dir);
    10d8:	8c 81       	ldd	r24, Y+4	; 0x04
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	a1 f4       	brne	.+40     	; 0x1106 <DIO_u8set_pin_dir+0xa6>
    10de:	aa e3       	ldi	r26, 0x3A	; 58
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	ea e3       	ldi	r30, 0x3A	; 58
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	48 2f       	mov	r20, r24
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 2e       	mov	r0, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_u8set_pin_dir+0x9c>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <DIO_u8set_pin_dir+0x98>
    1100:	84 2b       	or	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	a1 c0       	rjmp	.+322    	; 0x1248 <DIO_u8set_pin_dir+0x1e8>
    1106:	aa e3       	ldi	r26, 0x3A	; 58
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	ea e3       	ldi	r30, 0x3A	; 58
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_u8set_pin_dir+0xc4>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_u8set_pin_dir+0xc0>
    1128:	80 95       	com	r24
    112a:	84 23       	and	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	8c c0       	rjmp	.+280    	; 0x1248 <DIO_u8set_pin_dir+0x1e8>
										break;
									case GROUP_B:
										Assign_Bit(DIO_U8_DDRB,Copy_u8_pin_ID,Copy_u8_pin_dir);
    1130:	8c 81       	ldd	r24, Y+4	; 0x04
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	a1 f4       	brne	.+40     	; 0x115e <DIO_u8set_pin_dir+0xfe>
    1136:	a7 e3       	ldi	r26, 0x37	; 55
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e7 e3       	ldi	r30, 0x37	; 55
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_u8set_pin_dir+0xf4>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_u8set_pin_dir+0xf0>
    1158:	84 2b       	or	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	75 c0       	rjmp	.+234    	; 0x1248 <DIO_u8set_pin_dir+0x1e8>
    115e:	a7 e3       	ldi	r26, 0x37	; 55
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e7 e3       	ldi	r30, 0x37	; 55
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <DIO_u8set_pin_dir+0x11c>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <DIO_u8set_pin_dir+0x118>
    1180:	80 95       	com	r24
    1182:	84 23       	and	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	60 c0       	rjmp	.+192    	; 0x1248 <DIO_u8set_pin_dir+0x1e8>
										break;
									case GROUP_C:
										Assign_Bit(DIO_U8_DDRC,Copy_u8_pin_ID,Copy_u8_pin_dir);
    1188:	8c 81       	ldd	r24, Y+4	; 0x04
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	a1 f4       	brne	.+40     	; 0x11b6 <DIO_u8set_pin_dir+0x156>
    118e:	a4 e3       	ldi	r26, 0x34	; 52
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e4 e3       	ldi	r30, 0x34	; 52
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <DIO_u8set_pin_dir+0x14c>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <DIO_u8set_pin_dir+0x148>
    11b0:	84 2b       	or	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	49 c0       	rjmp	.+146    	; 0x1248 <DIO_u8set_pin_dir+0x1e8>
    11b6:	a4 e3       	ldi	r26, 0x34	; 52
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e4 e3       	ldi	r30, 0x34	; 52
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <DIO_u8set_pin_dir+0x174>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <DIO_u8set_pin_dir+0x170>
    11d8:	80 95       	com	r24
    11da:	84 23       	and	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	34 c0       	rjmp	.+104    	; 0x1248 <DIO_u8set_pin_dir+0x1e8>
										break;
									case GROUP_D:
										Assign_Bit(DIO_U8_DDRD,Copy_u8_pin_ID,Copy_u8_pin_dir);
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	a1 f4       	brne	.+40     	; 0x120e <DIO_u8set_pin_dir+0x1ae>
    11e6:	a1 e3       	ldi	r26, 0x31	; 49
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e1 e3       	ldi	r30, 0x31	; 49
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <DIO_u8set_pin_dir+0x1a4>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <DIO_u8set_pin_dir+0x1a0>
    1208:	84 2b       	or	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	1d c0       	rjmp	.+58     	; 0x1248 <DIO_u8set_pin_dir+0x1e8>
    120e:	a1 e3       	ldi	r26, 0x31	; 49
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e1 e3       	ldi	r30, 0x31	; 49
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <DIO_u8set_pin_dir+0x1cc>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <DIO_u8set_pin_dir+0x1c8>
    1230:	80 95       	com	r24
    1232:	84 23       	and	r24, r20
    1234:	8c 93       	st	X, r24
    1236:	08 c0       	rjmp	.+16     	; 0x1248 <DIO_u8set_pin_dir+0x1e8>

								}
						}
				else
					{
					Loc_u8Error_state=DIO_u8_PIN_DIR_ERROR;
    1238:	8c e0       	ldi	r24, 0x0C	; 12
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	05 c0       	rjmp	.+10     	; 0x1248 <DIO_u8set_pin_dir+0x1e8>
					}

				}
			else
							{
				Loc_u8Error_state=DIO_u8_PIN_ID_ERROR;
    123e:	86 e0       	ldi	r24, 0x06	; 6
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_u8set_pin_dir+0x1e8>


		}
		else
		{
				Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
    1244:	83 e0       	ldi	r24, 0x03	; 3
    1246:	89 83       	std	Y+1, r24	; 0x01
		}

		return Loc_u8Error_state;
    1248:	89 81       	ldd	r24, Y+1	; 0x01

}
    124a:	26 96       	adiw	r28, 0x06	; 6
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <DIO_u8set_port_value>:

u8 DIO_u8set_port_value(u8 Copy_u8_port_ID,u8 Copy_u8_port_val)
{
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	00 d0       	rcall	.+0      	; 0x1262 <DIO_u8set_port_value+0x6>
    1262:	00 d0       	rcall	.+0      	; 0x1264 <DIO_u8set_port_value+0x8>
    1264:	0f 92       	push	r0
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	8a 83       	std	Y+2, r24	; 0x02
    126c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
    126e:	19 82       	std	Y+1, r1	; 0x01
			if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	84 30       	cpi	r24, 0x04	; 4
    1274:	e0 f5       	brcc	.+120    	; 0x12ee <DIO_u8set_port_value+0x92>
			{
				//solution  for this problem
					if((Copy_u8_port_val==MIN_u8_PORT_VAL)||(Copy_u8_port_val==MAX_u8_PORT_VAL))
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	88 23       	and	r24, r24
    127a:	19 f0       	breq	.+6      	; 0x1282 <DIO_u8set_port_value+0x26>
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	8f 3f       	cpi	r24, 0xFF	; 255
    1280:	99 f5       	brne	.+102    	; 0x12e8 <DIO_u8set_port_value+0x8c>
							{
								switch(Copy_u8_port_ID)
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	3d 83       	std	Y+5, r19	; 0x05
    128a:	2c 83       	std	Y+4, r18	; 0x04
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	9d 81       	ldd	r25, Y+5	; 0x05
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	91 05       	cpc	r25, r1
    1294:	d1 f0       	breq	.+52     	; 0x12ca <DIO_u8set_port_value+0x6e>
    1296:	2c 81       	ldd	r18, Y+4	; 0x04
    1298:	3d 81       	ldd	r19, Y+5	; 0x05
    129a:	22 30       	cpi	r18, 0x02	; 2
    129c:	31 05       	cpc	r19, r1
    129e:	2c f4       	brge	.+10     	; 0x12aa <DIO_u8set_port_value+0x4e>
    12a0:	8c 81       	ldd	r24, Y+4	; 0x04
    12a2:	9d 81       	ldd	r25, Y+5	; 0x05
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	61 f0       	breq	.+24     	; 0x12c0 <DIO_u8set_port_value+0x64>
    12a8:	24 c0       	rjmp	.+72     	; 0x12f2 <DIO_u8set_port_value+0x96>
    12aa:	2c 81       	ldd	r18, Y+4	; 0x04
    12ac:	3d 81       	ldd	r19, Y+5	; 0x05
    12ae:	22 30       	cpi	r18, 0x02	; 2
    12b0:	31 05       	cpc	r19, r1
    12b2:	81 f0       	breq	.+32     	; 0x12d4 <DIO_u8set_port_value+0x78>
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	9d 81       	ldd	r25, Y+5	; 0x05
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	91 05       	cpc	r25, r1
    12bc:	81 f0       	breq	.+32     	; 0x12de <DIO_u8set_port_value+0x82>
    12be:	19 c0       	rjmp	.+50     	; 0x12f2 <DIO_u8set_port_value+0x96>
									{
										case GROUP_A:
											DIO_U8_PORTA=Copy_u8_port_val;
    12c0:	eb e3       	ldi	r30, 0x3B	; 59
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	80 83       	st	Z, r24
    12c8:	14 c0       	rjmp	.+40     	; 0x12f2 <DIO_u8set_port_value+0x96>
											//Assign_Bit(DIO_U8_PORTA,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_B:
											DIO_U8_PORTB=Copy_u8_port_val;
    12ca:	e8 e3       	ldi	r30, 0x38	; 56
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	80 83       	st	Z, r24
    12d2:	0f c0       	rjmp	.+30     	; 0x12f2 <DIO_u8set_port_value+0x96>
											//Assign_Bit(DIO_U8_PORTB,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_C:
											DIO_U8_PORTC=Copy_u8_port_val;
    12d4:	e5 e3       	ldi	r30, 0x35	; 53
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	80 83       	st	Z, r24
    12dc:	0a c0       	rjmp	.+20     	; 0x12f2 <DIO_u8set_port_value+0x96>
											//Assign_Bit(DIO_U8_PORTC,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_D:
											DIO_U8_PORTD=Copy_u8_port_val;
    12de:	e2 e3       	ldi	r30, 0x32	; 50
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	80 83       	st	Z, r24
    12e6:	05 c0       	rjmp	.+10     	; 0x12f2 <DIO_u8set_port_value+0x96>

									}
							}
					else
						{
						Loc_u8Error_state=DIO_u8_PORT_VAL_ERROR;
    12e8:	8f e0       	ldi	r24, 0x0F	; 15
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_u8set_port_value+0x96>

			}

			else
			{
					Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	89 83       	std	Y+1, r24	; 0x01
			}

			return Loc_u8Error_state;
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <DIO_u8set_port_dir>:

u8 DIO_u8set_port_dir(u8 Copy_u8_port_ID,u8 Copy_u8_port_dir)
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	00 d0       	rcall	.+0      	; 0x130a <DIO_u8set_port_dir+0x6>
    130a:	00 d0       	rcall	.+0      	; 0x130c <DIO_u8set_port_dir+0x8>
    130c:	0f 92       	push	r0
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	8a 83       	std	Y+2, r24	; 0x02
    1314:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
    1316:	19 82       	std	Y+1, r1	; 0x01
			if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	84 30       	cpi	r24, 0x04	; 4
    131c:	e0 f5       	brcc	.+120    	; 0x1396 <DIO_u8set_port_dir+0x92>
			{
				//solution  for this problem
					if((Copy_u8_port_dir==MIN_u8_PORT_DIR)||(Copy_u8_port_dir==MAX_u8_PORT_DIR))
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	88 23       	and	r24, r24
    1322:	19 f0       	breq	.+6      	; 0x132a <DIO_u8set_port_dir+0x26>
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	8f 3f       	cpi	r24, 0xFF	; 255
    1328:	99 f5       	brne	.+102    	; 0x1390 <DIO_u8set_port_dir+0x8c>
							{
								switch(Copy_u8_port_ID)
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	3d 83       	std	Y+5, r19	; 0x05
    1332:	2c 83       	std	Y+4, r18	; 0x04
    1334:	8c 81       	ldd	r24, Y+4	; 0x04
    1336:	9d 81       	ldd	r25, Y+5	; 0x05
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	91 05       	cpc	r25, r1
    133c:	d1 f0       	breq	.+52     	; 0x1372 <DIO_u8set_port_dir+0x6e>
    133e:	2c 81       	ldd	r18, Y+4	; 0x04
    1340:	3d 81       	ldd	r19, Y+5	; 0x05
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	31 05       	cpc	r19, r1
    1346:	2c f4       	brge	.+10     	; 0x1352 <DIO_u8set_port_dir+0x4e>
    1348:	8c 81       	ldd	r24, Y+4	; 0x04
    134a:	9d 81       	ldd	r25, Y+5	; 0x05
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	61 f0       	breq	.+24     	; 0x1368 <DIO_u8set_port_dir+0x64>
    1350:	24 c0       	rjmp	.+72     	; 0x139a <DIO_u8set_port_dir+0x96>
    1352:	2c 81       	ldd	r18, Y+4	; 0x04
    1354:	3d 81       	ldd	r19, Y+5	; 0x05
    1356:	22 30       	cpi	r18, 0x02	; 2
    1358:	31 05       	cpc	r19, r1
    135a:	81 f0       	breq	.+32     	; 0x137c <DIO_u8set_port_dir+0x78>
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	9d 81       	ldd	r25, Y+5	; 0x05
    1360:	83 30       	cpi	r24, 0x03	; 3
    1362:	91 05       	cpc	r25, r1
    1364:	81 f0       	breq	.+32     	; 0x1386 <DIO_u8set_port_dir+0x82>
    1366:	19 c0       	rjmp	.+50     	; 0x139a <DIO_u8set_port_dir+0x96>
									{
										case GROUP_A:
											DIO_U8_DDRA=Copy_u8_port_dir;
    1368:	ea e3       	ldi	r30, 0x3A	; 58
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	80 83       	st	Z, r24
    1370:	14 c0       	rjmp	.+40     	; 0x139a <DIO_u8set_port_dir+0x96>
											//Assign_Bit(DIO_U8_PORTA,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_B:
											DIO_U8_DDRB=Copy_u8_port_dir;
    1372:	e7 e3       	ldi	r30, 0x37	; 55
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	80 83       	st	Z, r24
    137a:	0f c0       	rjmp	.+30     	; 0x139a <DIO_u8set_port_dir+0x96>
											//Assign_Bit(DIO_U8_PORTB,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_C:
											DIO_U8_DDRC=Copy_u8_port_dir;
    137c:	e4 e3       	ldi	r30, 0x34	; 52
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	80 83       	st	Z, r24
    1384:	0a c0       	rjmp	.+20     	; 0x139a <DIO_u8set_port_dir+0x96>
											//Assign_Bit(DIO_U8_PORTC,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_D:
											DIO_U8_DDRD=Copy_u8_port_dir;
    1386:	e1 e3       	ldi	r30, 0x31	; 49
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	80 83       	st	Z, r24
    138e:	05 c0       	rjmp	.+10     	; 0x139a <DIO_u8set_port_dir+0x96>

									}
							}
					else
						{
						Loc_u8Error_state=DIO_u8_PORT_DIR_ERROR;
    1390:	82 e1       	ldi	r24, 0x12	; 18
    1392:	89 83       	std	Y+1, r24	; 0x01
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO_u8set_port_dir+0x96>

			}

			else
			{
					Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
    1396:	83 e0       	ldi	r24, 0x03	; 3
    1398:	89 83       	std	Y+1, r24	; 0x01
			}

			return Loc_u8Error_state;
    139a:	89 81       	ldd	r24, Y+1	; 0x01
}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <DIO_u8get_pin_value>:

u8 DIO_u8get_pin_value(u8 Copy_u8_port_ID,u8 Copy_u8_pin_ID,u8 *Copy_u8_pin_val)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	27 97       	sbiw	r28, 0x07	; 7
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	8a 83       	std	Y+2, r24	; 0x02
    13c2:	6b 83       	std	Y+3, r22	; 0x03
    13c4:	5d 83       	std	Y+5, r21	; 0x05
    13c6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
    13c8:	19 82       	std	Y+1, r1	; 0x01
		if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	84 30       	cpi	r24, 0x04	; 4
    13ce:	08 f0       	brcs	.+2      	; 0x13d2 <DIO_u8get_pin_value+0x26>
    13d0:	78 c0       	rjmp	.+240    	; 0x14c2 <DIO_u8get_pin_value+0x116>
		{
			if((Copy_u8_pin_ID>=MIN_u8_PIN_ID)&&(Copy_u8_pin_ID<=MAX_u8_PIN_ID))
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	88 30       	cpi	r24, 0x08	; 8
    13d6:	08 f0       	brcs	.+2      	; 0x13da <DIO_u8get_pin_value+0x2e>
    13d8:	71 c0       	rjmp	.+226    	; 0x14bc <DIO_u8get_pin_value+0x110>
			{

							switch(Copy_u8_port_ID)
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	3f 83       	std	Y+7, r19	; 0x07
    13e2:	2e 83       	std	Y+6, r18	; 0x06
    13e4:	4e 81       	ldd	r20, Y+6	; 0x06
    13e6:	5f 81       	ldd	r21, Y+7	; 0x07
    13e8:	41 30       	cpi	r20, 0x01	; 1
    13ea:	51 05       	cpc	r21, r1
    13ec:	59 f1       	breq	.+86     	; 0x1444 <DIO_u8get_pin_value+0x98>
    13ee:	8e 81       	ldd	r24, Y+6	; 0x06
    13f0:	9f 81       	ldd	r25, Y+7	; 0x07
    13f2:	82 30       	cpi	r24, 0x02	; 2
    13f4:	91 05       	cpc	r25, r1
    13f6:	34 f4       	brge	.+12     	; 0x1404 <DIO_u8get_pin_value+0x58>
    13f8:	2e 81       	ldd	r18, Y+6	; 0x06
    13fa:	3f 81       	ldd	r19, Y+7	; 0x07
    13fc:	21 15       	cp	r18, r1
    13fe:	31 05       	cpc	r19, r1
    1400:	69 f0       	breq	.+26     	; 0x141c <DIO_u8get_pin_value+0x70>
    1402:	61 c0       	rjmp	.+194    	; 0x14c6 <DIO_u8get_pin_value+0x11a>
    1404:	4e 81       	ldd	r20, Y+6	; 0x06
    1406:	5f 81       	ldd	r21, Y+7	; 0x07
    1408:	42 30       	cpi	r20, 0x02	; 2
    140a:	51 05       	cpc	r21, r1
    140c:	79 f1       	breq	.+94     	; 0x146c <DIO_u8get_pin_value+0xc0>
    140e:	8e 81       	ldd	r24, Y+6	; 0x06
    1410:	9f 81       	ldd	r25, Y+7	; 0x07
    1412:	83 30       	cpi	r24, 0x03	; 3
    1414:	91 05       	cpc	r25, r1
    1416:	09 f4       	brne	.+2      	; 0x141a <DIO_u8get_pin_value+0x6e>
    1418:	3d c0       	rjmp	.+122    	; 0x1494 <DIO_u8get_pin_value+0xe8>
    141a:	55 c0       	rjmp	.+170    	; 0x14c6 <DIO_u8get_pin_value+0x11a>
								{
									case GROUP_A:
										*Copy_u8_pin_val = get_bit(DIO_U8_PINA,Copy_u8_pin_ID);
    141c:	e9 e3       	ldi	r30, 0x39	; 57
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	a9 01       	movw	r20, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_u8get_pin_value+0x88>
    1430:	55 95       	asr	r21
    1432:	47 95       	ror	r20
    1434:	8a 95       	dec	r24
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_u8get_pin_value+0x84>
    1438:	ca 01       	movw	r24, r20
    143a:	81 70       	andi	r24, 0x01	; 1
    143c:	ec 81       	ldd	r30, Y+4	; 0x04
    143e:	fd 81       	ldd	r31, Y+5	; 0x05
    1440:	80 83       	st	Z, r24
    1442:	41 c0       	rjmp	.+130    	; 0x14c6 <DIO_u8get_pin_value+0x11a>
										break;
									case GROUP_B:
										*Copy_u8_pin_val = get_bit(DIO_U8_PINB,Copy_u8_pin_ID);
    1444:	e6 e3       	ldi	r30, 0x36	; 54
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a9 01       	movw	r20, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_u8get_pin_value+0xb0>
    1458:	55 95       	asr	r21
    145a:	47 95       	ror	r20
    145c:	8a 95       	dec	r24
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_u8get_pin_value+0xac>
    1460:	ca 01       	movw	r24, r20
    1462:	81 70       	andi	r24, 0x01	; 1
    1464:	ec 81       	ldd	r30, Y+4	; 0x04
    1466:	fd 81       	ldd	r31, Y+5	; 0x05
    1468:	80 83       	st	Z, r24
    146a:	2d c0       	rjmp	.+90     	; 0x14c6 <DIO_u8get_pin_value+0x11a>
										break;
									case GROUP_C:
										*Copy_u8_pin_val = get_bit(DIO_U8_PINC,Copy_u8_pin_ID);
    146c:	e3 e3       	ldi	r30, 0x33	; 51
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	88 2f       	mov	r24, r24
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	a9 01       	movw	r20, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <DIO_u8get_pin_value+0xd8>
    1480:	55 95       	asr	r21
    1482:	47 95       	ror	r20
    1484:	8a 95       	dec	r24
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <DIO_u8get_pin_value+0xd4>
    1488:	ca 01       	movw	r24, r20
    148a:	81 70       	andi	r24, 0x01	; 1
    148c:	ec 81       	ldd	r30, Y+4	; 0x04
    148e:	fd 81       	ldd	r31, Y+5	; 0x05
    1490:	80 83       	st	Z, r24
    1492:	19 c0       	rjmp	.+50     	; 0x14c6 <DIO_u8get_pin_value+0x11a>
										break;
									case GROUP_D:
										*Copy_u8_pin_val = get_bit(DIO_U8_PIND,Copy_u8_pin_ID);
    1494:	e0 e3       	ldi	r30, 0x30	; 48
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	88 2f       	mov	r24, r24
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	a9 01       	movw	r20, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_u8get_pin_value+0x100>
    14a8:	55 95       	asr	r21
    14aa:	47 95       	ror	r20
    14ac:	8a 95       	dec	r24
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_u8get_pin_value+0xfc>
    14b0:	ca 01       	movw	r24, r20
    14b2:	81 70       	andi	r24, 0x01	; 1
    14b4:	ec 81       	ldd	r30, Y+4	; 0x04
    14b6:	fd 81       	ldd	r31, Y+5	; 0x05
    14b8:	80 83       	st	Z, r24
    14ba:	05 c0       	rjmp	.+10     	; 0x14c6 <DIO_u8get_pin_value+0x11a>


				}
			else
							{
				Loc_u8Error_state=DIO_u8_PIN_ID_ERROR;
    14bc:	86 e0       	ldi	r24, 0x06	; 6
    14be:	89 83       	std	Y+1, r24	; 0x01
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <DIO_u8get_pin_value+0x11a>


		}
		else
		{
				Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
    14c2:	83 e0       	ldi	r24, 0x03	; 3
    14c4:	89 83       	std	Y+1, r24	; 0x01
		}

		return Loc_u8Error_state;
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c8:	27 96       	adiw	r28, 0x07	; 7
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <DIO_u8Get_port_value>:

u8 DIO_u8Get_port_value(u8 Copy_u8_port_ID,u8 *Copy_u8_port_val)
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <DIO_u8Get_port_value+0x6>
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <DIO_u8Get_port_value+0x8>
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <DIO_u8Get_port_value+0xa>
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	8a 83       	std	Y+2, r24	; 0x02
    14ea:	7c 83       	std	Y+4, r23	; 0x04
    14ec:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
    14ee:	19 82       	std	Y+1, r1	; 0x01
			if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	84 30       	cpi	r24, 0x04	; 4
    14f4:	d8 f5       	brcc	.+118    	; 0x156c <DIO_u8Get_port_value+0x92>
			{

								switch(Copy_u8_port_ID)
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	3e 83       	std	Y+6, r19	; 0x06
    14fe:	2d 83       	std	Y+5, r18	; 0x05
    1500:	8d 81       	ldd	r24, Y+5	; 0x05
    1502:	9e 81       	ldd	r25, Y+6	; 0x06
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	91 05       	cpc	r25, r1
    1508:	e1 f0       	breq	.+56     	; 0x1542 <DIO_u8Get_port_value+0x68>
    150a:	2d 81       	ldd	r18, Y+5	; 0x05
    150c:	3e 81       	ldd	r19, Y+6	; 0x06
    150e:	22 30       	cpi	r18, 0x02	; 2
    1510:	31 05       	cpc	r19, r1
    1512:	2c f4       	brge	.+10     	; 0x151e <DIO_u8Get_port_value+0x44>
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	61 f0       	breq	.+24     	; 0x1534 <DIO_u8Get_port_value+0x5a>
    151c:	29 c0       	rjmp	.+82     	; 0x1570 <DIO_u8Get_port_value+0x96>
    151e:	2d 81       	ldd	r18, Y+5	; 0x05
    1520:	3e 81       	ldd	r19, Y+6	; 0x06
    1522:	22 30       	cpi	r18, 0x02	; 2
    1524:	31 05       	cpc	r19, r1
    1526:	a1 f0       	breq	.+40     	; 0x1550 <DIO_u8Get_port_value+0x76>
    1528:	8d 81       	ldd	r24, Y+5	; 0x05
    152a:	9e 81       	ldd	r25, Y+6	; 0x06
    152c:	83 30       	cpi	r24, 0x03	; 3
    152e:	91 05       	cpc	r25, r1
    1530:	b1 f0       	breq	.+44     	; 0x155e <DIO_u8Get_port_value+0x84>
    1532:	1e c0       	rjmp	.+60     	; 0x1570 <DIO_u8Get_port_value+0x96>
									{
										case GROUP_A:
											*Copy_u8_port_val = DIO_U8_PINA;
    1534:	e9 e3       	ldi	r30, 0x39	; 57
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	eb 81       	ldd	r30, Y+3	; 0x03
    153c:	fc 81       	ldd	r31, Y+4	; 0x04
    153e:	80 83       	st	Z, r24
    1540:	17 c0       	rjmp	.+46     	; 0x1570 <DIO_u8Get_port_value+0x96>
											break;
										case GROUP_B:
											*Copy_u8_port_val = DIO_U8_PINB;
    1542:	e6 e3       	ldi	r30, 0x36	; 54
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	eb 81       	ldd	r30, Y+3	; 0x03
    154a:	fc 81       	ldd	r31, Y+4	; 0x04
    154c:	80 83       	st	Z, r24
    154e:	10 c0       	rjmp	.+32     	; 0x1570 <DIO_u8Get_port_value+0x96>
											break;
										case GROUP_C:
											*Copy_u8_port_val = DIO_U8_PINC;
    1550:	e3 e3       	ldi	r30, 0x33	; 51
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	eb 81       	ldd	r30, Y+3	; 0x03
    1558:	fc 81       	ldd	r31, Y+4	; 0x04
    155a:	80 83       	st	Z, r24
    155c:	09 c0       	rjmp	.+18     	; 0x1570 <DIO_u8Get_port_value+0x96>
											break;
										case GROUP_D:
											*Copy_u8_port_val =DIO_U8_PIND;
    155e:	e0 e3       	ldi	r30, 0x30	; 48
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	eb 81       	ldd	r30, Y+3	; 0x03
    1566:	fc 81       	ldd	r31, Y+4	; 0x04
    1568:	80 83       	st	Z, r24
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_u8Get_port_value+0x96>

			}

			else
			{
					Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
    156c:	83 e0       	ldi	r24, 0x03	; 3
    156e:	89 83       	std	Y+1, r24	; 0x01
			}

			return Loc_u8Error_state;
    1570:	89 81       	ldd	r24, Y+1	; 0x01

}
    1572:	26 96       	adiw	r28, 0x06	; 6
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <LCD_void_Init>:
#include "LCD_PRIVATE.h"
#include "LCD_CONFIG.h"
#include "LCD_INTERFACE.h"

void LCD_void_Init(void)
{
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	ca 55       	subi	r28, 0x5A	; 90
    1592:	d0 40       	sbci	r29, 0x00	; 0
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	f8 94       	cli
    1598:	de bf       	out	0x3e, r29	; 62
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	cd bf       	out	0x3d, r28	; 61
#if LCD_3PIN_IN_CTRL_PORT_IN_4PIN_MODE==LCD_FIRST_3PIN_IN_CTRL_PORT_IN_4PIN_MODE
	DIO_u8set_pin_dir(LCD_u8_CTRL_PORT,LCD_u8_DATA_PIN_0,DIO_u8_OUTPUT);
	DIO_u8set_pin_dir(LCD_u8_CTRL_PORT,LCD_u8_DATA_PIN_1,DIO_u8_OUTPUT);
	DIO_u8set_pin_dir(LCD_u8_CTRL_PORT,LCD_u8_DATA_PIN_2,DIO_u8_OUTPUT);
#elif LCD_3PIN_IN_CTRL_PORT_IN_4PIN_MODE==LCD_LAST_3PIN_IN_CTRL_PORT_IN_4PIN_MODE
	DIO_u8set_pin_dir(LCD_u8_CTRL_PORT,LCD_u8_DATA_PIN_5,DIO_u8_OUTPUT);
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	65 e0       	ldi	r22, 0x05	; 5
    15a2:	41 e0       	ldi	r20, 0x01	; 1
    15a4:	0e 94 30 08 	call	0x1060	; 0x1060 <DIO_u8set_pin_dir>
	DIO_u8set_pin_dir(LCD_u8_CTRL_PORT,LCD_u8_DATA_PIN_6,DIO_u8_OUTPUT);
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	66 e0       	ldi	r22, 0x06	; 6
    15ac:	41 e0       	ldi	r20, 0x01	; 1
    15ae:	0e 94 30 08 	call	0x1060	; 0x1060 <DIO_u8set_pin_dir>
	DIO_u8set_pin_dir(LCD_u8_CTRL_PORT,LCD_u8_DATA_PIN_7,DIO_u8_OUTPUT);
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	67 e0       	ldi	r22, 0x07	; 7
    15b6:	41 e0       	ldi	r20, 0x01	; 1
    15b8:	0e 94 30 08 	call	0x1060	; 0x1060 <DIO_u8set_pin_dir>
#endif

#if LCD_4PIN_IN_DATA_PORT_IN_4PIN_MODE==LCD_FIRST_4PIN_IN_DATA_PORT_IN_4PIN_MODE
	DIO_u8set_pin_dir(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_0,DIO_u8_OUTPUT);
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	41 e0       	ldi	r20, 0x01	; 1
    15c2:	0e 94 30 08 	call	0x1060	; 0x1060 <DIO_u8set_pin_dir>
	DIO_u8set_pin_dir(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_1,DIO_u8_OUTPUT);
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	61 e0       	ldi	r22, 0x01	; 1
    15ca:	41 e0       	ldi	r20, 0x01	; 1
    15cc:	0e 94 30 08 	call	0x1060	; 0x1060 <DIO_u8set_pin_dir>
	DIO_u8set_pin_dir(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_2,DIO_u8_OUTPUT);
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	62 e0       	ldi	r22, 0x02	; 2
    15d4:	41 e0       	ldi	r20, 0x01	; 1
    15d6:	0e 94 30 08 	call	0x1060	; 0x1060 <DIO_u8set_pin_dir>
	DIO_u8set_pin_dir(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_3,DIO_u8_OUTPUT);
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	63 e0       	ldi	r22, 0x03	; 3
    15de:	41 e0       	ldi	r20, 0x01	; 1
    15e0:	0e 94 30 08 	call	0x1060	; 0x1060 <DIO_u8set_pin_dir>
    15e4:	fe 01       	movw	r30, r28
    15e6:	e9 5a       	subi	r30, 0xA9	; 169
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	a0 e2       	ldi	r26, 0x20	; 32
    15f0:	b2 e4       	ldi	r27, 0x42	; 66
    15f2:	80 83       	st	Z, r24
    15f4:	91 83       	std	Z+1, r25	; 0x01
    15f6:	a2 83       	std	Z+2, r26	; 0x02
    15f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fa:	8e 01       	movw	r16, r28
    15fc:	0d 5a       	subi	r16, 0xAD	; 173
    15fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1600:	fe 01       	movw	r30, r28
    1602:	e9 5a       	subi	r30, 0xA9	; 169
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	60 81       	ld	r22, Z
    1608:	71 81       	ldd	r23, Z+1	; 0x01
    160a:	82 81       	ldd	r24, Z+2	; 0x02
    160c:	93 81       	ldd	r25, Z+3	; 0x03
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	4a ef       	ldi	r20, 0xFA	; 250
    1614:	54 e4       	ldi	r21, 0x44	; 68
    1616:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	f8 01       	movw	r30, r16
    1620:	80 83       	st	Z, r24
    1622:	91 83       	std	Z+1, r25	; 0x01
    1624:	a2 83       	std	Z+2, r26	; 0x02
    1626:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1628:	fe 01       	movw	r30, r28
    162a:	ed 5a       	subi	r30, 0xAD	; 173
    162c:	ff 4f       	sbci	r31, 0xFF	; 255
    162e:	60 81       	ld	r22, Z
    1630:	71 81       	ldd	r23, Z+1	; 0x01
    1632:	82 81       	ldd	r24, Z+2	; 0x02
    1634:	93 81       	ldd	r25, Z+3	; 0x03
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e8       	ldi	r20, 0x80	; 128
    163c:	5f e3       	ldi	r21, 0x3F	; 63
    163e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1642:	88 23       	and	r24, r24
    1644:	44 f4       	brge	.+16     	; 0x1656 <LCD_void_Init+0xd2>
		__ticks = 1;
    1646:	fe 01       	movw	r30, r28
    1648:	ef 5a       	subi	r30, 0xAF	; 175
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	91 83       	std	Z+1, r25	; 0x01
    1652:	80 83       	st	Z, r24
    1654:	64 c0       	rjmp	.+200    	; 0x171e <LCD_void_Init+0x19a>
	else if (__tmp > 65535)
    1656:	fe 01       	movw	r30, r28
    1658:	ed 5a       	subi	r30, 0xAD	; 173
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	60 81       	ld	r22, Z
    165e:	71 81       	ldd	r23, Z+1	; 0x01
    1660:	82 81       	ldd	r24, Z+2	; 0x02
    1662:	93 81       	ldd	r25, Z+3	; 0x03
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	3f ef       	ldi	r19, 0xFF	; 255
    1668:	4f e7       	ldi	r20, 0x7F	; 127
    166a:	57 e4       	ldi	r21, 0x47	; 71
    166c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1670:	18 16       	cp	r1, r24
    1672:	0c f0       	brlt	.+2      	; 0x1676 <LCD_void_Init+0xf2>
    1674:	43 c0       	rjmp	.+134    	; 0x16fc <LCD_void_Init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1676:	fe 01       	movw	r30, r28
    1678:	e9 5a       	subi	r30, 0xA9	; 169
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	60 81       	ld	r22, Z
    167e:	71 81       	ldd	r23, Z+1	; 0x01
    1680:	82 81       	ldd	r24, Z+2	; 0x02
    1682:	93 81       	ldd	r25, Z+3	; 0x03
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e2       	ldi	r20, 0x20	; 32
    168a:	51 e4       	ldi	r21, 0x41	; 65
    168c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	8e 01       	movw	r16, r28
    1696:	0f 5a       	subi	r16, 0xAF	; 175
    1698:	1f 4f       	sbci	r17, 0xFF	; 255
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	f8 01       	movw	r30, r16
    16a8:	91 83       	std	Z+1, r25	; 0x01
    16aa:	80 83       	st	Z, r24
    16ac:	1f c0       	rjmp	.+62     	; 0x16ec <LCD_void_Init+0x168>
    16ae:	fe 01       	movw	r30, r28
    16b0:	e1 5b       	subi	r30, 0xB1	; 177
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	88 ec       	ldi	r24, 0xC8	; 200
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	91 83       	std	Z+1, r25	; 0x01
    16ba:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16bc:	fe 01       	movw	r30, r28
    16be:	e1 5b       	subi	r30, 0xB1	; 177
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <LCD_void_Init+0x142>
    16ca:	fe 01       	movw	r30, r28
    16cc:	e1 5b       	subi	r30, 0xB1	; 177
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	91 83       	std	Z+1, r25	; 0x01
    16d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d4:	de 01       	movw	r26, r28
    16d6:	af 5a       	subi	r26, 0xAF	; 175
    16d8:	bf 4f       	sbci	r27, 0xFF	; 255
    16da:	fe 01       	movw	r30, r28
    16dc:	ef 5a       	subi	r30, 0xAF	; 175
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	11 96       	adiw	r26, 0x01	; 1
    16e8:	9c 93       	st	X, r25
    16ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ec:	fe 01       	movw	r30, r28
    16ee:	ef 5a       	subi	r30, 0xAF	; 175
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	80 81       	ld	r24, Z
    16f4:	91 81       	ldd	r25, Z+1	; 0x01
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	d1 f6       	brne	.-76     	; 0x16ae <LCD_void_Init+0x12a>
    16fa:	27 c0       	rjmp	.+78     	; 0x174a <LCD_void_Init+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fc:	8e 01       	movw	r16, r28
    16fe:	0f 5a       	subi	r16, 0xAF	; 175
    1700:	1f 4f       	sbci	r17, 0xFF	; 255
    1702:	fe 01       	movw	r30, r28
    1704:	ed 5a       	subi	r30, 0xAD	; 173
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	60 81       	ld	r22, Z
    170a:	71 81       	ldd	r23, Z+1	; 0x01
    170c:	82 81       	ldd	r24, Z+2	; 0x02
    170e:	93 81       	ldd	r25, Z+3	; 0x03
    1710:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	f8 01       	movw	r30, r16
    171a:	91 83       	std	Z+1, r25	; 0x01
    171c:	80 83       	st	Z, r24
    171e:	de 01       	movw	r26, r28
    1720:	a3 5b       	subi	r26, 0xB3	; 179
    1722:	bf 4f       	sbci	r27, 0xFF	; 255
    1724:	fe 01       	movw	r30, r28
    1726:	ef 5a       	subi	r30, 0xAF	; 175
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	80 81       	ld	r24, Z
    172c:	91 81       	ldd	r25, Z+1	; 0x01
    172e:	8d 93       	st	X+, r24
    1730:	9c 93       	st	X, r25
    1732:	fe 01       	movw	r30, r28
    1734:	e3 5b       	subi	r30, 0xB3	; 179
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	80 81       	ld	r24, Z
    173a:	91 81       	ldd	r25, Z+1	; 0x01
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <LCD_void_Init+0x1b8>
    1740:	fe 01       	movw	r30, r28
    1742:	e3 5b       	subi	r30, 0xB3	; 179
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	91 83       	std	Z+1, r25	; 0x01
    1748:	80 83       	st	Z, r24
	DIO_u8set_pin_dir(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_7,DIO_u8_OUTPUT);
#endif

	_delay_ms(40);

	LCD_void_Write_Cmd(0x02);
    174a:	82 e0       	ldi	r24, 0x02	; 2
    174c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_void_Write_Cmd>
	LCD_void_Write_Cmd(0x28);// N:1 two line   //N:0  one line
    1750:	88 e2       	ldi	r24, 0x28	; 40
    1752:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_void_Write_Cmd>
    1756:	fe 01       	movw	r30, r28
    1758:	e7 5b       	subi	r30, 0xB7	; 183
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a8 e4       	ldi	r26, 0x48	; 72
    1762:	b2 e4       	ldi	r27, 0x42	; 66
    1764:	80 83       	st	Z, r24
    1766:	91 83       	std	Z+1, r25	; 0x01
    1768:	a2 83       	std	Z+2, r26	; 0x02
    176a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    176c:	8e 01       	movw	r16, r28
    176e:	0b 5b       	subi	r16, 0xBB	; 187
    1770:	1f 4f       	sbci	r17, 0xFF	; 255
    1772:	fe 01       	movw	r30, r28
    1774:	e7 5b       	subi	r30, 0xB7	; 183
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	60 81       	ld	r22, Z
    177a:	71 81       	ldd	r23, Z+1	; 0x01
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	93 81       	ldd	r25, Z+3	; 0x03
    1780:	2b ea       	ldi	r18, 0xAB	; 171
    1782:	3a ea       	ldi	r19, 0xAA	; 170
    1784:	4a e2       	ldi	r20, 0x2A	; 42
    1786:	50 e4       	ldi	r21, 0x40	; 64
    1788:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	f8 01       	movw	r30, r16
    1792:	80 83       	st	Z, r24
    1794:	91 83       	std	Z+1, r25	; 0x01
    1796:	a2 83       	std	Z+2, r26	; 0x02
    1798:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    179a:	fe 01       	movw	r30, r28
    179c:	eb 5b       	subi	r30, 0xBB	; 187
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	60 81       	ld	r22, Z
    17a2:	71 81       	ldd	r23, Z+1	; 0x01
    17a4:	82 81       	ldd	r24, Z+2	; 0x02
    17a6:	93 81       	ldd	r25, Z+3	; 0x03
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e8       	ldi	r20, 0x80	; 128
    17ae:	5f e3       	ldi	r21, 0x3F	; 63
    17b0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17b4:	88 23       	and	r24, r24
    17b6:	34 f4       	brge	.+12     	; 0x17c4 <LCD_void_Init+0x240>
		__ticks = 1;
    17b8:	fe 01       	movw	r30, r28
    17ba:	ec 5b       	subi	r30, 0xBC	; 188
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	80 83       	st	Z, r24
    17c2:	a7 c0       	rjmp	.+334    	; 0x1912 <LCD_void_Init+0x38e>
	else if (__tmp > 255)
    17c4:	fe 01       	movw	r30, r28
    17c6:	eb 5b       	subi	r30, 0xBB	; 187
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	4f e7       	ldi	r20, 0x7F	; 127
    17d8:	53 e4       	ldi	r21, 0x43	; 67
    17da:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17de:	18 16       	cp	r1, r24
    17e0:	0c f0       	brlt	.+2      	; 0x17e4 <LCD_void_Init+0x260>
    17e2:	87 c0       	rjmp	.+270    	; 0x18f2 <LCD_void_Init+0x36e>
	{
		_delay_ms(__us / 1000.0);
    17e4:	fe 01       	movw	r30, r28
    17e6:	e7 5b       	subi	r30, 0xB7	; 183
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	60 81       	ld	r22, Z
    17ec:	71 81       	ldd	r23, Z+1	; 0x01
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	4a e7       	ldi	r20, 0x7A	; 122
    17f8:	54 e4       	ldi	r21, 0x44	; 68
    17fa:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	fe 01       	movw	r30, r28
    1804:	e0 5c       	subi	r30, 0xC0	; 192
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	80 83       	st	Z, r24
    180a:	91 83       	std	Z+1, r25	; 0x01
    180c:	a2 83       	std	Z+2, r26	; 0x02
    180e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1810:	fe 01       	movw	r30, r28
    1812:	e0 5c       	subi	r30, 0xC0	; 192
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	60 81       	ld	r22, Z
    1818:	71 81       	ldd	r23, Z+1	; 0x01
    181a:	82 81       	ldd	r24, Z+2	; 0x02
    181c:	93 81       	ldd	r25, Z+3	; 0x03
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	4a ef       	ldi	r20, 0xFA	; 250
    1824:	54 e4       	ldi	r21, 0x44	; 68
    1826:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	8c af       	std	Y+60, r24	; 0x3c
    1830:	9d af       	std	Y+61, r25	; 0x3d
    1832:	ae af       	std	Y+62, r26	; 0x3e
    1834:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    1836:	6c ad       	ldd	r22, Y+60	; 0x3c
    1838:	7d ad       	ldd	r23, Y+61	; 0x3d
    183a:	8e ad       	ldd	r24, Y+62	; 0x3e
    183c:	9f ad       	ldd	r25, Y+63	; 0x3f
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e8       	ldi	r20, 0x80	; 128
    1844:	5f e3       	ldi	r21, 0x3F	; 63
    1846:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    184a:	88 23       	and	r24, r24
    184c:	2c f4       	brge	.+10     	; 0x1858 <LCD_void_Init+0x2d4>
		__ticks = 1;
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	9b af       	std	Y+59, r25	; 0x3b
    1854:	8a af       	std	Y+58, r24	; 0x3a
    1856:	42 c0       	rjmp	.+132    	; 0x18dc <LCD_void_Init+0x358>
	else if (__tmp > 65535)
    1858:	6c ad       	ldd	r22, Y+60	; 0x3c
    185a:	7d ad       	ldd	r23, Y+61	; 0x3d
    185c:	8e ad       	ldd	r24, Y+62	; 0x3e
    185e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	3f ef       	ldi	r19, 0xFF	; 255
    1864:	4f e7       	ldi	r20, 0x7F	; 127
    1866:	57 e4       	ldi	r21, 0x47	; 71
    1868:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    186c:	18 16       	cp	r1, r24
    186e:	64 f5       	brge	.+88     	; 0x18c8 <LCD_void_Init+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1870:	fe 01       	movw	r30, r28
    1872:	e0 5c       	subi	r30, 0xC0	; 192
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	60 81       	ld	r22, Z
    1878:	71 81       	ldd	r23, Z+1	; 0x01
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	93 81       	ldd	r25, Z+3	; 0x03
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	40 e2       	ldi	r20, 0x20	; 32
    1884:	51 e4       	ldi	r21, 0x41	; 65
    1886:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	bc 01       	movw	r22, r24
    1890:	cd 01       	movw	r24, r26
    1892:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	9b af       	std	Y+59, r25	; 0x3b
    189c:	8a af       	std	Y+58, r24	; 0x3a
    189e:	0f c0       	rjmp	.+30     	; 0x18be <LCD_void_Init+0x33a>
    18a0:	88 ec       	ldi	r24, 0xC8	; 200
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	99 af       	std	Y+57, r25	; 0x39
    18a6:	88 af       	std	Y+56, r24	; 0x38
    18a8:	88 ad       	ldd	r24, Y+56	; 0x38
    18aa:	99 ad       	ldd	r25, Y+57	; 0x39
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <LCD_void_Init+0x328>
    18b0:	99 af       	std	Y+57, r25	; 0x39
    18b2:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b4:	8a ad       	ldd	r24, Y+58	; 0x3a
    18b6:	9b ad       	ldd	r25, Y+59	; 0x3b
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	9b af       	std	Y+59, r25	; 0x3b
    18bc:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18be:	8a ad       	ldd	r24, Y+58	; 0x3a
    18c0:	9b ad       	ldd	r25, Y+59	; 0x3b
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	69 f7       	brne	.-38     	; 0x18a0 <LCD_void_Init+0x31c>
    18c6:	2e c0       	rjmp	.+92     	; 0x1924 <LCD_void_Init+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c8:	6c ad       	ldd	r22, Y+60	; 0x3c
    18ca:	7d ad       	ldd	r23, Y+61	; 0x3d
    18cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    18ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    18d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	9b af       	std	Y+59, r25	; 0x3b
    18da:	8a af       	std	Y+58, r24	; 0x3a
    18dc:	8a ad       	ldd	r24, Y+58	; 0x3a
    18de:	9b ad       	ldd	r25, Y+59	; 0x3b
    18e0:	9f ab       	std	Y+55, r25	; 0x37
    18e2:	8e ab       	std	Y+54, r24	; 0x36
    18e4:	8e a9       	ldd	r24, Y+54	; 0x36
    18e6:	9f a9       	ldd	r25, Y+55	; 0x37
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <LCD_void_Init+0x364>
    18ec:	9f ab       	std	Y+55, r25	; 0x37
    18ee:	8e ab       	std	Y+54, r24	; 0x36
    18f0:	19 c0       	rjmp	.+50     	; 0x1924 <LCD_void_Init+0x3a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18f2:	8e 01       	movw	r16, r28
    18f4:	0c 5b       	subi	r16, 0xBC	; 188
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	fe 01       	movw	r30, r28
    18fa:	eb 5b       	subi	r30, 0xBB	; 187
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	60 81       	ld	r22, Z
    1900:	71 81       	ldd	r23, Z+1	; 0x01
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	f8 01       	movw	r30, r16
    1910:	80 83       	st	Z, r24
    1912:	fe 01       	movw	r30, r28
    1914:	ec 5b       	subi	r30, 0xBC	; 188
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	80 81       	ld	r24, Z
    191a:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    191c:	8d a9       	ldd	r24, Y+53	; 0x35
    191e:	8a 95       	dec	r24
    1920:	f1 f7       	brne	.-4      	; 0x191e <LCD_void_Init+0x39a>
    1922:	8d ab       	std	Y+53, r24	; 0x35
	//F:0  5*7pixels //F:1 5*11 Pixels
	_delay_us(50);
	LCD_void_Write_Cmd(0x0E);	//D=1 DISPLAY ON    // D:0 DISPLAY OFF
    1924:	8e e0       	ldi	r24, 0x0E	; 14
    1926:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_void_Write_Cmd>
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	a8 e4       	ldi	r26, 0x48	; 72
    1930:	b2 e4       	ldi	r27, 0x42	; 66
    1932:	89 ab       	std	Y+49, r24	; 0x31
    1934:	9a ab       	std	Y+50, r25	; 0x32
    1936:	ab ab       	std	Y+51, r26	; 0x33
    1938:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    193a:	69 a9       	ldd	r22, Y+49	; 0x31
    193c:	7a a9       	ldd	r23, Y+50	; 0x32
    193e:	8b a9       	ldd	r24, Y+51	; 0x33
    1940:	9c a9       	ldd	r25, Y+52	; 0x34
    1942:	2b ea       	ldi	r18, 0xAB	; 171
    1944:	3a ea       	ldi	r19, 0xAA	; 170
    1946:	4a e2       	ldi	r20, 0x2A	; 42
    1948:	50 e4       	ldi	r21, 0x40	; 64
    194a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	8d a7       	std	Y+45, r24	; 0x2d
    1954:	9e a7       	std	Y+46, r25	; 0x2e
    1956:	af a7       	std	Y+47, r26	; 0x2f
    1958:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    195a:	6d a5       	ldd	r22, Y+45	; 0x2d
    195c:	7e a5       	ldd	r23, Y+46	; 0x2e
    195e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1960:	98 a9       	ldd	r25, Y+48	; 0x30
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e8       	ldi	r20, 0x80	; 128
    1968:	5f e3       	ldi	r21, 0x3F	; 63
    196a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    196e:	88 23       	and	r24, r24
    1970:	1c f4       	brge	.+6      	; 0x1978 <LCD_void_Init+0x3f4>
		__ticks = 1;
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	8c a7       	std	Y+44, r24	; 0x2c
    1976:	91 c0       	rjmp	.+290    	; 0x1a9a <LCD_void_Init+0x516>
	else if (__tmp > 255)
    1978:	6d a5       	ldd	r22, Y+45	; 0x2d
    197a:	7e a5       	ldd	r23, Y+46	; 0x2e
    197c:	8f a5       	ldd	r24, Y+47	; 0x2f
    197e:	98 a9       	ldd	r25, Y+48	; 0x30
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	4f e7       	ldi	r20, 0x7F	; 127
    1986:	53 e4       	ldi	r21, 0x43	; 67
    1988:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    198c:	18 16       	cp	r1, r24
    198e:	0c f0       	brlt	.+2      	; 0x1992 <LCD_void_Init+0x40e>
    1990:	7b c0       	rjmp	.+246    	; 0x1a88 <LCD_void_Init+0x504>
	{
		_delay_ms(__us / 1000.0);
    1992:	69 a9       	ldd	r22, Y+49	; 0x31
    1994:	7a a9       	ldd	r23, Y+50	; 0x32
    1996:	8b a9       	ldd	r24, Y+51	; 0x33
    1998:	9c a9       	ldd	r25, Y+52	; 0x34
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	4a e7       	ldi	r20, 0x7A	; 122
    19a0:	54 e4       	ldi	r21, 0x44	; 68
    19a2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	88 a7       	std	Y+40, r24	; 0x28
    19ac:	99 a7       	std	Y+41, r25	; 0x29
    19ae:	aa a7       	std	Y+42, r26	; 0x2a
    19b0:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b2:	68 a5       	ldd	r22, Y+40	; 0x28
    19b4:	79 a5       	ldd	r23, Y+41	; 0x29
    19b6:	8a a5       	ldd	r24, Y+42	; 0x2a
    19b8:	9b a5       	ldd	r25, Y+43	; 0x2b
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	4a ef       	ldi	r20, 0xFA	; 250
    19c0:	54 e4       	ldi	r21, 0x44	; 68
    19c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8c a3       	std	Y+36, r24	; 0x24
    19cc:	9d a3       	std	Y+37, r25	; 0x25
    19ce:	ae a3       	std	Y+38, r26	; 0x26
    19d0:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    19d2:	6c a1       	ldd	r22, Y+36	; 0x24
    19d4:	7d a1       	ldd	r23, Y+37	; 0x25
    19d6:	8e a1       	ldd	r24, Y+38	; 0x26
    19d8:	9f a1       	ldd	r25, Y+39	; 0x27
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e8       	ldi	r20, 0x80	; 128
    19e0:	5f e3       	ldi	r21, 0x3F	; 63
    19e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19e6:	88 23       	and	r24, r24
    19e8:	2c f4       	brge	.+10     	; 0x19f4 <LCD_void_Init+0x470>
		__ticks = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9b a3       	std	Y+35, r25	; 0x23
    19f0:	8a a3       	std	Y+34, r24	; 0x22
    19f2:	3f c0       	rjmp	.+126    	; 0x1a72 <LCD_void_Init+0x4ee>
	else if (__tmp > 65535)
    19f4:	6c a1       	ldd	r22, Y+36	; 0x24
    19f6:	7d a1       	ldd	r23, Y+37	; 0x25
    19f8:	8e a1       	ldd	r24, Y+38	; 0x26
    19fa:	9f a1       	ldd	r25, Y+39	; 0x27
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	3f ef       	ldi	r19, 0xFF	; 255
    1a00:	4f e7       	ldi	r20, 0x7F	; 127
    1a02:	57 e4       	ldi	r21, 0x47	; 71
    1a04:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a08:	18 16       	cp	r1, r24
    1a0a:	4c f5       	brge	.+82     	; 0x1a5e <LCD_void_Init+0x4da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0c:	68 a5       	ldd	r22, Y+40	; 0x28
    1a0e:	79 a5       	ldd	r23, Y+41	; 0x29
    1a10:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a12:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e2       	ldi	r20, 0x20	; 32
    1a1a:	51 e4       	ldi	r21, 0x41	; 65
    1a1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	9b a3       	std	Y+35, r25	; 0x23
    1a32:	8a a3       	std	Y+34, r24	; 0x22
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <LCD_void_Init+0x4d0>
    1a36:	88 ec       	ldi	r24, 0xC8	; 200
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	99 a3       	std	Y+33, r25	; 0x21
    1a3c:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a3e:	88 a1       	ldd	r24, Y+32	; 0x20
    1a40:	99 a1       	ldd	r25, Y+33	; 0x21
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <LCD_void_Init+0x4be>
    1a46:	99 a3       	std	Y+33, r25	; 0x21
    1a48:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4a:	8a a1       	ldd	r24, Y+34	; 0x22
    1a4c:	9b a1       	ldd	r25, Y+35	; 0x23
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	9b a3       	std	Y+35, r25	; 0x23
    1a52:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a54:	8a a1       	ldd	r24, Y+34	; 0x22
    1a56:	9b a1       	ldd	r25, Y+35	; 0x23
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	69 f7       	brne	.-38     	; 0x1a36 <LCD_void_Init+0x4b2>
    1a5c:	24 c0       	rjmp	.+72     	; 0x1aa6 <LCD_void_Init+0x522>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5e:	6c a1       	ldd	r22, Y+36	; 0x24
    1a60:	7d a1       	ldd	r23, Y+37	; 0x25
    1a62:	8e a1       	ldd	r24, Y+38	; 0x26
    1a64:	9f a1       	ldd	r25, Y+39	; 0x27
    1a66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	9b a3       	std	Y+35, r25	; 0x23
    1a70:	8a a3       	std	Y+34, r24	; 0x22
    1a72:	8a a1       	ldd	r24, Y+34	; 0x22
    1a74:	9b a1       	ldd	r25, Y+35	; 0x23
    1a76:	9f 8f       	std	Y+31, r25	; 0x1f
    1a78:	8e 8f       	std	Y+30, r24	; 0x1e
    1a7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a7c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <LCD_void_Init+0x4fa>
    1a82:	9f 8f       	std	Y+31, r25	; 0x1f
    1a84:	8e 8f       	std	Y+30, r24	; 0x1e
    1a86:	0f c0       	rjmp	.+30     	; 0x1aa6 <LCD_void_Init+0x522>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a88:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a8a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	8c a7       	std	Y+44, r24	; 0x2c
    1a9a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a9c:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aa0:	8a 95       	dec	r24
    1aa2:	f1 f7       	brne	.-4      	; 0x1aa0 <LCD_void_Init+0x51c>
    1aa4:	8d 8f       	std	Y+29, r24	; 0x1d
	//C:1 COURSOR ON    // c:0 COURSOR OFF
	//B:1 COURSOR BLINK	//B:0 CURSOR OFF

	_delay_us(50);
	LCD_void_Write_Cmd(0b00000001); //display clear
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_void_Write_Cmd>
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	a0 e0       	ldi	r26, 0x00	; 0
    1ab2:	b0 e4       	ldi	r27, 0x40	; 64
    1ab4:	89 8f       	std	Y+25, r24	; 0x19
    1ab6:	9a 8f       	std	Y+26, r25	; 0x1a
    1ab8:	ab 8f       	std	Y+27, r26	; 0x1b
    1aba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abc:	69 8d       	ldd	r22, Y+25	; 0x19
    1abe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ac0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	4a ef       	ldi	r20, 0xFA	; 250
    1aca:	54 e4       	ldi	r21, 0x44	; 68
    1acc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	8d 8b       	std	Y+21, r24	; 0x15
    1ad6:	9e 8b       	std	Y+22, r25	; 0x16
    1ad8:	af 8b       	std	Y+23, r26	; 0x17
    1ada:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1adc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ade:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e8       	ldi	r20, 0x80	; 128
    1aea:	5f e3       	ldi	r21, 0x3F	; 63
    1aec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1af0:	88 23       	and	r24, r24
    1af2:	2c f4       	brge	.+10     	; 0x1afe <LCD_void_Init+0x57a>
		__ticks = 1;
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	9c 8b       	std	Y+20, r25	; 0x14
    1afa:	8b 8b       	std	Y+19, r24	; 0x13
    1afc:	3f c0       	rjmp	.+126    	; 0x1b7c <LCD_void_Init+0x5f8>
	else if (__tmp > 65535)
    1afe:	6d 89       	ldd	r22, Y+21	; 0x15
    1b00:	7e 89       	ldd	r23, Y+22	; 0x16
    1b02:	8f 89       	ldd	r24, Y+23	; 0x17
    1b04:	98 8d       	ldd	r25, Y+24	; 0x18
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	3f ef       	ldi	r19, 0xFF	; 255
    1b0a:	4f e7       	ldi	r20, 0x7F	; 127
    1b0c:	57 e4       	ldi	r21, 0x47	; 71
    1b0e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b12:	18 16       	cp	r1, r24
    1b14:	4c f5       	brge	.+82     	; 0x1b68 <LCD_void_Init+0x5e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b16:	69 8d       	ldd	r22, Y+25	; 0x19
    1b18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e2       	ldi	r20, 0x20	; 32
    1b24:	51 e4       	ldi	r21, 0x41	; 65
    1b26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	bc 01       	movw	r22, r24
    1b30:	cd 01       	movw	r24, r26
    1b32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	9c 8b       	std	Y+20, r25	; 0x14
    1b3c:	8b 8b       	std	Y+19, r24	; 0x13
    1b3e:	0f c0       	rjmp	.+30     	; 0x1b5e <LCD_void_Init+0x5da>
    1b40:	88 ec       	ldi	r24, 0xC8	; 200
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	9a 8b       	std	Y+18, r25	; 0x12
    1b46:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b48:	89 89       	ldd	r24, Y+17	; 0x11
    1b4a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	f1 f7       	brne	.-4      	; 0x1b4c <LCD_void_Init+0x5c8>
    1b50:	9a 8b       	std	Y+18, r25	; 0x12
    1b52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b54:	8b 89       	ldd	r24, Y+19	; 0x13
    1b56:	9c 89       	ldd	r25, Y+20	; 0x14
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	9c 8b       	std	Y+20, r25	; 0x14
    1b5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b60:	9c 89       	ldd	r25, Y+20	; 0x14
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	69 f7       	brne	.-38     	; 0x1b40 <LCD_void_Init+0x5bc>
    1b66:	14 c0       	rjmp	.+40     	; 0x1b90 <LCD_void_Init+0x60c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b68:	6d 89       	ldd	r22, Y+21	; 0x15
    1b6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	9c 8b       	std	Y+20, r25	; 0x14
    1b7a:	8b 8b       	std	Y+19, r24	; 0x13
    1b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b80:	98 8b       	std	Y+16, r25	; 0x10
    1b82:	8f 87       	std	Y+15, r24	; 0x0f
    1b84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b86:	98 89       	ldd	r25, Y+16	; 0x10
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <LCD_void_Init+0x604>
    1b8c:	98 8b       	std	Y+16, r25	; 0x10
    1b8e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_void_Write_Cmd(0x80);// Entry mode. (No display shift , AC increase)
    1b90:	80 e8       	ldi	r24, 0x80	; 128
    1b92:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_void_Write_Cmd>
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	a0 e8       	ldi	r26, 0x80	; 128
    1b9c:	bf e3       	ldi	r27, 0x3F	; 63
    1b9e:	8b 87       	std	Y+11, r24	; 0x0b
    1ba0:	9c 87       	std	Y+12, r25	; 0x0c
    1ba2:	ad 87       	std	Y+13, r26	; 0x0d
    1ba4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1baa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	4a ef       	ldi	r20, 0xFA	; 250
    1bb4:	54 e4       	ldi	r21, 0x44	; 68
    1bb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	8f 83       	std	Y+7, r24	; 0x07
    1bc0:	98 87       	std	Y+8, r25	; 0x08
    1bc2:	a9 87       	std	Y+9, r26	; 0x09
    1bc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc8:	78 85       	ldd	r23, Y+8	; 0x08
    1bca:	89 85       	ldd	r24, Y+9	; 0x09
    1bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e8       	ldi	r20, 0x80	; 128
    1bd4:	5f e3       	ldi	r21, 0x3F	; 63
    1bd6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bda:	88 23       	and	r24, r24
    1bdc:	2c f4       	brge	.+10     	; 0x1be8 <LCD_void_Init+0x664>
		__ticks = 1;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	9e 83       	std	Y+6, r25	; 0x06
    1be4:	8d 83       	std	Y+5, r24	; 0x05
    1be6:	3f c0       	rjmp	.+126    	; 0x1c66 <LCD_void_Init+0x6e2>
	else if (__tmp > 65535)
    1be8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bea:	78 85       	ldd	r23, Y+8	; 0x08
    1bec:	89 85       	ldd	r24, Y+9	; 0x09
    1bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	3f ef       	ldi	r19, 0xFF	; 255
    1bf4:	4f e7       	ldi	r20, 0x7F	; 127
    1bf6:	57 e4       	ldi	r21, 0x47	; 71
    1bf8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bfc:	18 16       	cp	r1, r24
    1bfe:	4c f5       	brge	.+82     	; 0x1c52 <LCD_void_Init+0x6ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e2       	ldi	r20, 0x20	; 32
    1c0e:	51 e4       	ldi	r21, 0x41	; 65
    1c10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	bc 01       	movw	r22, r24
    1c1a:	cd 01       	movw	r24, r26
    1c1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	9e 83       	std	Y+6, r25	; 0x06
    1c26:	8d 83       	std	Y+5, r24	; 0x05
    1c28:	0f c0       	rjmp	.+30     	; 0x1c48 <LCD_void_Init+0x6c4>
    1c2a:	88 ec       	ldi	r24, 0xC8	; 200
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	9c 83       	std	Y+4, r25	; 0x04
    1c30:	8b 83       	std	Y+3, r24	; 0x03
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <LCD_void_Init+0x6b2>
    1c3a:	9c 83       	std	Y+4, r25	; 0x04
    1c3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c40:	9e 81       	ldd	r25, Y+6	; 0x06
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	9e 83       	std	Y+6, r25	; 0x06
    1c46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c48:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	69 f7       	brne	.-38     	; 0x1c2a <LCD_void_Init+0x6a6>
    1c50:	14 c0       	rjmp	.+40     	; 0x1c7a <LCD_void_Init+0x6f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c52:	6f 81       	ldd	r22, Y+7	; 0x07
    1c54:	78 85       	ldd	r23, Y+8	; 0x08
    1c56:	89 85       	ldd	r24, Y+9	; 0x09
    1c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	9e 83       	std	Y+6, r25	; 0x06
    1c64:	8d 83       	std	Y+5, r24	; 0x05
    1c66:	8d 81       	ldd	r24, Y+5	; 0x05
    1c68:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6a:	9a 83       	std	Y+2, r25	; 0x02
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	9a 81       	ldd	r25, Y+2	; 0x02
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <LCD_void_Init+0x6ee>
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


#endif
}
    1c7a:	c6 5a       	subi	r28, 0xA6	; 166
    1c7c:	df 4f       	sbci	r29, 0xFF	; 255
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	1f 91       	pop	r17
    1c8e:	0f 91       	pop	r16
    1c90:	08 95       	ret

00001c92 <LCD_void_Write_Cmd>:

void LCD_void_Write_Cmd(u8 Copy_u8Cmd)
{
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <LCD_void_Write_Cmd+0x6>
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_Copy_u8Cmd;
#if LCD_Selected_Mode==LCD_8Bit_Mode
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,LCD_u8_RS_CMD);
	LCD_void_Write(Copy_u8Cmd);
#elif LCD_Selected_Mode==LCD_4Bit_Mode
	LOC_Copy_u8Cmd=(Copy_u8Cmd & 0b11110000);
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	80 7f       	andi	r24, 0xF0	; 240
    1ca2:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,LCD_u8_RS_CMD);
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	65 e0       	ldi	r22, 0x05	; 5
    1ca8:	40 e0       	ldi	r20, 0x00	; 0
    1caa:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
	LCD_void_Write(LOC_Copy_u8Cmd);
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <LCD_void_Write>
	LOC_Copy_u8Cmd=((Copy_u8Cmd<<4) & 0b11110000);
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	88 2f       	mov	r24, r24
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	82 95       	swap	r24
    1cbc:	92 95       	swap	r25
    1cbe:	90 7f       	andi	r25, 0xF0	; 240
    1cc0:	98 27       	eor	r25, r24
    1cc2:	80 7f       	andi	r24, 0xF0	; 240
    1cc4:	98 27       	eor	r25, r24
    1cc6:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,LCD_u8_RS_CMD);
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	65 e0       	ldi	r22, 0x05	; 5
    1ccc:	40 e0       	ldi	r20, 0x00	; 0
    1cce:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
	LCD_void_Write(LOC_Copy_u8Cmd);
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <LCD_void_Write>
#endif


}
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <LCD_void_Write_Data>:
void LCD_void_Write_Data(u8 Copy_u8Data)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <LCD_void_Write_Data+0x6>
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_Copy_u8Data;
#if LCD_Selected_Mode==LCD_8Bit_Mode
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,LCD_u8_RS_DATA);
	LCD_void_Write(Copy_u8Data);
#elif  LCD_Selected_Mode==LCD_4Bit_Mode
	LOC_Copy_u8Data=(Copy_u8Data & 0b11110000);
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	80 7f       	andi	r24, 0xF0	; 240
    1cf2:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,LCD_u8_RS_DATA);
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	65 e0       	ldi	r22, 0x05	; 5
    1cf8:	41 e0       	ldi	r20, 0x01	; 1
    1cfa:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
	LCD_void_Write(LOC_Copy_u8Data);
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <LCD_void_Write>
	LOC_Copy_u8Data=((Copy_u8Data<<4) & 0b11110000);
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	88 2f       	mov	r24, r24
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	82 95       	swap	r24
    1d0c:	92 95       	swap	r25
    1d0e:	90 7f       	andi	r25, 0xF0	; 240
    1d10:	98 27       	eor	r25, r24
    1d12:	80 7f       	andi	r24, 0xF0	; 240
    1d14:	98 27       	eor	r25, r24
    1d16:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,LCD_u8_RS_DATA);
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	65 e0       	ldi	r22, 0x05	; 5
    1d1c:	41 e0       	ldi	r20, 0x01	; 1
    1d1e:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
	LCD_void_Write(LOC_Copy_u8Data);
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <LCD_void_Write>
#endif

}
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <LCD_void_Write>:

void LCD_void_Write(u8 Copy_u8val)
{
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    1d3a:	6d 97       	sbiw	r28, 0x1d	; 29
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	f8 94       	cli
    1d40:	de bf       	out	0x3e, r29	; 62
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	cd bf       	out	0x3d, r28	; 61
    1d46:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,LCD_u8_RW_WRITE);
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	66 e0       	ldi	r22, 0x06	; 6
    1d4c:	40 e0       	ldi	r20, 0x00	; 0
    1d4e:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
	_delay_ms(2);
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_ENABLE_PIN,DIO_u8_LOW);
	_delay_ms(2);
#elif LCD_Selected_Mode==LCD_4Bit_Mode
#if   LCD_4PIN_IN_DATA_PORT_IN_4PIN_MODE==LCD_FIRST_4PIN_IN_DATA_PORT_IN_4PIN_MODE
	DIO_u8set_pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_0,get_bit(Copy_u8val,4));
    1d52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d54:	82 95       	swap	r24
    1d56:	8f 70       	andi	r24, 0x0F	; 15
    1d58:	98 2f       	mov	r25, r24
    1d5a:	91 70       	andi	r25, 0x01	; 1
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	60 e0       	ldi	r22, 0x00	; 0
    1d60:	49 2f       	mov	r20, r25
    1d62:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
	DIO_u8set_pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_1,get_bit(Copy_u8val,5));
    1d66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d68:	82 95       	swap	r24
    1d6a:	86 95       	lsr	r24
    1d6c:	87 70       	andi	r24, 0x07	; 7
    1d6e:	98 2f       	mov	r25, r24
    1d70:	91 70       	andi	r25, 0x01	; 1
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	61 e0       	ldi	r22, 0x01	; 1
    1d76:	49 2f       	mov	r20, r25
    1d78:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
	DIO_u8set_pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_2,get_bit(Copy_u8val,6));
    1d7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d7e:	82 95       	swap	r24
    1d80:	86 95       	lsr	r24
    1d82:	86 95       	lsr	r24
    1d84:	83 70       	andi	r24, 0x03	; 3
    1d86:	98 2f       	mov	r25, r24
    1d88:	91 70       	andi	r25, 0x01	; 1
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	62 e0       	ldi	r22, 0x02	; 2
    1d8e:	49 2f       	mov	r20, r25
    1d90:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
	DIO_u8set_pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_3,get_bit(Copy_u8val,7));
    1d94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d96:	98 2f       	mov	r25, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	99 27       	eor	r25, r25
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	63 e0       	ldi	r22, 0x03	; 3
    1da2:	49 2f       	mov	r20, r25
    1da4:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_ENABLE_PIN,DIO_u8_HIGH);
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	67 e0       	ldi	r22, 0x07	; 7
    1dac:	41 e0       	ldi	r20, 0x01	; 1
    1dae:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	a0 e0       	ldi	r26, 0x00	; 0
    1db8:	b0 e4       	ldi	r27, 0x40	; 64
    1dba:	89 8f       	std	Y+25, r24	; 0x19
    1dbc:	9a 8f       	std	Y+26, r25	; 0x1a
    1dbe:	ab 8f       	std	Y+27, r26	; 0x1b
    1dc0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc2:	69 8d       	ldd	r22, Y+25	; 0x19
    1dc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	4a ef       	ldi	r20, 0xFA	; 250
    1dd0:	54 e4       	ldi	r21, 0x44	; 68
    1dd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	8d 8b       	std	Y+21, r24	; 0x15
    1ddc:	9e 8b       	std	Y+22, r25	; 0x16
    1dde:	af 8b       	std	Y+23, r26	; 0x17
    1de0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1de2:	6d 89       	ldd	r22, Y+21	; 0x15
    1de4:	7e 89       	ldd	r23, Y+22	; 0x16
    1de6:	8f 89       	ldd	r24, Y+23	; 0x17
    1de8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e8       	ldi	r20, 0x80	; 128
    1df0:	5f e3       	ldi	r21, 0x3F	; 63
    1df2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1df6:	88 23       	and	r24, r24
    1df8:	2c f4       	brge	.+10     	; 0x1e04 <LCD_void_Write+0xd2>
		__ticks = 1;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	9c 8b       	std	Y+20, r25	; 0x14
    1e00:	8b 8b       	std	Y+19, r24	; 0x13
    1e02:	3f c0       	rjmp	.+126    	; 0x1e82 <LCD_void_Write+0x150>
	else if (__tmp > 65535)
    1e04:	6d 89       	ldd	r22, Y+21	; 0x15
    1e06:	7e 89       	ldd	r23, Y+22	; 0x16
    1e08:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	3f ef       	ldi	r19, 0xFF	; 255
    1e10:	4f e7       	ldi	r20, 0x7F	; 127
    1e12:	57 e4       	ldi	r21, 0x47	; 71
    1e14:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e18:	18 16       	cp	r1, r24
    1e1a:	4c f5       	brge	.+82     	; 0x1e6e <LCD_void_Write+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e2       	ldi	r20, 0x20	; 32
    1e2a:	51 e4       	ldi	r21, 0x41	; 65
    1e2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	9c 8b       	std	Y+20, r25	; 0x14
    1e42:	8b 8b       	std	Y+19, r24	; 0x13
    1e44:	0f c0       	rjmp	.+30     	; 0x1e64 <LCD_void_Write+0x132>
    1e46:	88 ec       	ldi	r24, 0xC8	; 200
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	9a 8b       	std	Y+18, r25	; 0x12
    1e4c:	89 8b       	std	Y+17, r24	; 0x11
    1e4e:	89 89       	ldd	r24, Y+17	; 0x11
    1e50:	9a 89       	ldd	r25, Y+18	; 0x12
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <LCD_void_Write+0x120>
    1e56:	9a 8b       	std	Y+18, r25	; 0x12
    1e58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	9c 8b       	std	Y+20, r25	; 0x14
    1e62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e64:	8b 89       	ldd	r24, Y+19	; 0x13
    1e66:	9c 89       	ldd	r25, Y+20	; 0x14
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	69 f7       	brne	.-38     	; 0x1e46 <LCD_void_Write+0x114>
    1e6c:	14 c0       	rjmp	.+40     	; 0x1e96 <LCD_void_Write+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e70:	7e 89       	ldd	r23, Y+22	; 0x16
    1e72:	8f 89       	ldd	r24, Y+23	; 0x17
    1e74:	98 8d       	ldd	r25, Y+24	; 0x18
    1e76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	9c 8b       	std	Y+20, r25	; 0x14
    1e80:	8b 8b       	std	Y+19, r24	; 0x13
    1e82:	8b 89       	ldd	r24, Y+19	; 0x13
    1e84:	9c 89       	ldd	r25, Y+20	; 0x14
    1e86:	98 8b       	std	Y+16, r25	; 0x10
    1e88:	8f 87       	std	Y+15, r24	; 0x0f
    1e8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e8c:	98 89       	ldd	r25, Y+16	; 0x10
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <LCD_void_Write+0x15c>
    1e92:	98 8b       	std	Y+16, r25	; 0x10
    1e94:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_ENABLE_PIN,DIO_u8_LOW);
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	67 e0       	ldi	r22, 0x07	; 7
    1e9a:	40 e0       	ldi	r20, 0x00	; 0
    1e9c:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	a0 e0       	ldi	r26, 0x00	; 0
    1ea6:	b0 e4       	ldi	r27, 0x40	; 64
    1ea8:	8b 87       	std	Y+11, r24	; 0x0b
    1eaa:	9c 87       	std	Y+12, r25	; 0x0c
    1eac:	ad 87       	std	Y+13, r26	; 0x0d
    1eae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	4a ef       	ldi	r20, 0xFA	; 250
    1ebe:	54 e4       	ldi	r21, 0x44	; 68
    1ec0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	8f 83       	std	Y+7, r24	; 0x07
    1eca:	98 87       	std	Y+8, r25	; 0x08
    1ecc:	a9 87       	std	Y+9, r26	; 0x09
    1ece:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed2:	78 85       	ldd	r23, Y+8	; 0x08
    1ed4:	89 85       	ldd	r24, Y+9	; 0x09
    1ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e8       	ldi	r20, 0x80	; 128
    1ede:	5f e3       	ldi	r21, 0x3F	; 63
    1ee0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ee4:	88 23       	and	r24, r24
    1ee6:	2c f4       	brge	.+10     	; 0x1ef2 <LCD_void_Write+0x1c0>
		__ticks = 1;
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	9e 83       	std	Y+6, r25	; 0x06
    1eee:	8d 83       	std	Y+5, r24	; 0x05
    1ef0:	3f c0       	rjmp	.+126    	; 0x1f70 <LCD_void_Write+0x23e>
	else if (__tmp > 65535)
    1ef2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef4:	78 85       	ldd	r23, Y+8	; 0x08
    1ef6:	89 85       	ldd	r24, Y+9	; 0x09
    1ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	3f ef       	ldi	r19, 0xFF	; 255
    1efe:	4f e7       	ldi	r20, 0x7F	; 127
    1f00:	57 e4       	ldi	r21, 0x47	; 71
    1f02:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f06:	18 16       	cp	r1, r24
    1f08:	4c f5       	brge	.+82     	; 0x1f5c <LCD_void_Write+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e2       	ldi	r20, 0x20	; 32
    1f18:	51 e4       	ldi	r21, 0x41	; 65
    1f1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9e 83       	std	Y+6, r25	; 0x06
    1f30:	8d 83       	std	Y+5, r24	; 0x05
    1f32:	0f c0       	rjmp	.+30     	; 0x1f52 <LCD_void_Write+0x220>
    1f34:	88 ec       	ldi	r24, 0xC8	; 200
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9c 83       	std	Y+4, r25	; 0x04
    1f3a:	8b 83       	std	Y+3, r24	; 0x03
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <LCD_void_Write+0x20e>
    1f44:	9c 83       	std	Y+4, r25	; 0x04
    1f46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f48:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	9e 83       	std	Y+6, r25	; 0x06
    1f50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f52:	8d 81       	ldd	r24, Y+5	; 0x05
    1f54:	9e 81       	ldd	r25, Y+6	; 0x06
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	69 f7       	brne	.-38     	; 0x1f34 <LCD_void_Write+0x202>
    1f5a:	14 c0       	rjmp	.+40     	; 0x1f84 <LCD_void_Write+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5e:	78 85       	ldd	r23, Y+8	; 0x08
    1f60:	89 85       	ldd	r24, Y+9	; 0x09
    1f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	9e 83       	std	Y+6, r25	; 0x06
    1f6e:	8d 83       	std	Y+5, r24	; 0x05
    1f70:	8d 81       	ldd	r24, Y+5	; 0x05
    1f72:	9e 81       	ldd	r25, Y+6	; 0x06
    1f74:	9a 83       	std	Y+2, r25	; 0x02
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <LCD_void_Write+0x24a>
    1f80:	9a 83       	std	Y+2, r25	; 0x02
    1f82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

#endif
#endif

}
    1f84:	6d 96       	adiw	r28, 0x1d	; 29
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <LCD_void_set_DDRAM_ADD>:


void LCD_void_set_DDRAM_ADD(u8 Copy_u8DDRAM_ADD)
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	0f 92       	push	r0
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	89 83       	std	Y+1, r24	; 0x01
	LCD_void_Write_Cmd( LCD_u8_DDRAM_ADD_MASK|Copy_u8DDRAM_ADD);// set the position to display
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	80 68       	ori	r24, 0x80	; 128
    1fa6:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_void_Write_Cmd>
}
    1faa:	0f 90       	pop	r0
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <LCD_void_Write_String>:

void LCD_void_Write_String(u8 *Ptr_u8string,u8 Copy_u8x_Pos,u8 Copy_u8y_Pos)
{
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <LCD_void_Write_String+0x6>
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <LCD_void_Write_String+0x8>
    1fba:	0f 92       	push	r0
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	9b 83       	std	Y+3, r25	; 0x03
    1fc2:	8a 83       	std	Y+2, r24	; 0x02
    1fc4:	6c 83       	std	Y+4, r22	; 0x04
    1fc6:	4d 83       	std	Y+5, r20	; 0x05
	u8 LOC_DDRAM_ADD= Copy_u8x_Pos+(Copy_u8y_Pos*LCD_u8_DDRAM_ADD_LINE_MASK);
    1fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fca:	88 2f       	mov	r24, r24
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	00 24       	eor	r0, r0
    1fd0:	96 95       	lsr	r25
    1fd2:	87 95       	ror	r24
    1fd4:	07 94       	ror	r0
    1fd6:	96 95       	lsr	r25
    1fd8:	87 95       	ror	r24
    1fda:	07 94       	ror	r0
    1fdc:	98 2f       	mov	r25, r24
    1fde:	80 2d       	mov	r24, r0
    1fe0:	98 2f       	mov	r25, r24
    1fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe4:	89 0f       	add	r24, r25
    1fe6:	89 83       	std	Y+1, r24	; 0x01
	LCD_void_set_DDRAM_ADD(LOC_DDRAM_ADD);
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <LCD_void_set_DDRAM_ADD>
    1fee:	1d c0       	rjmp	.+58     	; 0x202a <LCD_void_Write_String+0x78>
	while(*Ptr_u8string !='\0')
	{
		if(LOC_DDRAM_ADD==16)
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	80 31       	cpi	r24, 0x10	; 16
    1ff4:	31 f4       	brne	.+12     	; 0x2002 <LCD_void_Write_String+0x50>
		{
			LOC_DDRAM_ADD=64;
    1ff6:	80 e4       	ldi	r24, 0x40	; 64
    1ff8:	89 83       	std	Y+1, r24	; 0x01
			LCD_void_set_DDRAM_ADD(LOC_DDRAM_ADD);
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <LCD_void_set_DDRAM_ADD>
    2000:	07 c0       	rjmp	.+14     	; 0x2010 <LCD_void_Write_String+0x5e>
		}
		else if(LOC_DDRAM_ADD==80)
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	80 35       	cpi	r24, 0x50	; 80
    2006:	21 f4       	brne	.+8      	; 0x2010 <LCD_void_Write_String+0x5e>
		{
			LOC_DDRAM_ADD=0;
    2008:	19 82       	std	Y+1, r1	; 0x01
			LCD_void_set_DDRAM_ADD(LOC_DDRAM_ADD);
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <LCD_void_set_DDRAM_ADD>
		}
		LCD_void_Write_Data(*Ptr_u8string);
    2010:	ea 81       	ldd	r30, Y+2	; 0x02
    2012:	fb 81       	ldd	r31, Y+3	; 0x03
    2014:	80 81       	ld	r24, Z
    2016:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <LCD_void_Write_Data>
		Ptr_u8string++;
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	9b 81       	ldd	r25, Y+3	; 0x03
    201e:	01 96       	adiw	r24, 0x01	; 1
    2020:	9b 83       	std	Y+3, r25	; 0x03
    2022:	8a 83       	std	Y+2, r24	; 0x02
		LOC_DDRAM_ADD++;
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	8f 5f       	subi	r24, 0xFF	; 255
    2028:	89 83       	std	Y+1, r24	; 0x01

void LCD_void_Write_String(u8 *Ptr_u8string,u8 Copy_u8x_Pos,u8 Copy_u8y_Pos)
{
	u8 LOC_DDRAM_ADD= Copy_u8x_Pos+(Copy_u8y_Pos*LCD_u8_DDRAM_ADD_LINE_MASK);
	LCD_void_set_DDRAM_ADD(LOC_DDRAM_ADD);
	while(*Ptr_u8string !='\0')
    202a:	ea 81       	ldd	r30, Y+2	; 0x02
    202c:	fb 81       	ldd	r31, Y+3	; 0x03
    202e:	80 81       	ld	r24, Z
    2030:	88 23       	and	r24, r24
    2032:	f1 f6       	brne	.-68     	; 0x1ff0 <LCD_void_Write_String+0x3e>
		}
		LCD_void_Write_Data(*Ptr_u8string);
		Ptr_u8string++;
		LOC_DDRAM_ADD++;
	}
}
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <LCD_void_set_CGRAM_ADD>:

void LCD_void_set_CGRAM_ADD(u8 Copy_u8CGRAM_ADD)
{
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	0f 92       	push	r0
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	89 83       	std	Y+1, r24	; 0x01
	LCD_void_Write_Cmd( LCD_u8_CGRAM_ADD_MASK|Copy_u8CGRAM_ADD);
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	80 64       	ori	r24, 0x40	; 64
    2054:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_void_Write_Cmd>
}
    2058:	0f 90       	pop	r0
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <LCD_u8_Count_Num_Digits>:

u32  LCD_u8_Count_Num_Digits(u32 Copy_u32_Num_VAL)
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	00 d0       	rcall	.+0      	; 0x2066 <LCD_u8_Count_Num_Digits+0x6>
    2066:	00 d0       	rcall	.+0      	; 0x2068 <LCD_u8_Count_Num_Digits+0x8>
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	9c 83       	std	Y+4, r25	; 0x04
    206e:	8b 83       	std	Y+3, r24	; 0x03
	u8 LOC_u8_Last_Digit;
	u8 LOC_u16_Counter=0;
    2070:	19 82       	std	Y+1, r1	; 0x01
    2072:	15 c0       	rjmp	.+42     	; 0x209e <LCD_u8_Count_Num_Digits+0x3e>
	while(Copy_u32_Num_VAL != 0)  //how to get all digits of a number
	{
		LOC_u8_Last_Digit = Copy_u32_Num_VAL % 10;   //Last digit
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	9c 81       	ldd	r25, Y+4	; 0x04
    2078:	2a e0       	ldi	r18, 0x0A	; 10
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	b9 01       	movw	r22, r18
    207e:	0e 94 ab 12 	call	0x2556	; 0x2556 <__udivmodhi4>
    2082:	8a 83       	std	Y+2, r24	; 0x02
		LOC_u16_Counter++;
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	8f 5f       	subi	r24, 0xFF	; 255
    2088:	89 83       	std	Y+1, r24	; 0x01
		Copy_u32_Num_VAL = Copy_u32_Num_VAL /10;
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	2a e0       	ldi	r18, 0x0A	; 10
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	b9 01       	movw	r22, r18
    2094:	0e 94 ab 12 	call	0x2556	; 0x2556 <__udivmodhi4>
    2098:	cb 01       	movw	r24, r22
    209a:	9c 83       	std	Y+4, r25	; 0x04
    209c:	8b 83       	std	Y+3, r24	; 0x03

u32  LCD_u8_Count_Num_Digits(u32 Copy_u32_Num_VAL)
{
	u8 LOC_u8_Last_Digit;
	u8 LOC_u16_Counter=0;
	while(Copy_u32_Num_VAL != 0)  //how to get all digits of a number
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	9c 81       	ldd	r25, Y+4	; 0x04
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	39 f7       	brne	.-50     	; 0x2074 <LCD_u8_Count_Num_Digits+0x14>
	{
		LOC_u8_Last_Digit = Copy_u32_Num_VAL % 10;   //Last digit
		LOC_u16_Counter++;
		Copy_u32_Num_VAL = Copy_u32_Num_VAL /10;
	}
	return LOC_u16_Counter;
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	88 2f       	mov	r24, r24
    20aa:	90 e0       	ldi	r25, 0x00	; 0
}
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	cf 91       	pop	r28
    20b6:	df 91       	pop	r29
    20b8:	08 95       	ret

000020ba <LCD_void_Write_Spaces>:

void LCD_void_Write_Spaces(u32 Copy_u32_Num_Spaces)
{
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <LCD_void_Write_Spaces+0x6>
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <LCD_void_Write_Spaces+0x8>
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	9c 83       	std	Y+4, r25	; 0x04
    20c8:	8b 83       	std	Y+3, r24	; 0x03
	u32 LOC_u32_Num_Spaces;
	for(LOC_u32_Num_Spaces=0; LOC_u32_Num_Spaces<=Copy_u32_Num_Spaces ;LOC_u32_Num_Spaces++)
    20ca:	1a 82       	std	Y+2, r1	; 0x02
    20cc:	19 82       	std	Y+1, r1	; 0x01
    20ce:	08 c0       	rjmp	.+16     	; 0x20e0 <LCD_void_Write_Spaces+0x26>
	{
		LCD_void_Write_Data(' ');
    20d0:	80 e2       	ldi	r24, 0x20	; 32
    20d2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <LCD_void_Write_Data>
}

void LCD_void_Write_Spaces(u32 Copy_u32_Num_Spaces)
{
	u32 LOC_u32_Num_Spaces;
	for(LOC_u32_Num_Spaces=0; LOC_u32_Num_Spaces<=Copy_u32_Num_Spaces ;LOC_u32_Num_Spaces++)
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	9a 81       	ldd	r25, Y+2	; 0x02
    20da:	01 96       	adiw	r24, 0x01	; 1
    20dc:	9a 83       	std	Y+2, r25	; 0x02
    20de:	89 83       	std	Y+1, r24	; 0x01
    20e0:	29 81       	ldd	r18, Y+1	; 0x01
    20e2:	3a 81       	ldd	r19, Y+2	; 0x02
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	82 17       	cp	r24, r18
    20ea:	93 07       	cpc	r25, r19
    20ec:	88 f7       	brcc	.-30     	; 0x20d0 <LCD_void_Write_Spaces+0x16>
	{
		LCD_void_Write_Data(' ');
	}
}
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <swap>:

static void swap(u8 *PTR_u8Num1,u8 *PTR_u8Num2){
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	00 d0       	rcall	.+0      	; 0x2102 <swap+0x6>
    2102:	00 d0       	rcall	.+0      	; 0x2104 <swap+0x8>
    2104:	0f 92       	push	r0
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
    210a:	9b 83       	std	Y+3, r25	; 0x03
    210c:	8a 83       	std	Y+2, r24	; 0x02
    210e:	7d 83       	std	Y+5, r23	; 0x05
    2110:	6c 83       	std	Y+4, r22	; 0x04
	u8 LOC_u8_Temp = *PTR_u8Num1 ;
    2112:	ea 81       	ldd	r30, Y+2	; 0x02
    2114:	fb 81       	ldd	r31, Y+3	; 0x03
    2116:	80 81       	ld	r24, Z
    2118:	89 83       	std	Y+1, r24	; 0x01
	*PTR_u8Num1 = *PTR_u8Num2 ;
    211a:	ec 81       	ldd	r30, Y+4	; 0x04
    211c:	fd 81       	ldd	r31, Y+5	; 0x05
    211e:	80 81       	ld	r24, Z
    2120:	ea 81       	ldd	r30, Y+2	; 0x02
    2122:	fb 81       	ldd	r31, Y+3	; 0x03
    2124:	80 83       	st	Z, r24
	*PTR_u8Num2 = LOC_u8_Temp ;
    2126:	ec 81       	ldd	r30, Y+4	; 0x04
    2128:	fd 81       	ldd	r31, Y+5	; 0x05
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	80 83       	st	Z, r24
}
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	08 95       	ret

0000213e <reverse>:

static void reverse(u8 *PTR_u8Arr,u8 Copy_u8Length){
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	00 d0       	rcall	.+0      	; 0x2144 <reverse+0x6>
    2144:	00 d0       	rcall	.+0      	; 0x2146 <reverse+0x8>
    2146:	0f 92       	push	r0
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	9c 83       	std	Y+4, r25	; 0x04
    214e:	8b 83       	std	Y+3, r24	; 0x03
    2150:	6d 83       	std	Y+5, r22	; 0x05
	u8 LOC_u8Start = 0 ;
    2152:	1a 82       	std	Y+2, r1	; 0x02
	u8 LOC_u8End   = Copy_u8Length-1;
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	81 50       	subi	r24, 0x01	; 1
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	19 c0       	rjmp	.+50     	; 0x218e <reverse+0x50>
	while(LOC_u8Start<LOC_u8End){
		swap(&PTR_u8Arr[LOC_u8Start],&PTR_u8Arr[LOC_u8End]);
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	9c 81       	ldd	r25, Y+4	; 0x04
    2166:	ac 01       	movw	r20, r24
    2168:	42 0f       	add	r20, r18
    216a:	53 1f       	adc	r21, r19
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	28 2f       	mov	r18, r24
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	9c 81       	ldd	r25, Y+4	; 0x04
    2176:	28 0f       	add	r18, r24
    2178:	39 1f       	adc	r19, r25
    217a:	ca 01       	movw	r24, r20
    217c:	b9 01       	movw	r22, r18
    217e:	0e 94 7e 10 	call	0x20fc	; 0x20fc <swap>
		LOC_u8Start++;
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	8f 5f       	subi	r24, 0xFF	; 255
    2186:	8a 83       	std	Y+2, r24	; 0x02
		LOC_u8End--;
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	81 50       	subi	r24, 0x01	; 1
    218c:	89 83       	std	Y+1, r24	; 0x01
}

static void reverse(u8 *PTR_u8Arr,u8 Copy_u8Length){
	u8 LOC_u8Start = 0 ;
	u8 LOC_u8End   = Copy_u8Length-1;
	while(LOC_u8Start<LOC_u8End){
    218e:	9a 81       	ldd	r25, Y+2	; 0x02
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	98 17       	cp	r25, r24
    2194:	18 f3       	brcs	.-58     	; 0x215c <reverse+0x1e>
		swap(&PTR_u8Arr[LOC_u8Start],&PTR_u8Arr[LOC_u8End]);
		LOC_u8Start++;
		LOC_u8End--;
	}

}
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <LCD_void_Write_Num>:

void LCD_void_Write_Num(u32 Copy_u32Num,u8 Copy_u8x_Pos,u8 Copy_u8y_Pos)
{
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	61 97       	sbiw	r28, 0x11	; 17
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	9f 87       	std	Y+15, r25	; 0x0f
    21bc:	8e 87       	std	Y+14, r24	; 0x0e
    21be:	68 8b       	std	Y+16, r22	; 0x10
    21c0:	49 8b       	std	Y+17, r20	; 0x11
	u8 LOC_u8Rem ;
	u8 LOC_u8ArrIndex = 0;
    21c2:	19 82       	std	Y+1, r1	; 0x01
	u8 ARR_u8Str[11];
	if(Copy_u32Num ==0)
    21c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    21c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	79 f5       	brne	.+94     	; 0x222a <LCD_void_Write_Num+0x84>
	{
		ARR_u8Str[LOC_u8ArrIndex] = '0';
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	ce 01       	movw	r24, r28
    21d4:	03 96       	adiw	r24, 0x03	; 3
    21d6:	fc 01       	movw	r30, r24
    21d8:	e2 0f       	add	r30, r18
    21da:	f3 1f       	adc	r31, r19
    21dc:	80 e3       	ldi	r24, 0x30	; 48
    21de:	80 83       	st	Z, r24
		LOC_u8ArrIndex++;
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	8f 5f       	subi	r24, 0xFF	; 255
    21e4:	89 83       	std	Y+1, r24	; 0x01
    21e6:	21 c0       	rjmp	.+66     	; 0x222a <LCD_void_Write_Num+0x84>
	}
	while(Copy_u32Num !=0){
		LOC_u8Rem = Copy_u32Num%10 ;
    21e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    21ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    21ec:	2a e0       	ldi	r18, 0x0A	; 10
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	b9 01       	movw	r22, r18
    21f2:	0e 94 ab 12 	call	0x2556	; 0x2556 <__udivmodhi4>
    21f6:	8a 83       	std	Y+2, r24	; 0x02
		ARR_u8Str[LOC_u8ArrIndex] = LOC_u8Rem + '0' ;
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	48 2f       	mov	r20, r24
    2202:	40 5d       	subi	r20, 0xD0	; 208
    2204:	ce 01       	movw	r24, r28
    2206:	03 96       	adiw	r24, 0x03	; 3
    2208:	fc 01       	movw	r30, r24
    220a:	e2 0f       	add	r30, r18
    220c:	f3 1f       	adc	r31, r19
    220e:	40 83       	st	Z, r20
		LOC_u8ArrIndex++;
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	8f 5f       	subi	r24, 0xFF	; 255
    2214:	89 83       	std	Y+1, r24	; 0x01
		Copy_u32Num = Copy_u32Num/10;
    2216:	8e 85       	ldd	r24, Y+14	; 0x0e
    2218:	9f 85       	ldd	r25, Y+15	; 0x0f
    221a:	2a e0       	ldi	r18, 0x0A	; 10
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	b9 01       	movw	r22, r18
    2220:	0e 94 ab 12 	call	0x2556	; 0x2556 <__udivmodhi4>
    2224:	cb 01       	movw	r24, r22
    2226:	9f 87       	std	Y+15, r25	; 0x0f
    2228:	8e 87       	std	Y+14, r24	; 0x0e
	if(Copy_u32Num ==0)
	{
		ARR_u8Str[LOC_u8ArrIndex] = '0';
		LOC_u8ArrIndex++;
	}
	while(Copy_u32Num !=0){
    222a:	8e 85       	ldd	r24, Y+14	; 0x0e
    222c:	9f 85       	ldd	r25, Y+15	; 0x0f
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	d9 f6       	brne	.-74     	; 0x21e8 <LCD_void_Write_Num+0x42>
		LOC_u8ArrIndex++;
		Copy_u32Num = Copy_u32Num/10;

	}

	ARR_u8Str[LOC_u8ArrIndex] = '\0';
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	28 2f       	mov	r18, r24
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	ce 01       	movw	r24, r28
    223a:	03 96       	adiw	r24, 0x03	; 3
    223c:	fc 01       	movw	r30, r24
    223e:	e2 0f       	add	r30, r18
    2240:	f3 1f       	adc	r31, r19
    2242:	10 82       	st	Z, r1
	reverse(ARR_u8Str,LOC_u8ArrIndex);
    2244:	ce 01       	movw	r24, r28
    2246:	03 96       	adiw	r24, 0x03	; 3
    2248:	69 81       	ldd	r22, Y+1	; 0x01
    224a:	0e 94 9f 10 	call	0x213e	; 0x213e <reverse>
	LCD_void_Write_String(ARR_u8Str,Copy_u8x_Pos,Copy_u8y_Pos);
    224e:	ce 01       	movw	r24, r28
    2250:	03 96       	adiw	r24, 0x03	; 3
    2252:	68 89       	ldd	r22, Y+16	; 0x10
    2254:	49 89       	ldd	r20, Y+17	; 0x11
    2256:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_void_Write_String>
}
    225a:	61 96       	adiw	r28, 0x11	; 17
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <LCD_void_Wirte_Float_Num>:
	//LCD_void_Write_String(arr_final,Copy_u8x_Pos,Copy_u8y_Pos);
}*/


void LCD_void_Wirte_Float_Num(f32 Num)
{
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	aa 97       	sbiw	r28, 0x2a	; 42
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	6f a3       	std	Y+39, r22	; 0x27
    2282:	78 a7       	std	Y+40, r23	; 0x28
    2284:	89 a7       	std	Y+41, r24	; 0x29
    2286:	9a a7       	std	Y+42, r25	; 0x2a
	u8 arr_Dec[3];
	u8 arr_int[25];
	u32 temp,temp2,i=0,j=0,w=0;
    2288:	1e 82       	std	Y+6, r1	; 0x06
    228a:	1d 82       	std	Y+5, r1	; 0x05
    228c:	1c 82       	std	Y+4, r1	; 0x04
    228e:	1b 82       	std	Y+3, r1	; 0x03
    2290:	1a 82       	std	Y+2, r1	; 0x02
    2292:	19 82       	std	Y+1, r1	; 0x01
	// storing floating numbs in arr_Dec
	temp=Num*100;
    2294:	6f a1       	ldd	r22, Y+39	; 0x27
    2296:	78 a5       	ldd	r23, Y+40	; 0x28
    2298:	89 a5       	ldd	r24, Y+41	; 0x29
    229a:	9a a5       	ldd	r25, Y+42	; 0x2a
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	48 ec       	ldi	r20, 0xC8	; 200
    22a2:	52 e4       	ldi	r21, 0x42	; 66
    22a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	bc 01       	movw	r22, r24
    22ae:	cd 01       	movw	r24, r26
    22b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	9a 87       	std	Y+10, r25	; 0x0a
    22ba:	89 87       	std	Y+9, r24	; 0x09
	arr_Dec[1]=temp%10;
    22bc:	89 85       	ldd	r24, Y+9	; 0x09
    22be:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c0:	2a e0       	ldi	r18, 0x0A	; 10
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	b9 01       	movw	r22, r18
    22c6:	0e 94 ab 12 	call	0x2556	; 0x2556 <__udivmodhi4>
    22ca:	8c 87       	std	Y+12, r24	; 0x0c
	temp/=10;
    22cc:	89 85       	ldd	r24, Y+9	; 0x09
    22ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d0:	2a e0       	ldi	r18, 0x0A	; 10
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	b9 01       	movw	r22, r18
    22d6:	0e 94 ab 12 	call	0x2556	; 0x2556 <__udivmodhi4>
    22da:	cb 01       	movw	r24, r22
    22dc:	9a 87       	std	Y+10, r25	; 0x0a
    22de:	89 87       	std	Y+9, r24	; 0x09
	arr_Dec[0]=temp%10;
    22e0:	89 85       	ldd	r24, Y+9	; 0x09
    22e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e4:	2a e0       	ldi	r18, 0x0A	; 10
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	b9 01       	movw	r22, r18
    22ea:	0e 94 ab 12 	call	0x2556	; 0x2556 <__udivmodhi4>
    22ee:	8b 87       	std	Y+11, r24	; 0x0b
	temp/=10;
    22f0:	89 85       	ldd	r24, Y+9	; 0x09
    22f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f4:	2a e0       	ldi	r18, 0x0A	; 10
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	b9 01       	movw	r22, r18
    22fa:	0e 94 ab 12 	call	0x2556	; 0x2556 <__udivmodhi4>
    22fe:	cb 01       	movw	r24, r22
    2300:	9a 87       	std	Y+10, r25	; 0x0a
    2302:	89 87       	std	Y+9, r24	; 0x09
	arr_Dec[2]='x';
    2304:	88 e7       	ldi	r24, 0x78	; 120
    2306:	8d 87       	std	Y+13, r24	; 0x0d
    2308:	21 c0       	rjmp	.+66     	; 0x234c <LCD_void_Wirte_Float_Num+0xe0>
	while(temp!=0)
	{
		temp2=temp%10;
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	2a e0       	ldi	r18, 0x0A	; 10
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	b9 01       	movw	r22, r18
    2314:	0e 94 ab 12 	call	0x2556	; 0x2556 <__udivmodhi4>
    2318:	98 87       	std	Y+8, r25	; 0x08
    231a:	8f 83       	std	Y+7, r24	; 0x07
		arr_int[i]=temp2;
    231c:	2d 81       	ldd	r18, Y+5	; 0x05
    231e:	3e 81       	ldd	r19, Y+6	; 0x06
    2320:	4f 81       	ldd	r20, Y+7	; 0x07
    2322:	ce 01       	movw	r24, r28
    2324:	0e 96       	adiw	r24, 0x0e	; 14
    2326:	fc 01       	movw	r30, r24
    2328:	e2 0f       	add	r30, r18
    232a:	f3 1f       	adc	r31, r19
    232c:	40 83       	st	Z, r20
		i++;
    232e:	8d 81       	ldd	r24, Y+5	; 0x05
    2330:	9e 81       	ldd	r25, Y+6	; 0x06
    2332:	01 96       	adiw	r24, 0x01	; 1
    2334:	9e 83       	std	Y+6, r25	; 0x06
    2336:	8d 83       	std	Y+5, r24	; 0x05
		temp/=10;
    2338:	89 85       	ldd	r24, Y+9	; 0x09
    233a:	9a 85       	ldd	r25, Y+10	; 0x0a
    233c:	2a e0       	ldi	r18, 0x0A	; 10
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	b9 01       	movw	r22, r18
    2342:	0e 94 ab 12 	call	0x2556	; 0x2556 <__udivmodhi4>
    2346:	cb 01       	movw	r24, r22
    2348:	9a 87       	std	Y+10, r25	; 0x0a
    234a:	89 87       	std	Y+9, r24	; 0x09
	arr_Dec[1]=temp%10;
	temp/=10;
	arr_Dec[0]=temp%10;
	temp/=10;
	arr_Dec[2]='x';
	while(temp!=0)
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	d9 f6       	brne	.-74     	; 0x230a <LCD_void_Wirte_Float_Num+0x9e>
		temp2=temp%10;
		arr_int[i]=temp2;
		i++;
		temp/=10;
	}
	arr_int[i]='x';
    2354:	2d 81       	ldd	r18, Y+5	; 0x05
    2356:	3e 81       	ldd	r19, Y+6	; 0x06
    2358:	ce 01       	movw	r24, r28
    235a:	0e 96       	adiw	r24, 0x0e	; 14
    235c:	fc 01       	movw	r30, r24
    235e:	e2 0f       	add	r30, r18
    2360:	f3 1f       	adc	r31, r19
    2362:	88 e7       	ldi	r24, 0x78	; 120
    2364:	80 83       	st	Z, r24
	i--;
    2366:	8d 81       	ldd	r24, Y+5	; 0x05
    2368:	9e 81       	ldd	r25, Y+6	; 0x06
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	9e 83       	std	Y+6, r25	; 0x06
    236e:	8d 83       	std	Y+5, r24	; 0x05
    2370:	2f c0       	rjmp	.+94     	; 0x23d0 <LCD_void_Wirte_Float_Num+0x164>
	// re arrange the array
	while(j<i)
	{
		// swap
		temp2=arr_int[j];
    2372:	2b 81       	ldd	r18, Y+3	; 0x03
    2374:	3c 81       	ldd	r19, Y+4	; 0x04
    2376:	ce 01       	movw	r24, r28
    2378:	0e 96       	adiw	r24, 0x0e	; 14
    237a:	fc 01       	movw	r30, r24
    237c:	e2 0f       	add	r30, r18
    237e:	f3 1f       	adc	r31, r19
    2380:	80 81       	ld	r24, Z
    2382:	88 2f       	mov	r24, r24
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	98 87       	std	Y+8, r25	; 0x08
    2388:	8f 83       	std	Y+7, r24	; 0x07
		arr_int[j]=arr_int[i];
    238a:	4b 81       	ldd	r20, Y+3	; 0x03
    238c:	5c 81       	ldd	r21, Y+4	; 0x04
    238e:	2d 81       	ldd	r18, Y+5	; 0x05
    2390:	3e 81       	ldd	r19, Y+6	; 0x06
    2392:	ce 01       	movw	r24, r28
    2394:	0e 96       	adiw	r24, 0x0e	; 14
    2396:	fc 01       	movw	r30, r24
    2398:	e2 0f       	add	r30, r18
    239a:	f3 1f       	adc	r31, r19
    239c:	20 81       	ld	r18, Z
    239e:	ce 01       	movw	r24, r28
    23a0:	0e 96       	adiw	r24, 0x0e	; 14
    23a2:	fc 01       	movw	r30, r24
    23a4:	e4 0f       	add	r30, r20
    23a6:	f5 1f       	adc	r31, r21
    23a8:	20 83       	st	Z, r18
		arr_int[i]=temp2;
    23aa:	2d 81       	ldd	r18, Y+5	; 0x05
    23ac:	3e 81       	ldd	r19, Y+6	; 0x06
    23ae:	4f 81       	ldd	r20, Y+7	; 0x07
    23b0:	ce 01       	movw	r24, r28
    23b2:	0e 96       	adiw	r24, 0x0e	; 14
    23b4:	fc 01       	movw	r30, r24
    23b6:	e2 0f       	add	r30, r18
    23b8:	f3 1f       	adc	r31, r19
    23ba:	40 83       	st	Z, r20
		j++;
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	01 96       	adiw	r24, 0x01	; 1
    23c2:	9c 83       	std	Y+4, r25	; 0x04
    23c4:	8b 83       	std	Y+3, r24	; 0x03
		i--;
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	9e 83       	std	Y+6, r25	; 0x06
    23ce:	8d 83       	std	Y+5, r24	; 0x05
		temp/=10;
	}
	arr_int[i]='x';
	i--;
	// re arrange the array
	while(j<i)
    23d0:	2b 81       	ldd	r18, Y+3	; 0x03
    23d2:	3c 81       	ldd	r19, Y+4	; 0x04
    23d4:	8d 81       	ldd	r24, Y+5	; 0x05
    23d6:	9e 81       	ldd	r25, Y+6	; 0x06
    23d8:	28 17       	cp	r18, r24
    23da:	39 07       	cpc	r19, r25
    23dc:	50 f2       	brcs	.-108    	; 0x2372 <LCD_void_Wirte_Float_Num+0x106>
    23de:	10 c0       	rjmp	.+32     	; 0x2400 <LCD_void_Wirte_Float_Num+0x194>
		j++;
		i--;
	}
	while(arr_int[w]!='x')
	{
		LCD_void_Write_Data(arr_int[w]+'0');
    23e0:	29 81       	ldd	r18, Y+1	; 0x01
    23e2:	3a 81       	ldd	r19, Y+2	; 0x02
    23e4:	ce 01       	movw	r24, r28
    23e6:	0e 96       	adiw	r24, 0x0e	; 14
    23e8:	fc 01       	movw	r30, r24
    23ea:	e2 0f       	add	r30, r18
    23ec:	f3 1f       	adc	r31, r19
    23ee:	80 81       	ld	r24, Z
    23f0:	80 5d       	subi	r24, 0xD0	; 208
    23f2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <LCD_void_Write_Data>

		w++;
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	9a 81       	ldd	r25, Y+2	; 0x02
    23fa:	01 96       	adiw	r24, 0x01	; 1
    23fc:	9a 83       	std	Y+2, r25	; 0x02
    23fe:	89 83       	std	Y+1, r24	; 0x01
		arr_int[j]=arr_int[i];
		arr_int[i]=temp2;
		j++;
		i--;
	}
	while(arr_int[w]!='x')
    2400:	29 81       	ldd	r18, Y+1	; 0x01
    2402:	3a 81       	ldd	r19, Y+2	; 0x02
    2404:	ce 01       	movw	r24, r28
    2406:	0e 96       	adiw	r24, 0x0e	; 14
    2408:	fc 01       	movw	r30, r24
    240a:	e2 0f       	add	r30, r18
    240c:	f3 1f       	adc	r31, r19
    240e:	80 81       	ld	r24, Z
    2410:	88 37       	cpi	r24, 0x78	; 120
    2412:	31 f7       	brne	.-52     	; 0x23e0 <LCD_void_Wirte_Float_Num+0x174>
	{
		LCD_void_Write_Data(arr_int[w]+'0');

		w++;
	}
	LCD_void_Write_Data('.');
    2414:	8e e2       	ldi	r24, 0x2E	; 46
    2416:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <LCD_void_Write_Data>

	w=0;
    241a:	1a 82       	std	Y+2, r1	; 0x02
    241c:	19 82       	std	Y+1, r1	; 0x01
    241e:	10 c0       	rjmp	.+32     	; 0x2440 <LCD_void_Wirte_Float_Num+0x1d4>
	while(arr_Dec[w]!='x')
	{
		LCD_void_Write_Data(arr_Dec[w]+'0');
    2420:	29 81       	ldd	r18, Y+1	; 0x01
    2422:	3a 81       	ldd	r19, Y+2	; 0x02
    2424:	ce 01       	movw	r24, r28
    2426:	0b 96       	adiw	r24, 0x0b	; 11
    2428:	fc 01       	movw	r30, r24
    242a:	e2 0f       	add	r30, r18
    242c:	f3 1f       	adc	r31, r19
    242e:	80 81       	ld	r24, Z
    2430:	80 5d       	subi	r24, 0xD0	; 208
    2432:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <LCD_void_Write_Data>
		w++;
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	9a 81       	ldd	r25, Y+2	; 0x02
    243a:	01 96       	adiw	r24, 0x01	; 1
    243c:	9a 83       	std	Y+2, r25	; 0x02
    243e:	89 83       	std	Y+1, r24	; 0x01
		w++;
	}
	LCD_void_Write_Data('.');

	w=0;
	while(arr_Dec[w]!='x')
    2440:	29 81       	ldd	r18, Y+1	; 0x01
    2442:	3a 81       	ldd	r19, Y+2	; 0x02
    2444:	ce 01       	movw	r24, r28
    2446:	0b 96       	adiw	r24, 0x0b	; 11
    2448:	fc 01       	movw	r30, r24
    244a:	e2 0f       	add	r30, r18
    244c:	f3 1f       	adc	r31, r19
    244e:	80 81       	ld	r24, Z
    2450:	88 37       	cpi	r24, 0x78	; 120
    2452:	31 f7       	brne	.-52     	; 0x2420 <LCD_void_Wirte_Float_Num+0x1b4>
	}




}
    2454:	aa 96       	adiw	r28, 0x2a	; 42
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <main>:
#include  "ADC_INTERFACE.h"
#include  "LCD_INTERFACE.h"
#include  "LCD_CONFIG.h"
//  this is  the lm35 example
void main (void)
{
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	00 d0       	rcall	.+0      	; 0x246c <main+0x6>
    246c:	00 d0       	rcall	.+0      	; 0x246e <main+0x8>
    246e:	00 d0       	rcall	.+0      	; 0x2470 <main+0xa>
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62

	ADC_voidInit();
    2474:	0e 94 47 06 	call	0xc8e	; 0xc8e <ADC_voidInit>
DIO_u8set_pin_dir(GROUP_C,DIO_u8_PIN_0,DIO_u8_OUTPUT);
    2478:	82 e0       	ldi	r24, 0x02	; 2
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	41 e0       	ldi	r20, 0x01	; 1
    247e:	0e 94 30 08 	call	0x1060	; 0x1060 <DIO_u8set_pin_dir>
DIO_u8set_pin_dir(GROUP_C,DIO_u8_PIN_1,DIO_u8_OUTPUT);
    2482:	82 e0       	ldi	r24, 0x02	; 2
    2484:	61 e0       	ldi	r22, 0x01	; 1
    2486:	41 e0       	ldi	r20, 0x01	; 1
    2488:	0e 94 30 08 	call	0x1060	; 0x1060 <DIO_u8set_pin_dir>
DIO_u8set_pin_dir(GROUP_C,DIO_u8_PIN_2,DIO_u8_OUTPUT);
    248c:	82 e0       	ldi	r24, 0x02	; 2
    248e:	62 e0       	ldi	r22, 0x02	; 2
    2490:	41 e0       	ldi	r20, 0x01	; 1
    2492:	0e 94 30 08 	call	0x1060	; 0x1060 <DIO_u8set_pin_dir>
u16 value_of_ADC_Conversion;
u16 LM35_u16_TEMP_Value;
u16 LM35_u16_mV_value;
while(1)
{
	ADC_SingleConversion (&value_of_ADC_Conversion);
    2496:	ce 01       	movw	r24, r28
    2498:	05 96       	adiw	r24, 0x05	; 5
    249a:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ADC_SingleConversion>

	LM35_u16_mV_value=(5000*value_of_ADC_Conversion)/1024;
    249e:	2d 81       	ldd	r18, Y+5	; 0x05
    24a0:	3e 81       	ldd	r19, Y+6	; 0x06
    24a2:	88 e8       	ldi	r24, 0x88	; 136
    24a4:	93 e1       	ldi	r25, 0x13	; 19
    24a6:	ac 01       	movw	r20, r24
    24a8:	24 9f       	mul	r18, r20
    24aa:	c0 01       	movw	r24, r0
    24ac:	25 9f       	mul	r18, r21
    24ae:	90 0d       	add	r25, r0
    24b0:	34 9f       	mul	r19, r20
    24b2:	90 0d       	add	r25, r0
    24b4:	11 24       	eor	r1, r1
    24b6:	89 2f       	mov	r24, r25
    24b8:	99 27       	eor	r25, r25
    24ba:	86 95       	lsr	r24
    24bc:	86 95       	lsr	r24
    24be:	9a 83       	std	Y+2, r25	; 0x02
    24c0:	89 83       	std	Y+1, r24	; 0x01
	LM35_u16_TEMP_Value=LM35_u16_mV_value/10;
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	9a 81       	ldd	r25, Y+2	; 0x02
    24c6:	2a e0       	ldi	r18, 0x0A	; 10
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	b9 01       	movw	r22, r18
    24cc:	0e 94 ab 12 	call	0x2556	; 0x2556 <__udivmodhi4>
    24d0:	cb 01       	movw	r24, r22
    24d2:	9c 83       	std	Y+4, r25	; 0x04
    24d4:	8b 83       	std	Y+3, r24	; 0x03
	if(LM35_u16_TEMP_Value<2)
    24d6:	8b 81       	ldd	r24, Y+3	; 0x03
    24d8:	9c 81       	ldd	r25, Y+4	; 0x04
    24da:	82 30       	cpi	r24, 0x02	; 2
    24dc:	91 05       	cpc	r25, r1
    24de:	80 f4       	brcc	.+32     	; 0x2500 <main+0x9a>
	{
		DIO_u8set_pin_value(GROUP_C,DIO_u8_PIN_0,DIO_u8_HIGH);
    24e0:	82 e0       	ldi	r24, 0x02	; 2
    24e2:	60 e0       	ldi	r22, 0x00	; 0
    24e4:	41 e0       	ldi	r20, 0x01	; 1
    24e6:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
		DIO_u8set_pin_value(GROUP_C,DIO_u8_PIN_1,DIO_u8_LOW);
    24ea:	82 e0       	ldi	r24, 0x02	; 2
    24ec:	61 e0       	ldi	r22, 0x01	; 1
    24ee:	40 e0       	ldi	r20, 0x00	; 0
    24f0:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
		DIO_u8set_pin_value(GROUP_C,DIO_u8_PIN_2,DIO_u8_LOW);
    24f4:	82 e0       	ldi	r24, 0x02	; 2
    24f6:	62 e0       	ldi	r22, 0x02	; 2
    24f8:	40 e0       	ldi	r20, 0x00	; 0
    24fa:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
    24fe:	cb cf       	rjmp	.-106    	; 0x2496 <main+0x30>

	}
	else if(LM35_u16_TEMP_Value<35)
    2500:	8b 81       	ldd	r24, Y+3	; 0x03
    2502:	9c 81       	ldd	r25, Y+4	; 0x04
    2504:	83 32       	cpi	r24, 0x23	; 35
    2506:	91 05       	cpc	r25, r1
    2508:	80 f4       	brcc	.+32     	; 0x252a <main+0xc4>
	{
		DIO_u8set_pin_value(GROUP_C,DIO_u8_PIN_0,DIO_u8_LOW);
    250a:	82 e0       	ldi	r24, 0x02	; 2
    250c:	60 e0       	ldi	r22, 0x00	; 0
    250e:	40 e0       	ldi	r20, 0x00	; 0
    2510:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
		DIO_u8set_pin_value(GROUP_C,DIO_u8_PIN_1,DIO_u8_HIGH);
    2514:	82 e0       	ldi	r24, 0x02	; 2
    2516:	61 e0       	ldi	r22, 0x01	; 1
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
		DIO_u8set_pin_value(GROUP_C,DIO_u8_PIN_2,DIO_u8_LOW);
    251e:	82 e0       	ldi	r24, 0x02	; 2
    2520:	62 e0       	ldi	r22, 0x02	; 2
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
    2528:	b6 cf       	rjmp	.-148    	; 0x2496 <main+0x30>
	}
	else if(LM35_u16_TEMP_Value<55)
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	9c 81       	ldd	r25, Y+4	; 0x04
    252e:	87 33       	cpi	r24, 0x37	; 55
    2530:	91 05       	cpc	r25, r1
    2532:	08 f0       	brcs	.+2      	; 0x2536 <main+0xd0>
    2534:	b0 cf       	rjmp	.-160    	; 0x2496 <main+0x30>
	{
			DIO_u8set_pin_value(GROUP_C,DIO_u8_PIN_0,DIO_u8_LOW);
    2536:	82 e0       	ldi	r24, 0x02	; 2
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	40 e0       	ldi	r20, 0x00	; 0
    253c:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
			DIO_u8set_pin_value(GROUP_C,DIO_u8_PIN_1,DIO_u8_HIGH);
    2540:	82 e0       	ldi	r24, 0x02	; 2
    2542:	61 e0       	ldi	r22, 0x01	; 1
    2544:	41 e0       	ldi	r20, 0x01	; 1
    2546:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
			DIO_u8set_pin_value(GROUP_C,DIO_u8_PIN_2,DIO_u8_HIGH);
    254a:	82 e0       	ldi	r24, 0x02	; 2
    254c:	62 e0       	ldi	r22, 0x02	; 2
    254e:	41 e0       	ldi	r20, 0x01	; 1
    2550:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_u8set_pin_value>
    2554:	a0 cf       	rjmp	.-192    	; 0x2496 <main+0x30>

00002556 <__udivmodhi4>:
    2556:	aa 1b       	sub	r26, r26
    2558:	bb 1b       	sub	r27, r27
    255a:	51 e1       	ldi	r21, 0x11	; 17
    255c:	07 c0       	rjmp	.+14     	; 0x256c <__udivmodhi4_ep>

0000255e <__udivmodhi4_loop>:
    255e:	aa 1f       	adc	r26, r26
    2560:	bb 1f       	adc	r27, r27
    2562:	a6 17       	cp	r26, r22
    2564:	b7 07       	cpc	r27, r23
    2566:	10 f0       	brcs	.+4      	; 0x256c <__udivmodhi4_ep>
    2568:	a6 1b       	sub	r26, r22
    256a:	b7 0b       	sbc	r27, r23

0000256c <__udivmodhi4_ep>:
    256c:	88 1f       	adc	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	5a 95       	dec	r21
    2572:	a9 f7       	brne	.-22     	; 0x255e <__udivmodhi4_loop>
    2574:	80 95       	com	r24
    2576:	90 95       	com	r25
    2578:	bc 01       	movw	r22, r24
    257a:	cd 01       	movw	r24, r26
    257c:	08 95       	ret

0000257e <__prologue_saves__>:
    257e:	2f 92       	push	r2
    2580:	3f 92       	push	r3
    2582:	4f 92       	push	r4
    2584:	5f 92       	push	r5
    2586:	6f 92       	push	r6
    2588:	7f 92       	push	r7
    258a:	8f 92       	push	r8
    258c:	9f 92       	push	r9
    258e:	af 92       	push	r10
    2590:	bf 92       	push	r11
    2592:	cf 92       	push	r12
    2594:	df 92       	push	r13
    2596:	ef 92       	push	r14
    2598:	ff 92       	push	r15
    259a:	0f 93       	push	r16
    259c:	1f 93       	push	r17
    259e:	cf 93       	push	r28
    25a0:	df 93       	push	r29
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
    25a6:	ca 1b       	sub	r28, r26
    25a8:	db 0b       	sbc	r29, r27
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	de bf       	out	0x3e, r29	; 62
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	cd bf       	out	0x3d, r28	; 61
    25b4:	09 94       	ijmp

000025b6 <__epilogue_restores__>:
    25b6:	2a 88       	ldd	r2, Y+18	; 0x12
    25b8:	39 88       	ldd	r3, Y+17	; 0x11
    25ba:	48 88       	ldd	r4, Y+16	; 0x10
    25bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    25be:	6e 84       	ldd	r6, Y+14	; 0x0e
    25c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    25c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    25c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    25c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    25c8:	b9 84       	ldd	r11, Y+9	; 0x09
    25ca:	c8 84       	ldd	r12, Y+8	; 0x08
    25cc:	df 80       	ldd	r13, Y+7	; 0x07
    25ce:	ee 80       	ldd	r14, Y+6	; 0x06
    25d0:	fd 80       	ldd	r15, Y+5	; 0x05
    25d2:	0c 81       	ldd	r16, Y+4	; 0x04
    25d4:	1b 81       	ldd	r17, Y+3	; 0x03
    25d6:	aa 81       	ldd	r26, Y+2	; 0x02
    25d8:	b9 81       	ldd	r27, Y+1	; 0x01
    25da:	ce 0f       	add	r28, r30
    25dc:	d1 1d       	adc	r29, r1
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	f8 94       	cli
    25e2:	de bf       	out	0x3e, r29	; 62
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	cd bf       	out	0x3d, r28	; 61
    25e8:	ed 01       	movw	r28, r26
    25ea:	08 95       	ret

000025ec <_exit>:
    25ec:	f8 94       	cli

000025ee <__stop_program>:
    25ee:	ff cf       	rjmp	.-2      	; 0x25ee <__stop_program>
