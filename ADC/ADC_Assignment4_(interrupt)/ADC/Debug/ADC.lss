
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002952  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002952  000029e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800168  00800168  00002aee  2**0
                  ALLOC
  3 .stab         00001ee4  00000000  00000000  00002af0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d87  00000000  00000000  000049d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000575b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000058fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00005aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00007ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000927e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a454  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a614  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000a90a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b278  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 36       	cpi	r26, 0x6E	; 110
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e5       	ldi	r30, 0x52	; 82
      78:	f9 e2       	ldi	r31, 0x29	; 41
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 93 13 	call	0x2726	; 0x2726 <main>
      8a:	0c 94 a7 14 	jmp	0x294e	; 0x294e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_voidInit>:
#include   "ADC_Private.h"

extern  f32 result;
volatile u32 flag=0;
void ADC_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62

	/* ADC ENABLE*/
	set_bit(ADC_U8_ADCSRA,ADCSRA_ADEN);
     e36:	a6 e2       	ldi	r26, 0x26	; 38
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e6 e2       	ldi	r30, 0x26	; 38
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 68       	ori	r24, 0x80	; 128
     e42:	8c 93       	st	X, r24
	/*Voltage Reference Selections for ADC*/
	#if Voltage_Reference_Selections_for_ADC==AREF
		clear_bit(ADC_U8_ADMUX,ADMUX_REFS1);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 77       	andi	r24, 0x7F	; 127
     e50:	8c 93       	st	X, r24
		clear_bit(ADC_U8_ADMUX,ADMUX_REFS0);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7b       	andi	r24, 0xBF	; 191
     e5e:	8c 93       	st	X, r24
		set_bit(ADC_U8_ADMUX,ADMUX_REFS1);
		set_bit(ADC_U8_ADMUX,ADMUX_REFS0);
	#endif
		/*Input Channel and Gain Selections*/
	#if Input_Channel_and_Gain_Selections==single_Ended_input_ADC0
		DIO_u8set_pin_dir(GROUP_A,ADC_U8_CH0,DIO_u8_INPUT);
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_u8set_pin_dir>
		clear_bit(ADC_U8_ADMUX,ADMUX_MUX4);
     e6a:	a7 e2       	ldi	r26, 0x27	; 39
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e7 e2       	ldi	r30, 0x27	; 39
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	8f 7e       	andi	r24, 0xEF	; 239
     e76:	8c 93       	st	X, r24
		clear_bit(ADC_U8_ADMUX,ADMUX_MUX3);
     e78:	a7 e2       	ldi	r26, 0x27	; 39
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e7 e2       	ldi	r30, 0x27	; 39
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	87 7f       	andi	r24, 0xF7	; 247
     e84:	8c 93       	st	X, r24
		clear_bit(ADC_U8_ADMUX,ADMUX_MUX2);
     e86:	a7 e2       	ldi	r26, 0x27	; 39
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e7 e2       	ldi	r30, 0x27	; 39
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	8b 7f       	andi	r24, 0xFB	; 251
     e92:	8c 93       	st	X, r24
		clear_bit(ADC_U8_ADMUX,ADMUX_MUX1);
     e94:	a7 e2       	ldi	r26, 0x27	; 39
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e7 e2       	ldi	r30, 0x27	; 39
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	8d 7f       	andi	r24, 0xFD	; 253
     ea0:	8c 93       	st	X, r24
		clear_bit(ADC_U8_ADMUX,ADMUX_MUX0);
     ea2:	a7 e2       	ldi	r26, 0x27	; 39
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e7 e2       	ldi	r30, 0x27	; 39
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8e 7f       	andi	r24, 0xFE	; 254
     eae:	8c 93       	st	X, r24
	#elif ADC_Prescaler_Selections==ADC_Prescalar_64
		set_bit(ADC_U8_ADCSRA,ADCSRA_ADPS2);
		set_bit(ADC_U8_ADCSRA,ADCSRA_ADPS1);
		clear_bit(ADC_U8_ADCSRA,ADCSRA_ADPS0);
	#elif ADC_Prescaler_Selections==ADC_Prescalar_128
		set_bit(ADC_U8_ADCSRA,ADCSRA_ADPS2);
     eb0:	a6 e2       	ldi	r26, 0x26	; 38
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e6 e2       	ldi	r30, 0x26	; 38
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	84 60       	ori	r24, 0x04	; 4
     ebc:	8c 93       	st	X, r24
		set_bit(ADC_U8_ADCSRA,ADCSRA_ADPS1);
     ebe:	a6 e2       	ldi	r26, 0x26	; 38
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e6 e2       	ldi	r30, 0x26	; 38
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	82 60       	ori	r24, 0x02	; 2
     eca:	8c 93       	st	X, r24
		set_bit(ADC_U8_ADCSRA,ADCSRA_ADPS0);
     ecc:	a6 e2       	ldi	r26, 0x26	; 38
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e6 e2       	ldi	r30, 0x26	; 38
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	81 60       	ori	r24, 0x01	; 1
     ed8:	8c 93       	st	X, r24
	#endif

	/*right  or left  adjustment*/

	#if ADC_ADLAR_Adjustment==ADC_ADLAR_Right_Adjustment
	clear_bit(ADC_U8_ADMUX,ADMUX_ADLAR);
     eda:	a7 e2       	ldi	r26, 0x27	; 39
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e7 e2       	ldi	r30, 0x27	; 39
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	8f 7d       	andi	r24, 0xDF	; 223
     ee6:	8c 93       	st	X, r24
	#elif ADC_ADLAR_Adjustment==ADC_ADLAR_Left_Adjustment
	set_bit(ADC_U8_ADMUX,ADMUX_ADLAR);
	#endif
return;
}
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <ADC_SingleConversion>:

/*this function  will work  on  10bits single time and  using  the  polling  methhod   */
void ADC_SingleConversion (u16	*CopyPtr_u16_value )
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <ADC_SingleConversion+0x6>
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01
		/*start conversion */
	set_bit(ADC_U8_ADCSRA,ADCSRA_ADSC); //  this bit when  finishes it cleared it's self   and interrupt  fires if u  enable  the interrupt bit
     efc:	a6 e2       	ldi	r26, 0x26	; 38
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e6 e2       	ldi	r30, 0x26	; 38
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	80 64       	ori	r24, 0x40	; 64
     f08:	8c 93       	st	X, r24
	/*polling  method the best is by interrupt */
	while(get_bit(ADC_U8_ADCSRA,ADCSRA_ADIF) != 1); //  this work  on  the flag  when this bit is 0 it stuck  until  it turnes to  1
     f0a:	e6 e2       	ldi	r30, 0x26	; 38
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	82 95       	swap	r24
     f12:	8f 70       	andi	r24, 0x0F	; 15
     f14:	88 2f       	mov	r24, r24
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	81 70       	andi	r24, 0x01	; 1
     f1a:	90 70       	andi	r25, 0x00	; 0
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	a9 f3       	breq	.-22     	; 0xf0a <ADC_SingleConversion+0x1c>
	// or we can use the interrupt that fires when the conversion is finished and and then  continue  takes the result
	/*clearing the flag */
	set_bit(ADC_U8_ADCSRA,ADCSRA_ADIF);
     f20:	a6 e2       	ldi	r26, 0x26	; 38
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e6 e2       	ldi	r30, 0x26	; 38
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	80 61       	ori	r24, 0x10	; 16
     f2c:	8c 93       	st	X, r24
#if  ADC_ADLAR_Adjustment==ADC_ADLAR_Right_Adjustment
	*CopyPtr_u16_value=ADC_U8_ADCL;
     f2e:	e4 e2       	ldi	r30, 0x24	; 36
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	e9 81       	ldd	r30, Y+1	; 0x01
     f3a:	fa 81       	ldd	r31, Y+2	; 0x02
     f3c:	91 83       	std	Z+1, r25	; 0x01
     f3e:	80 83       	st	Z, r24
	*CopyPtr_u16_value|=(ADC_U8_ADCH<<8);
     f40:	e9 81       	ldd	r30, Y+1	; 0x01
     f42:	fa 81       	ldd	r31, Y+2	; 0x02
     f44:	20 81       	ld	r18, Z
     f46:	31 81       	ldd	r19, Z+1	; 0x01
     f48:	e5 e2       	ldi	r30, 0x25	; 37
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	88 2f       	mov	r24, r24
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	98 2f       	mov	r25, r24
     f54:	88 27       	eor	r24, r24
     f56:	82 2b       	or	r24, r18
     f58:	93 2b       	or	r25, r19
     f5a:	e9 81       	ldd	r30, Y+1	; 0x01
     f5c:	fa 81       	ldd	r31, Y+2	; 0x02
     f5e:	91 83       	std	Z+1, r25	; 0x01
     f60:	80 83       	st	Z, r24
#elif ADC_ADLAR_Adjustment==ADC_ADLAR_Left_Adjustment
	*CopyPtr_u16_value=(ADC_U8_ADCL>>6);
	*CopyPtr_u16_value|=((u16)(ADC_U8_ADCH)<<2);
#endif
}
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <ADC_voidInit_Interrupt>:

void ADC_voidInit_Interrupt(void)
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
	/* ADC ENABLE*/
		set_bit(ADC_U8_ADCSRA,ADCSRA_ADEN);
     f74:	a6 e2       	ldi	r26, 0x26	; 38
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e6 e2       	ldi	r30, 0x26	; 38
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	80 68       	ori	r24, 0x80	; 128
     f80:	8c 93       	st	X, r24
	/* ADC  interrupt ENABLE*/
		set_bit(ADC_U8_ADCSRA,ADCSRA_ADIE);
     f82:	a6 e2       	ldi	r26, 0x26	; 38
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e6 e2       	ldi	r30, 0x26	; 38
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	88 60       	ori	r24, 0x08	; 8
     f8e:	8c 93       	st	X, r24

	/*global  interrupt enable */
		set_bit(EXTI_u8_SREG,Global_Interrupt_bit);
     f90:	af e5       	ldi	r26, 0x5F	; 95
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	ef e5       	ldi	r30, 0x5F	; 95
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	80 68       	ori	r24, 0x80	; 128
     f9c:	8c 93       	st	X, r24

		/*ADC Auto Trigger Enable*/
		set_bit(ADC_U8_ADCSRA,ADCSRA_ADATE);
     f9e:	a6 e2       	ldi	r26, 0x26	; 38
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e6 e2       	ldi	r30, 0x26	; 38
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 62       	ori	r24, 0x20	; 32
     faa:	8c 93       	st	X, r24

	/*Voltage Reference Selections for ADC*/
	#if Voltage_Reference_Selections_for_ADC==AREF
		clear_bit(ADC_U8_ADMUX,ADMUX_REFS1);
     fac:	a7 e2       	ldi	r26, 0x27	; 39
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e7 e2       	ldi	r30, 0x27	; 39
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8f 77       	andi	r24, 0x7F	; 127
     fb8:	8c 93       	st	X, r24
		clear_bit(ADC_U8_ADMUX,ADMUX_REFS0);
     fba:	a7 e2       	ldi	r26, 0x27	; 39
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e7 e2       	ldi	r30, 0x27	; 39
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8f 7b       	andi	r24, 0xBF	; 191
     fc6:	8c 93       	st	X, r24
		set_bit(ADC_U8_ADMUX,ADMUX_REFS1);
		set_bit(ADC_U8_ADMUX,ADMUX_REFS0);
	#endif
	/* ADC bit */
#if Input_Channel_and_Gain_Selections==single_Ended_input_ADC0
		DIO_u8set_pin_dir(GROUP_A,ADC_U8_CH0,DIO_u8_INPUT);
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_u8set_pin_dir>
		clear_bit(ADC_U8_ADMUX,ADMUX_MUX4);
     fd2:	a7 e2       	ldi	r26, 0x27	; 39
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e7 e2       	ldi	r30, 0x27	; 39
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8f 7e       	andi	r24, 0xEF	; 239
     fde:	8c 93       	st	X, r24
		clear_bit(ADC_U8_ADMUX,ADMUX_MUX3);
     fe0:	a7 e2       	ldi	r26, 0x27	; 39
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e7 e2       	ldi	r30, 0x27	; 39
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	87 7f       	andi	r24, 0xF7	; 247
     fec:	8c 93       	st	X, r24
		clear_bit(ADC_U8_ADMUX,ADMUX_MUX2);
     fee:	a7 e2       	ldi	r26, 0x27	; 39
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e7 e2       	ldi	r30, 0x27	; 39
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	8b 7f       	andi	r24, 0xFB	; 251
     ffa:	8c 93       	st	X, r24
		clear_bit(ADC_U8_ADMUX,ADMUX_MUX1);
     ffc:	a7 e2       	ldi	r26, 0x27	; 39
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e7 e2       	ldi	r30, 0x27	; 39
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	8d 7f       	andi	r24, 0xFD	; 253
    1008:	8c 93       	st	X, r24
		clear_bit(ADC_U8_ADMUX,ADMUX_MUX0);
    100a:	a7 e2       	ldi	r26, 0x27	; 39
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e7 e2       	ldi	r30, 0x27	; 39
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8e 7f       	andi	r24, 0xFE	; 254
    1016:	8c 93       	st	X, r24
	#elif ADC_Prescaler_Selections==ADC_Prescalar_64
		set_bit(ADC_U8_ADCSRA,ADCSRA_ADPS2);
		set_bit(ADC_U8_ADCSRA,ADCSRA_ADPS1);
		clear_bit(ADC_U8_ADCSRA,ADCSRA_ADPS0);
	#elif ADC_Prescaler_Selections==ADC_Prescalar_128
		set_bit(ADC_U8_ADCSRA,ADCSRA_ADPS2);
    1018:	a6 e2       	ldi	r26, 0x26	; 38
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e6 e2       	ldi	r30, 0x26	; 38
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	84 60       	ori	r24, 0x04	; 4
    1024:	8c 93       	st	X, r24
		set_bit(ADC_U8_ADCSRA,ADCSRA_ADPS1);
    1026:	a6 e2       	ldi	r26, 0x26	; 38
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e6 e2       	ldi	r30, 0x26	; 38
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	82 60       	ori	r24, 0x02	; 2
    1032:	8c 93       	st	X, r24
		set_bit(ADC_U8_ADCSRA,ADCSRA_ADPS0);
    1034:	a6 e2       	ldi	r26, 0x26	; 38
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e6 e2       	ldi	r30, 0x26	; 38
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	81 60       	ori	r24, 0x01	; 1
    1040:	8c 93       	st	X, r24
	#endif

		/*right  or left  adjustment*/

	#if ADC_ADLAR_Adjustment==ADC_ADLAR_Right_Adjustment
		clear_bit(ADC_U8_ADMUX,ADMUX_ADLAR);
    1042:	a7 e2       	ldi	r26, 0x27	; 39
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e7 e2       	ldi	r30, 0x27	; 39
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	8f 7d       	andi	r24, 0xDF	; 223
    104e:	8c 93       	st	X, r24
	#elif ADC_ADLAR_Adjustment==ADC_ADLAR_Left_Adjustment
		set_bit(ADC_U8_ADMUX,ADMUX_ADLAR);
	#endif
}
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <ADC_u16Read_Interput>:
void ADC_u16Read_Interput(void)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
	set_bit(ADC_U8_ADCSRA,ADCSRA_ADSC);
    105e:	a6 e2       	ldi	r26, 0x26	; 38
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e6 e2       	ldi	r30, 0x26	; 38
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	80 64       	ori	r24, 0x40	; 64
    106a:	8c 93       	st	X, r24
}
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <__vector_16>:



void __vector_16(void)

{
    1072:	1f 92       	push	r1
    1074:	0f 92       	push	r0
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	0f 92       	push	r0
    107a:	11 24       	eor	r1, r1
    107c:	2f 93       	push	r18
    107e:	3f 93       	push	r19
    1080:	4f 93       	push	r20
    1082:	5f 93       	push	r21
    1084:	6f 93       	push	r22
    1086:	7f 93       	push	r23
    1088:	8f 93       	push	r24
    108a:	9f 93       	push	r25
    108c:	af 93       	push	r26
    108e:	bf 93       	push	r27
    1090:	ef 93       	push	r30
    1092:	ff 93       	push	r31
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	00 d0       	rcall	.+0      	; 0x109a <__vector_16+0x28>
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
u16 resu;
	flag=1;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	90 93 69 01 	sts	0x0169, r25
    10a6:	80 93 68 01 	sts	0x0168, r24
#if  ADC_ADLAR_Adjustment==ADC_ADLAR_Right_Adjustment
	resu=ADC_U8_ADCL;
    10aa:	e4 e2       	ldi	r30, 0x24	; 36
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	9a 83       	std	Y+2, r25	; 0x02
    10b6:	89 83       	std	Y+1, r24	; 0x01
	resu|=(ADC_U8_ADCH<<8);
    10b8:	e5 e2       	ldi	r30, 0x25	; 37
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	98 2f       	mov	r25, r24
    10c4:	88 27       	eor	r24, r24
    10c6:	9c 01       	movw	r18, r24
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	82 2b       	or	r24, r18
    10ce:	93 2b       	or	r25, r19
    10d0:	9a 83       	std	Y+2, r25	; 0x02
    10d2:	89 83       	std	Y+1, r24	; 0x01
#elif ADC_ADLAR_Adjustment==ADC_ADLAR_Left_Adjustment
	resu=(ADC_U8_ADCL>>6);
	resu|=((u16)(ADC_U8_ADCH)<<2);
#endif
	result=resu;
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	cc 01       	movw	r24, r24
    10da:	a0 e0       	ldi	r26, 0x00	; 0
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	bc 01       	movw	r22, r24
    10e0:	cd 01       	movw	r24, r26
    10e2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	80 93 6a 01 	sts	0x016A, r24
    10ee:	90 93 6b 01 	sts	0x016B, r25
    10f2:	a0 93 6c 01 	sts	0x016C, r26
    10f6:	b0 93 6d 01 	sts	0x016D, r27

}
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	ff 91       	pop	r31
    1104:	ef 91       	pop	r30
    1106:	bf 91       	pop	r27
    1108:	af 91       	pop	r26
    110a:	9f 91       	pop	r25
    110c:	8f 91       	pop	r24
    110e:	7f 91       	pop	r23
    1110:	6f 91       	pop	r22
    1112:	5f 91       	pop	r21
    1114:	4f 91       	pop	r20
    1116:	3f 91       	pop	r19
    1118:	2f 91       	pop	r18
    111a:	0f 90       	pop	r0
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	0f 90       	pop	r0
    1120:	1f 90       	pop	r1
    1122:	18 95       	reti

00001124 <DIO_u8set_pin_value>:
#include "../MCAL/DIO/DIO_INTERFACE.h"



u8 DIO_u8set_pin_value(u8 Copy_u8_port_ID,u8 Copy_u8_pin_ID,u8 Copy_u8_pin_val)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	00 d0       	rcall	.+0      	; 0x112a <DIO_u8set_pin_value+0x6>
    112a:	00 d0       	rcall	.+0      	; 0x112c <DIO_u8set_pin_value+0x8>
    112c:	00 d0       	rcall	.+0      	; 0x112e <DIO_u8set_pin_value+0xa>
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	8a 83       	std	Y+2, r24	; 0x02
    1134:	6b 83       	std	Y+3, r22	; 0x03
    1136:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
    1138:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	84 30       	cpi	r24, 0x04	; 4
    113e:	08 f0       	brcs	.+2      	; 0x1142 <DIO_u8set_pin_value+0x1e>
    1140:	e3 c0       	rjmp	.+454    	; 0x1308 <DIO_u8set_pin_value+0x1e4>
	{
		if((Copy_u8_pin_ID>=MIN_u8_PIN_ID)&&(Copy_u8_pin_ID<=MAX_u8_PIN_ID))
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	88 30       	cpi	r24, 0x08	; 8
    1146:	08 f0       	brcs	.+2      	; 0x114a <DIO_u8set_pin_value+0x26>
    1148:	dc c0       	rjmp	.+440    	; 0x1302 <DIO_u8set_pin_value+0x1de>
		{
			if((Copy_u8_pin_val==MIN_u8_PIN_VAL)||(Copy_u8_pin_val==MAX_u8_PIN_VAL))
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	88 23       	and	r24, r24
    114e:	21 f0       	breq	.+8      	; 0x1158 <DIO_u8set_pin_value+0x34>
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	09 f0       	breq	.+2      	; 0x1158 <DIO_u8set_pin_value+0x34>
    1156:	d2 c0       	rjmp	.+420    	; 0x12fc <DIO_u8set_pin_value+0x1d8>
					{
						switch(Copy_u8_port_ID)
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	3e 83       	std	Y+6, r19	; 0x06
    1160:	2d 83       	std	Y+5, r18	; 0x05
    1162:	8d 81       	ldd	r24, Y+5	; 0x05
    1164:	9e 81       	ldd	r25, Y+6	; 0x06
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	91 05       	cpc	r25, r1
    116a:	09 f4       	brne	.+2      	; 0x116e <DIO_u8set_pin_value+0x4a>
    116c:	43 c0       	rjmp	.+134    	; 0x11f4 <DIO_u8set_pin_value+0xd0>
    116e:	2d 81       	ldd	r18, Y+5	; 0x05
    1170:	3e 81       	ldd	r19, Y+6	; 0x06
    1172:	22 30       	cpi	r18, 0x02	; 2
    1174:	31 05       	cpc	r19, r1
    1176:	2c f4       	brge	.+10     	; 0x1182 <DIO_u8set_pin_value+0x5e>
    1178:	8d 81       	ldd	r24, Y+5	; 0x05
    117a:	9e 81       	ldd	r25, Y+6	; 0x06
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	71 f0       	breq	.+28     	; 0x119c <DIO_u8set_pin_value+0x78>
    1180:	c5 c0       	rjmp	.+394    	; 0x130c <DIO_u8set_pin_value+0x1e8>
    1182:	2d 81       	ldd	r18, Y+5	; 0x05
    1184:	3e 81       	ldd	r19, Y+6	; 0x06
    1186:	22 30       	cpi	r18, 0x02	; 2
    1188:	31 05       	cpc	r19, r1
    118a:	09 f4       	brne	.+2      	; 0x118e <DIO_u8set_pin_value+0x6a>
    118c:	5f c0       	rjmp	.+190    	; 0x124c <DIO_u8set_pin_value+0x128>
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	9e 81       	ldd	r25, Y+6	; 0x06
    1192:	83 30       	cpi	r24, 0x03	; 3
    1194:	91 05       	cpc	r25, r1
    1196:	09 f4       	brne	.+2      	; 0x119a <DIO_u8set_pin_value+0x76>
    1198:	85 c0       	rjmp	.+266    	; 0x12a4 <DIO_u8set_pin_value+0x180>
    119a:	b8 c0       	rjmp	.+368    	; 0x130c <DIO_u8set_pin_value+0x1e8>
							{
								case GROUP_A:
									Assign_Bit(DIO_U8_PORTA,Copy_u8_pin_ID,Copy_u8_pin_val);
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	a1 f4       	brne	.+40     	; 0x11ca <DIO_u8set_pin_value+0xa6>
    11a2:	ab e3       	ldi	r26, 0x3B	; 59
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	eb e3       	ldi	r30, 0x3B	; 59
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIO_u8set_pin_value+0x9c>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <DIO_u8set_pin_value+0x98>
    11c4:	84 2b       	or	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	a1 c0       	rjmp	.+322    	; 0x130c <DIO_u8set_pin_value+0x1e8>
    11ca:	ab e3       	ldi	r26, 0x3B	; 59
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	eb e3       	ldi	r30, 0x3B	; 59
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <DIO_u8set_pin_value+0xc4>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <DIO_u8set_pin_value+0xc0>
    11ec:	80 95       	com	r24
    11ee:	84 23       	and	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	8c c0       	rjmp	.+280    	; 0x130c <DIO_u8set_pin_value+0x1e8>
									break;
								case GROUP_B:
									Assign_Bit(DIO_U8_PORTB,Copy_u8_pin_ID,Copy_u8_pin_val);
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	a1 f4       	brne	.+40     	; 0x1222 <DIO_u8set_pin_value+0xfe>
    11fa:	a8 e3       	ldi	r26, 0x38	; 56
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e8 e3       	ldi	r30, 0x38	; 56
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_u8set_pin_value+0xf4>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_u8set_pin_value+0xf0>
    121c:	84 2b       	or	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	75 c0       	rjmp	.+234    	; 0x130c <DIO_u8set_pin_value+0x1e8>
    1222:	a8 e3       	ldi	r26, 0x38	; 56
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e8 e3       	ldi	r30, 0x38	; 56
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_u8set_pin_value+0x11c>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_u8set_pin_value+0x118>
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	60 c0       	rjmp	.+192    	; 0x130c <DIO_u8set_pin_value+0x1e8>
									break;
								case GROUP_C:
									Assign_Bit(DIO_U8_PORTC,Copy_u8_pin_ID,Copy_u8_pin_val);
    124c:	8c 81       	ldd	r24, Y+4	; 0x04
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	a1 f4       	brne	.+40     	; 0x127a <DIO_u8set_pin_value+0x156>
    1252:	a5 e3       	ldi	r26, 0x35	; 53
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e5 e3       	ldi	r30, 0x35	; 53
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 2e       	mov	r0, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <DIO_u8set_pin_value+0x14c>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <DIO_u8set_pin_value+0x148>
    1274:	84 2b       	or	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	49 c0       	rjmp	.+146    	; 0x130c <DIO_u8set_pin_value+0x1e8>
    127a:	a5 e3       	ldi	r26, 0x35	; 53
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e5 e3       	ldi	r30, 0x35	; 53
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_u8set_pin_value+0x174>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_u8set_pin_value+0x170>
    129c:	80 95       	com	r24
    129e:	84 23       	and	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	34 c0       	rjmp	.+104    	; 0x130c <DIO_u8set_pin_value+0x1e8>
									break;
								case GROUP_D:
									Assign_Bit(DIO_U8_PORTD,Copy_u8_pin_ID,Copy_u8_pin_val);
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	a1 f4       	brne	.+40     	; 0x12d2 <DIO_u8set_pin_value+0x1ae>
    12aa:	a2 e3       	ldi	r26, 0x32	; 50
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e2 e3       	ldi	r30, 0x32	; 50
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_u8set_pin_value+0x1a4>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO_u8set_pin_value+0x1a0>
    12cc:	84 2b       	or	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	1d c0       	rjmp	.+58     	; 0x130c <DIO_u8set_pin_value+0x1e8>
    12d2:	a2 e3       	ldi	r26, 0x32	; 50
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e2 e3       	ldi	r30, 0x32	; 50
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <DIO_u8set_pin_value+0x1cc>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <DIO_u8set_pin_value+0x1c8>
    12f4:	80 95       	com	r24
    12f6:	84 23       	and	r24, r20
    12f8:	8c 93       	st	X, r24
    12fa:	08 c0       	rjmp	.+16     	; 0x130c <DIO_u8set_pin_value+0x1e8>

							}
					}
			else
				{
				Loc_u8Error_state=DIO_u8_PIN_VAL_ERROR;
    12fc:	89 e0       	ldi	r24, 0x09	; 9
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	05 c0       	rjmp	.+10     	; 0x130c <DIO_u8set_pin_value+0x1e8>
				}

			}
		else
						{
			Loc_u8Error_state=DIO_u8_PIN_ID_ERROR;
    1302:	86 e0       	ldi	r24, 0x06	; 6
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	02 c0       	rjmp	.+4      	; 0x130c <DIO_u8set_pin_value+0x1e8>


	}
	else
	{
			Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
    1308:	83 e0       	ldi	r24, 0x03	; 3
    130a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Loc_u8Error_state;
    130c:	89 81       	ldd	r24, Y+1	; 0x01
}
    130e:	26 96       	adiw	r28, 0x06	; 6
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <DIO_u8set_pin_dir>:

u8 DIO_u8set_pin_dir(u8 Copy_u8_port_ID,u8 Copy_u8_pin_ID,u8 Copy_u8_pin_dir)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	00 d0       	rcall	.+0      	; 0x1326 <DIO_u8set_pin_dir+0x6>
    1326:	00 d0       	rcall	.+0      	; 0x1328 <DIO_u8set_pin_dir+0x8>
    1328:	00 d0       	rcall	.+0      	; 0x132a <DIO_u8set_pin_dir+0xa>
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	8a 83       	std	Y+2, r24	; 0x02
    1330:	6b 83       	std	Y+3, r22	; 0x03
    1332:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
    1334:	19 82       	std	Y+1, r1	; 0x01
		if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	84 30       	cpi	r24, 0x04	; 4
    133a:	08 f0       	brcs	.+2      	; 0x133e <DIO_u8set_pin_dir+0x1e>
    133c:	e3 c0       	rjmp	.+454    	; 0x1504 <DIO_u8set_pin_dir+0x1e4>
		{
			if((Copy_u8_pin_ID>=MIN_u8_PIN_ID)&&(Copy_u8_pin_ID<=MAX_u8_PIN_ID))
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	88 30       	cpi	r24, 0x08	; 8
    1342:	08 f0       	brcs	.+2      	; 0x1346 <DIO_u8set_pin_dir+0x26>
    1344:	dc c0       	rjmp	.+440    	; 0x14fe <DIO_u8set_pin_dir+0x1de>
			{
				if((Copy_u8_pin_dir==MIN_u8_PIN_DIR)||(Copy_u8_pin_dir==MAX_u8_PIN_DIR))
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	88 23       	and	r24, r24
    134a:	21 f0       	breq	.+8      	; 0x1354 <DIO_u8set_pin_dir+0x34>
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	09 f0       	breq	.+2      	; 0x1354 <DIO_u8set_pin_dir+0x34>
    1352:	d2 c0       	rjmp	.+420    	; 0x14f8 <DIO_u8set_pin_dir+0x1d8>
						{
							switch(Copy_u8_port_ID)
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	3e 83       	std	Y+6, r19	; 0x06
    135c:	2d 83       	std	Y+5, r18	; 0x05
    135e:	8d 81       	ldd	r24, Y+5	; 0x05
    1360:	9e 81       	ldd	r25, Y+6	; 0x06
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	91 05       	cpc	r25, r1
    1366:	09 f4       	brne	.+2      	; 0x136a <DIO_u8set_pin_dir+0x4a>
    1368:	43 c0       	rjmp	.+134    	; 0x13f0 <DIO_u8set_pin_dir+0xd0>
    136a:	2d 81       	ldd	r18, Y+5	; 0x05
    136c:	3e 81       	ldd	r19, Y+6	; 0x06
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	2c f4       	brge	.+10     	; 0x137e <DIO_u8set_pin_dir+0x5e>
    1374:	8d 81       	ldd	r24, Y+5	; 0x05
    1376:	9e 81       	ldd	r25, Y+6	; 0x06
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	71 f0       	breq	.+28     	; 0x1398 <DIO_u8set_pin_dir+0x78>
    137c:	c5 c0       	rjmp	.+394    	; 0x1508 <DIO_u8set_pin_dir+0x1e8>
    137e:	2d 81       	ldd	r18, Y+5	; 0x05
    1380:	3e 81       	ldd	r19, Y+6	; 0x06
    1382:	22 30       	cpi	r18, 0x02	; 2
    1384:	31 05       	cpc	r19, r1
    1386:	09 f4       	brne	.+2      	; 0x138a <DIO_u8set_pin_dir+0x6a>
    1388:	5f c0       	rjmp	.+190    	; 0x1448 <DIO_u8set_pin_dir+0x128>
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	9e 81       	ldd	r25, Y+6	; 0x06
    138e:	83 30       	cpi	r24, 0x03	; 3
    1390:	91 05       	cpc	r25, r1
    1392:	09 f4       	brne	.+2      	; 0x1396 <DIO_u8set_pin_dir+0x76>
    1394:	85 c0       	rjmp	.+266    	; 0x14a0 <DIO_u8set_pin_dir+0x180>
    1396:	b8 c0       	rjmp	.+368    	; 0x1508 <DIO_u8set_pin_dir+0x1e8>
								{
									case GROUP_A:
										Assign_Bit(DIO_U8_DDRA,Copy_u8_pin_ID,Copy_u8_pin_dir);
    1398:	8c 81       	ldd	r24, Y+4	; 0x04
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	a1 f4       	brne	.+40     	; 0x13c6 <DIO_u8set_pin_dir+0xa6>
    139e:	aa e3       	ldi	r26, 0x3A	; 58
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	ea e3       	ldi	r30, 0x3A	; 58
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 2e       	mov	r0, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <DIO_u8set_pin_dir+0x9c>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <DIO_u8set_pin_dir+0x98>
    13c0:	84 2b       	or	r24, r20
    13c2:	8c 93       	st	X, r24
    13c4:	a1 c0       	rjmp	.+322    	; 0x1508 <DIO_u8set_pin_dir+0x1e8>
    13c6:	aa e3       	ldi	r26, 0x3A	; 58
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	ea e3       	ldi	r30, 0x3A	; 58
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <DIO_u8set_pin_dir+0xc4>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <DIO_u8set_pin_dir+0xc0>
    13e8:	80 95       	com	r24
    13ea:	84 23       	and	r24, r20
    13ec:	8c 93       	st	X, r24
    13ee:	8c c0       	rjmp	.+280    	; 0x1508 <DIO_u8set_pin_dir+0x1e8>
										break;
									case GROUP_B:
										Assign_Bit(DIO_U8_DDRB,Copy_u8_pin_ID,Copy_u8_pin_dir);
    13f0:	8c 81       	ldd	r24, Y+4	; 0x04
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	a1 f4       	brne	.+40     	; 0x141e <DIO_u8set_pin_dir+0xfe>
    13f6:	a7 e3       	ldi	r26, 0x37	; 55
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e7 e3       	ldi	r30, 0x37	; 55
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <DIO_u8set_pin_dir+0xf4>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <DIO_u8set_pin_dir+0xf0>
    1418:	84 2b       	or	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	75 c0       	rjmp	.+234    	; 0x1508 <DIO_u8set_pin_dir+0x1e8>
    141e:	a7 e3       	ldi	r26, 0x37	; 55
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e7 e3       	ldi	r30, 0x37	; 55
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_u8set_pin_dir+0x11c>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_u8set_pin_dir+0x118>
    1440:	80 95       	com	r24
    1442:	84 23       	and	r24, r20
    1444:	8c 93       	st	X, r24
    1446:	60 c0       	rjmp	.+192    	; 0x1508 <DIO_u8set_pin_dir+0x1e8>
										break;
									case GROUP_C:
										Assign_Bit(DIO_U8_DDRC,Copy_u8_pin_ID,Copy_u8_pin_dir);
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	a1 f4       	brne	.+40     	; 0x1476 <DIO_u8set_pin_dir+0x156>
    144e:	a4 e3       	ldi	r26, 0x34	; 52
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e4 e3       	ldi	r30, 0x34	; 52
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_u8set_pin_dir+0x14c>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <DIO_u8set_pin_dir+0x148>
    1470:	84 2b       	or	r24, r20
    1472:	8c 93       	st	X, r24
    1474:	49 c0       	rjmp	.+146    	; 0x1508 <DIO_u8set_pin_dir+0x1e8>
    1476:	a4 e3       	ldi	r26, 0x34	; 52
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e4 e3       	ldi	r30, 0x34	; 52
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <DIO_u8set_pin_dir+0x174>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <DIO_u8set_pin_dir+0x170>
    1498:	80 95       	com	r24
    149a:	84 23       	and	r24, r20
    149c:	8c 93       	st	X, r24
    149e:	34 c0       	rjmp	.+104    	; 0x1508 <DIO_u8set_pin_dir+0x1e8>
										break;
									case GROUP_D:
										Assign_Bit(DIO_U8_DDRD,Copy_u8_pin_ID,Copy_u8_pin_dir);
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	a1 f4       	brne	.+40     	; 0x14ce <DIO_u8set_pin_dir+0x1ae>
    14a6:	a1 e3       	ldi	r26, 0x31	; 49
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e1 e3       	ldi	r30, 0x31	; 49
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_u8set_pin_dir+0x1a4>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_u8set_pin_dir+0x1a0>
    14c8:	84 2b       	or	r24, r20
    14ca:	8c 93       	st	X, r24
    14cc:	1d c0       	rjmp	.+58     	; 0x1508 <DIO_u8set_pin_dir+0x1e8>
    14ce:	a1 e3       	ldi	r26, 0x31	; 49
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e1 e3       	ldi	r30, 0x31	; 49
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO_u8set_pin_dir+0x1cc>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <DIO_u8set_pin_dir+0x1c8>
    14f0:	80 95       	com	r24
    14f2:	84 23       	and	r24, r20
    14f4:	8c 93       	st	X, r24
    14f6:	08 c0       	rjmp	.+16     	; 0x1508 <DIO_u8set_pin_dir+0x1e8>

								}
						}
				else
					{
					Loc_u8Error_state=DIO_u8_PIN_DIR_ERROR;
    14f8:	8c e0       	ldi	r24, 0x0C	; 12
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	05 c0       	rjmp	.+10     	; 0x1508 <DIO_u8set_pin_dir+0x1e8>
					}

				}
			else
							{
				Loc_u8Error_state=DIO_u8_PIN_ID_ERROR;
    14fe:	86 e0       	ldi	r24, 0x06	; 6
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <DIO_u8set_pin_dir+0x1e8>


		}
		else
		{
				Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
    1504:	83 e0       	ldi	r24, 0x03	; 3
    1506:	89 83       	std	Y+1, r24	; 0x01
		}

		return Loc_u8Error_state;
    1508:	89 81       	ldd	r24, Y+1	; 0x01

}
    150a:	26 96       	adiw	r28, 0x06	; 6
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <DIO_u8set_port_value>:

u8 DIO_u8set_port_value(u8 Copy_u8_port_ID,u8 Copy_u8_port_val)
{
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	00 d0       	rcall	.+0      	; 0x1522 <DIO_u8set_port_value+0x6>
    1522:	00 d0       	rcall	.+0      	; 0x1524 <DIO_u8set_port_value+0x8>
    1524:	0f 92       	push	r0
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	8a 83       	std	Y+2, r24	; 0x02
    152c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
    152e:	19 82       	std	Y+1, r1	; 0x01
			if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	84 30       	cpi	r24, 0x04	; 4
    1534:	e0 f5       	brcc	.+120    	; 0x15ae <DIO_u8set_port_value+0x92>
			{
				//solution  for this problem
					if((Copy_u8_port_val==MIN_u8_PORT_VAL)||(Copy_u8_port_val==MAX_u8_PORT_VAL))
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	88 23       	and	r24, r24
    153a:	19 f0       	breq	.+6      	; 0x1542 <DIO_u8set_port_value+0x26>
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	8f 3f       	cpi	r24, 0xFF	; 255
    1540:	99 f5       	brne	.+102    	; 0x15a8 <DIO_u8set_port_value+0x8c>
							{
								switch(Copy_u8_port_ID)
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	3d 83       	std	Y+5, r19	; 0x05
    154a:	2c 83       	std	Y+4, r18	; 0x04
    154c:	8c 81       	ldd	r24, Y+4	; 0x04
    154e:	9d 81       	ldd	r25, Y+5	; 0x05
    1550:	81 30       	cpi	r24, 0x01	; 1
    1552:	91 05       	cpc	r25, r1
    1554:	d1 f0       	breq	.+52     	; 0x158a <DIO_u8set_port_value+0x6e>
    1556:	2c 81       	ldd	r18, Y+4	; 0x04
    1558:	3d 81       	ldd	r19, Y+5	; 0x05
    155a:	22 30       	cpi	r18, 0x02	; 2
    155c:	31 05       	cpc	r19, r1
    155e:	2c f4       	brge	.+10     	; 0x156a <DIO_u8set_port_value+0x4e>
    1560:	8c 81       	ldd	r24, Y+4	; 0x04
    1562:	9d 81       	ldd	r25, Y+5	; 0x05
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	61 f0       	breq	.+24     	; 0x1580 <DIO_u8set_port_value+0x64>
    1568:	24 c0       	rjmp	.+72     	; 0x15b2 <DIO_u8set_port_value+0x96>
    156a:	2c 81       	ldd	r18, Y+4	; 0x04
    156c:	3d 81       	ldd	r19, Y+5	; 0x05
    156e:	22 30       	cpi	r18, 0x02	; 2
    1570:	31 05       	cpc	r19, r1
    1572:	81 f0       	breq	.+32     	; 0x1594 <DIO_u8set_port_value+0x78>
    1574:	8c 81       	ldd	r24, Y+4	; 0x04
    1576:	9d 81       	ldd	r25, Y+5	; 0x05
    1578:	83 30       	cpi	r24, 0x03	; 3
    157a:	91 05       	cpc	r25, r1
    157c:	81 f0       	breq	.+32     	; 0x159e <DIO_u8set_port_value+0x82>
    157e:	19 c0       	rjmp	.+50     	; 0x15b2 <DIO_u8set_port_value+0x96>
									{
										case GROUP_A:
											DIO_U8_PORTA=Copy_u8_port_val;
    1580:	eb e3       	ldi	r30, 0x3B	; 59
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	80 83       	st	Z, r24
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <DIO_u8set_port_value+0x96>
											//Assign_Bit(DIO_U8_PORTA,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_B:
											DIO_U8_PORTB=Copy_u8_port_val;
    158a:	e8 e3       	ldi	r30, 0x38	; 56
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	80 83       	st	Z, r24
    1592:	0f c0       	rjmp	.+30     	; 0x15b2 <DIO_u8set_port_value+0x96>
											//Assign_Bit(DIO_U8_PORTB,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_C:
											DIO_U8_PORTC=Copy_u8_port_val;
    1594:	e5 e3       	ldi	r30, 0x35	; 53
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	80 83       	st	Z, r24
    159c:	0a c0       	rjmp	.+20     	; 0x15b2 <DIO_u8set_port_value+0x96>
											//Assign_Bit(DIO_U8_PORTC,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_D:
											DIO_U8_PORTD=Copy_u8_port_val;
    159e:	e2 e3       	ldi	r30, 0x32	; 50
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	80 83       	st	Z, r24
    15a6:	05 c0       	rjmp	.+10     	; 0x15b2 <DIO_u8set_port_value+0x96>

									}
							}
					else
						{
						Loc_u8Error_state=DIO_u8_PORT_VAL_ERROR;
    15a8:	8f e0       	ldi	r24, 0x0F	; 15
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <DIO_u8set_port_value+0x96>

			}

			else
			{
					Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
    15ae:	83 e0       	ldi	r24, 0x03	; 3
    15b0:	89 83       	std	Y+1, r24	; 0x01
			}

			return Loc_u8Error_state;
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <DIO_u8set_port_dir>:

u8 DIO_u8set_port_dir(u8 Copy_u8_port_ID,u8 Copy_u8_port_dir)
{
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <DIO_u8set_port_dir+0x6>
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <DIO_u8set_port_dir+0x8>
    15cc:	0f 92       	push	r0
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	8a 83       	std	Y+2, r24	; 0x02
    15d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
    15d6:	19 82       	std	Y+1, r1	; 0x01
			if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	84 30       	cpi	r24, 0x04	; 4
    15dc:	e0 f5       	brcc	.+120    	; 0x1656 <DIO_u8set_port_dir+0x92>
			{
				//solution  for this problem
					if((Copy_u8_port_dir==MIN_u8_PORT_DIR)||(Copy_u8_port_dir==MAX_u8_PORT_DIR))
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	88 23       	and	r24, r24
    15e2:	19 f0       	breq	.+6      	; 0x15ea <DIO_u8set_port_dir+0x26>
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	8f 3f       	cpi	r24, 0xFF	; 255
    15e8:	99 f5       	brne	.+102    	; 0x1650 <DIO_u8set_port_dir+0x8c>
							{
								switch(Copy_u8_port_ID)
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	3d 83       	std	Y+5, r19	; 0x05
    15f2:	2c 83       	std	Y+4, r18	; 0x04
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	9d 81       	ldd	r25, Y+5	; 0x05
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	91 05       	cpc	r25, r1
    15fc:	d1 f0       	breq	.+52     	; 0x1632 <DIO_u8set_port_dir+0x6e>
    15fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1600:	3d 81       	ldd	r19, Y+5	; 0x05
    1602:	22 30       	cpi	r18, 0x02	; 2
    1604:	31 05       	cpc	r19, r1
    1606:	2c f4       	brge	.+10     	; 0x1612 <DIO_u8set_port_dir+0x4e>
    1608:	8c 81       	ldd	r24, Y+4	; 0x04
    160a:	9d 81       	ldd	r25, Y+5	; 0x05
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	61 f0       	breq	.+24     	; 0x1628 <DIO_u8set_port_dir+0x64>
    1610:	24 c0       	rjmp	.+72     	; 0x165a <DIO_u8set_port_dir+0x96>
    1612:	2c 81       	ldd	r18, Y+4	; 0x04
    1614:	3d 81       	ldd	r19, Y+5	; 0x05
    1616:	22 30       	cpi	r18, 0x02	; 2
    1618:	31 05       	cpc	r19, r1
    161a:	81 f0       	breq	.+32     	; 0x163c <DIO_u8set_port_dir+0x78>
    161c:	8c 81       	ldd	r24, Y+4	; 0x04
    161e:	9d 81       	ldd	r25, Y+5	; 0x05
    1620:	83 30       	cpi	r24, 0x03	; 3
    1622:	91 05       	cpc	r25, r1
    1624:	81 f0       	breq	.+32     	; 0x1646 <DIO_u8set_port_dir+0x82>
    1626:	19 c0       	rjmp	.+50     	; 0x165a <DIO_u8set_port_dir+0x96>
									{
										case GROUP_A:
											DIO_U8_DDRA=Copy_u8_port_dir;
    1628:	ea e3       	ldi	r30, 0x3A	; 58
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	80 83       	st	Z, r24
    1630:	14 c0       	rjmp	.+40     	; 0x165a <DIO_u8set_port_dir+0x96>
											//Assign_Bit(DIO_U8_PORTA,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_B:
											DIO_U8_DDRB=Copy_u8_port_dir;
    1632:	e7 e3       	ldi	r30, 0x37	; 55
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	80 83       	st	Z, r24
    163a:	0f c0       	rjmp	.+30     	; 0x165a <DIO_u8set_port_dir+0x96>
											//Assign_Bit(DIO_U8_PORTB,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_C:
											DIO_U8_DDRC=Copy_u8_port_dir;
    163c:	e4 e3       	ldi	r30, 0x34	; 52
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	80 83       	st	Z, r24
    1644:	0a c0       	rjmp	.+20     	; 0x165a <DIO_u8set_port_dir+0x96>
											//Assign_Bit(DIO_U8_PORTC,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_D:
											DIO_U8_DDRD=Copy_u8_port_dir;
    1646:	e1 e3       	ldi	r30, 0x31	; 49
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	80 83       	st	Z, r24
    164e:	05 c0       	rjmp	.+10     	; 0x165a <DIO_u8set_port_dir+0x96>

									}
							}
					else
						{
						Loc_u8Error_state=DIO_u8_PORT_DIR_ERROR;
    1650:	82 e1       	ldi	r24, 0x12	; 18
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	02 c0       	rjmp	.+4      	; 0x165a <DIO_u8set_port_dir+0x96>

			}

			else
			{
					Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
    1656:	83 e0       	ldi	r24, 0x03	; 3
    1658:	89 83       	std	Y+1, r24	; 0x01
			}

			return Loc_u8Error_state;
    165a:	89 81       	ldd	r24, Y+1	; 0x01
}
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <DIO_u8get_pin_value>:

u8 DIO_u8get_pin_value(u8 Copy_u8_port_ID,u8 Copy_u8_pin_ID,u8 *Copy_u8_pin_val)
{
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	27 97       	sbiw	r28, 0x07	; 7
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	8a 83       	std	Y+2, r24	; 0x02
    1682:	6b 83       	std	Y+3, r22	; 0x03
    1684:	5d 83       	std	Y+5, r21	; 0x05
    1686:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
    1688:	19 82       	std	Y+1, r1	; 0x01
		if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	84 30       	cpi	r24, 0x04	; 4
    168e:	08 f0       	brcs	.+2      	; 0x1692 <DIO_u8get_pin_value+0x26>
    1690:	78 c0       	rjmp	.+240    	; 0x1782 <DIO_u8get_pin_value+0x116>
		{
			if((Copy_u8_pin_ID>=MIN_u8_PIN_ID)&&(Copy_u8_pin_ID<=MAX_u8_PIN_ID))
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	88 30       	cpi	r24, 0x08	; 8
    1696:	08 f0       	brcs	.+2      	; 0x169a <DIO_u8get_pin_value+0x2e>
    1698:	71 c0       	rjmp	.+226    	; 0x177c <DIO_u8get_pin_value+0x110>
			{

							switch(Copy_u8_port_ID)
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	3f 83       	std	Y+7, r19	; 0x07
    16a2:	2e 83       	std	Y+6, r18	; 0x06
    16a4:	4e 81       	ldd	r20, Y+6	; 0x06
    16a6:	5f 81       	ldd	r21, Y+7	; 0x07
    16a8:	41 30       	cpi	r20, 0x01	; 1
    16aa:	51 05       	cpc	r21, r1
    16ac:	59 f1       	breq	.+86     	; 0x1704 <DIO_u8get_pin_value+0x98>
    16ae:	8e 81       	ldd	r24, Y+6	; 0x06
    16b0:	9f 81       	ldd	r25, Y+7	; 0x07
    16b2:	82 30       	cpi	r24, 0x02	; 2
    16b4:	91 05       	cpc	r25, r1
    16b6:	34 f4       	brge	.+12     	; 0x16c4 <DIO_u8get_pin_value+0x58>
    16b8:	2e 81       	ldd	r18, Y+6	; 0x06
    16ba:	3f 81       	ldd	r19, Y+7	; 0x07
    16bc:	21 15       	cp	r18, r1
    16be:	31 05       	cpc	r19, r1
    16c0:	69 f0       	breq	.+26     	; 0x16dc <DIO_u8get_pin_value+0x70>
    16c2:	61 c0       	rjmp	.+194    	; 0x1786 <DIO_u8get_pin_value+0x11a>
    16c4:	4e 81       	ldd	r20, Y+6	; 0x06
    16c6:	5f 81       	ldd	r21, Y+7	; 0x07
    16c8:	42 30       	cpi	r20, 0x02	; 2
    16ca:	51 05       	cpc	r21, r1
    16cc:	79 f1       	breq	.+94     	; 0x172c <DIO_u8get_pin_value+0xc0>
    16ce:	8e 81       	ldd	r24, Y+6	; 0x06
    16d0:	9f 81       	ldd	r25, Y+7	; 0x07
    16d2:	83 30       	cpi	r24, 0x03	; 3
    16d4:	91 05       	cpc	r25, r1
    16d6:	09 f4       	brne	.+2      	; 0x16da <DIO_u8get_pin_value+0x6e>
    16d8:	3d c0       	rjmp	.+122    	; 0x1754 <DIO_u8get_pin_value+0xe8>
    16da:	55 c0       	rjmp	.+170    	; 0x1786 <DIO_u8get_pin_value+0x11a>
								{
									case GROUP_A:
										*Copy_u8_pin_val = get_bit(DIO_U8_PINA,Copy_u8_pin_ID);
    16dc:	e9 e3       	ldi	r30, 0x39	; 57
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	88 2f       	mov	r24, r24
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	a9 01       	movw	r20, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <DIO_u8get_pin_value+0x88>
    16f0:	55 95       	asr	r21
    16f2:	47 95       	ror	r20
    16f4:	8a 95       	dec	r24
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <DIO_u8get_pin_value+0x84>
    16f8:	ca 01       	movw	r24, r20
    16fa:	81 70       	andi	r24, 0x01	; 1
    16fc:	ec 81       	ldd	r30, Y+4	; 0x04
    16fe:	fd 81       	ldd	r31, Y+5	; 0x05
    1700:	80 83       	st	Z, r24
    1702:	41 c0       	rjmp	.+130    	; 0x1786 <DIO_u8get_pin_value+0x11a>
										break;
									case GROUP_B:
										*Copy_u8_pin_val = get_bit(DIO_U8_PINB,Copy_u8_pin_ID);
    1704:	e6 e3       	ldi	r30, 0x36	; 54
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	a9 01       	movw	r20, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <DIO_u8get_pin_value+0xb0>
    1718:	55 95       	asr	r21
    171a:	47 95       	ror	r20
    171c:	8a 95       	dec	r24
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <DIO_u8get_pin_value+0xac>
    1720:	ca 01       	movw	r24, r20
    1722:	81 70       	andi	r24, 0x01	; 1
    1724:	ec 81       	ldd	r30, Y+4	; 0x04
    1726:	fd 81       	ldd	r31, Y+5	; 0x05
    1728:	80 83       	st	Z, r24
    172a:	2d c0       	rjmp	.+90     	; 0x1786 <DIO_u8get_pin_value+0x11a>
										break;
									case GROUP_C:
										*Copy_u8_pin_val = get_bit(DIO_U8_PINC,Copy_u8_pin_ID);
    172c:	e3 e3       	ldi	r30, 0x33	; 51
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	88 2f       	mov	r24, r24
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	a9 01       	movw	r20, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <DIO_u8get_pin_value+0xd8>
    1740:	55 95       	asr	r21
    1742:	47 95       	ror	r20
    1744:	8a 95       	dec	r24
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <DIO_u8get_pin_value+0xd4>
    1748:	ca 01       	movw	r24, r20
    174a:	81 70       	andi	r24, 0x01	; 1
    174c:	ec 81       	ldd	r30, Y+4	; 0x04
    174e:	fd 81       	ldd	r31, Y+5	; 0x05
    1750:	80 83       	st	Z, r24
    1752:	19 c0       	rjmp	.+50     	; 0x1786 <DIO_u8get_pin_value+0x11a>
										break;
									case GROUP_D:
										*Copy_u8_pin_val = get_bit(DIO_U8_PIND,Copy_u8_pin_ID);
    1754:	e0 e3       	ldi	r30, 0x30	; 48
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a9 01       	movw	r20, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <DIO_u8get_pin_value+0x100>
    1768:	55 95       	asr	r21
    176a:	47 95       	ror	r20
    176c:	8a 95       	dec	r24
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <DIO_u8get_pin_value+0xfc>
    1770:	ca 01       	movw	r24, r20
    1772:	81 70       	andi	r24, 0x01	; 1
    1774:	ec 81       	ldd	r30, Y+4	; 0x04
    1776:	fd 81       	ldd	r31, Y+5	; 0x05
    1778:	80 83       	st	Z, r24
    177a:	05 c0       	rjmp	.+10     	; 0x1786 <DIO_u8get_pin_value+0x11a>


				}
			else
							{
				Loc_u8Error_state=DIO_u8_PIN_ID_ERROR;
    177c:	86 e0       	ldi	r24, 0x06	; 6
    177e:	89 83       	std	Y+1, r24	; 0x01
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <DIO_u8get_pin_value+0x11a>


		}
		else
		{
				Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
    1782:	83 e0       	ldi	r24, 0x03	; 3
    1784:	89 83       	std	Y+1, r24	; 0x01
		}

		return Loc_u8Error_state;
    1786:	89 81       	ldd	r24, Y+1	; 0x01
}
    1788:	27 96       	adiw	r28, 0x07	; 7
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	08 95       	ret

0000179a <DIO_u8Get_port_value>:

u8 DIO_u8Get_port_value(u8 Copy_u8_port_ID,u8 *Copy_u8_port_val)
{
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <DIO_u8Get_port_value+0x6>
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <DIO_u8Get_port_value+0x8>
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <DIO_u8Get_port_value+0xa>
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	8a 83       	std	Y+2, r24	; 0x02
    17aa:	7c 83       	std	Y+4, r23	; 0x04
    17ac:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
    17ae:	19 82       	std	Y+1, r1	; 0x01
			if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	84 30       	cpi	r24, 0x04	; 4
    17b4:	d8 f5       	brcc	.+118    	; 0x182c <DIO_u8Get_port_value+0x92>
			{

								switch(Copy_u8_port_ID)
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	3e 83       	std	Y+6, r19	; 0x06
    17be:	2d 83       	std	Y+5, r18	; 0x05
    17c0:	8d 81       	ldd	r24, Y+5	; 0x05
    17c2:	9e 81       	ldd	r25, Y+6	; 0x06
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	91 05       	cpc	r25, r1
    17c8:	e1 f0       	breq	.+56     	; 0x1802 <DIO_u8Get_port_value+0x68>
    17ca:	2d 81       	ldd	r18, Y+5	; 0x05
    17cc:	3e 81       	ldd	r19, Y+6	; 0x06
    17ce:	22 30       	cpi	r18, 0x02	; 2
    17d0:	31 05       	cpc	r19, r1
    17d2:	2c f4       	brge	.+10     	; 0x17de <DIO_u8Get_port_value+0x44>
    17d4:	8d 81       	ldd	r24, Y+5	; 0x05
    17d6:	9e 81       	ldd	r25, Y+6	; 0x06
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	61 f0       	breq	.+24     	; 0x17f4 <DIO_u8Get_port_value+0x5a>
    17dc:	29 c0       	rjmp	.+82     	; 0x1830 <DIO_u8Get_port_value+0x96>
    17de:	2d 81       	ldd	r18, Y+5	; 0x05
    17e0:	3e 81       	ldd	r19, Y+6	; 0x06
    17e2:	22 30       	cpi	r18, 0x02	; 2
    17e4:	31 05       	cpc	r19, r1
    17e6:	a1 f0       	breq	.+40     	; 0x1810 <DIO_u8Get_port_value+0x76>
    17e8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ea:	9e 81       	ldd	r25, Y+6	; 0x06
    17ec:	83 30       	cpi	r24, 0x03	; 3
    17ee:	91 05       	cpc	r25, r1
    17f0:	b1 f0       	breq	.+44     	; 0x181e <DIO_u8Get_port_value+0x84>
    17f2:	1e c0       	rjmp	.+60     	; 0x1830 <DIO_u8Get_port_value+0x96>
									{
										case GROUP_A:
											*Copy_u8_port_val = DIO_U8_PINA;
    17f4:	e9 e3       	ldi	r30, 0x39	; 57
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	eb 81       	ldd	r30, Y+3	; 0x03
    17fc:	fc 81       	ldd	r31, Y+4	; 0x04
    17fe:	80 83       	st	Z, r24
    1800:	17 c0       	rjmp	.+46     	; 0x1830 <DIO_u8Get_port_value+0x96>
											break;
										case GROUP_B:
											*Copy_u8_port_val = DIO_U8_PINB;
    1802:	e6 e3       	ldi	r30, 0x36	; 54
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	eb 81       	ldd	r30, Y+3	; 0x03
    180a:	fc 81       	ldd	r31, Y+4	; 0x04
    180c:	80 83       	st	Z, r24
    180e:	10 c0       	rjmp	.+32     	; 0x1830 <DIO_u8Get_port_value+0x96>
											break;
										case GROUP_C:
											*Copy_u8_port_val = DIO_U8_PINC;
    1810:	e3 e3       	ldi	r30, 0x33	; 51
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	eb 81       	ldd	r30, Y+3	; 0x03
    1818:	fc 81       	ldd	r31, Y+4	; 0x04
    181a:	80 83       	st	Z, r24
    181c:	09 c0       	rjmp	.+18     	; 0x1830 <DIO_u8Get_port_value+0x96>
											break;
										case GROUP_D:
											*Copy_u8_port_val =DIO_U8_PIND;
    181e:	e0 e3       	ldi	r30, 0x30	; 48
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	eb 81       	ldd	r30, Y+3	; 0x03
    1826:	fc 81       	ldd	r31, Y+4	; 0x04
    1828:	80 83       	st	Z, r24
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <DIO_u8Get_port_value+0x96>

			}

			else
			{
					Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
    182c:	83 e0       	ldi	r24, 0x03	; 3
    182e:	89 83       	std	Y+1, r24	; 0x01
			}

			return Loc_u8Error_state;
    1830:	89 81       	ldd	r24, Y+1	; 0x01

}
    1832:	26 96       	adiw	r28, 0x06	; 6
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <LCD_void_Init>:
#include "LCD_PRIVATE.h"
#include "LCD_CONFIG.h"
#include "LCD_INTERFACE.h"

void LCD_void_Init(void)
{
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	ca 55       	subi	r28, 0x5A	; 90
    1852:	d0 40       	sbci	r29, 0x00	; 0
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
#if LCD_3PIN_IN_CTRL_PORT_IN_4PIN_MODE==LCD_FIRST_3PIN_IN_CTRL_PORT_IN_4PIN_MODE
	DIO_u8set_pin_dir(LCD_u8_CTRL_PORT,LCD_u8_DATA_PIN_0,DIO_u8_OUTPUT);
	DIO_u8set_pin_dir(LCD_u8_CTRL_PORT,LCD_u8_DATA_PIN_1,DIO_u8_OUTPUT);
	DIO_u8set_pin_dir(LCD_u8_CTRL_PORT,LCD_u8_DATA_PIN_2,DIO_u8_OUTPUT);
#elif LCD_3PIN_IN_CTRL_PORT_IN_4PIN_MODE==LCD_LAST_3PIN_IN_CTRL_PORT_IN_4PIN_MODE
	DIO_u8set_pin_dir(LCD_u8_CTRL_PORT,LCD_u8_DATA_PIN_5,DIO_u8_OUTPUT);
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	65 e0       	ldi	r22, 0x05	; 5
    1862:	41 e0       	ldi	r20, 0x01	; 1
    1864:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_u8set_pin_dir>
	DIO_u8set_pin_dir(LCD_u8_CTRL_PORT,LCD_u8_DATA_PIN_6,DIO_u8_OUTPUT);
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	66 e0       	ldi	r22, 0x06	; 6
    186c:	41 e0       	ldi	r20, 0x01	; 1
    186e:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_u8set_pin_dir>
	DIO_u8set_pin_dir(LCD_u8_CTRL_PORT,LCD_u8_DATA_PIN_7,DIO_u8_OUTPUT);
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	67 e0       	ldi	r22, 0x07	; 7
    1876:	41 e0       	ldi	r20, 0x01	; 1
    1878:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_u8set_pin_dir>
#endif

#if LCD_4PIN_IN_DATA_PORT_IN_4PIN_MODE==LCD_FIRST_4PIN_IN_DATA_PORT_IN_4PIN_MODE
	DIO_u8set_pin_dir(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_0,DIO_u8_OUTPUT);
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	60 e0       	ldi	r22, 0x00	; 0
    1880:	41 e0       	ldi	r20, 0x01	; 1
    1882:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_u8set_pin_dir>
	DIO_u8set_pin_dir(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_1,DIO_u8_OUTPUT);
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	61 e0       	ldi	r22, 0x01	; 1
    188a:	41 e0       	ldi	r20, 0x01	; 1
    188c:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_u8set_pin_dir>
	DIO_u8set_pin_dir(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_2,DIO_u8_OUTPUT);
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	62 e0       	ldi	r22, 0x02	; 2
    1894:	41 e0       	ldi	r20, 0x01	; 1
    1896:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_u8set_pin_dir>
	DIO_u8set_pin_dir(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_3,DIO_u8_OUTPUT);
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	63 e0       	ldi	r22, 0x03	; 3
    189e:	41 e0       	ldi	r20, 0x01	; 1
    18a0:	0e 94 90 09 	call	0x1320	; 0x1320 <DIO_u8set_pin_dir>
    18a4:	fe 01       	movw	r30, r28
    18a6:	e9 5a       	subi	r30, 0xA9	; 169
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	a0 e2       	ldi	r26, 0x20	; 32
    18b0:	b2 e4       	ldi	r27, 0x42	; 66
    18b2:	80 83       	st	Z, r24
    18b4:	91 83       	std	Z+1, r25	; 0x01
    18b6:	a2 83       	std	Z+2, r26	; 0x02
    18b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ba:	8e 01       	movw	r16, r28
    18bc:	0d 5a       	subi	r16, 0xAD	; 173
    18be:	1f 4f       	sbci	r17, 0xFF	; 255
    18c0:	fe 01       	movw	r30, r28
    18c2:	e9 5a       	subi	r30, 0xA9	; 169
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	60 81       	ld	r22, Z
    18c8:	71 81       	ldd	r23, Z+1	; 0x01
    18ca:	82 81       	ldd	r24, Z+2	; 0x02
    18cc:	93 81       	ldd	r25, Z+3	; 0x03
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	4a ef       	ldi	r20, 0xFA	; 250
    18d4:	54 e4       	ldi	r21, 0x44	; 68
    18d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	f8 01       	movw	r30, r16
    18e0:	80 83       	st	Z, r24
    18e2:	91 83       	std	Z+1, r25	; 0x01
    18e4:	a2 83       	std	Z+2, r26	; 0x02
    18e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18e8:	fe 01       	movw	r30, r28
    18ea:	ed 5a       	subi	r30, 0xAD	; 173
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	60 81       	ld	r22, Z
    18f0:	71 81       	ldd	r23, Z+1	; 0x01
    18f2:	82 81       	ldd	r24, Z+2	; 0x02
    18f4:	93 81       	ldd	r25, Z+3	; 0x03
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e8       	ldi	r20, 0x80	; 128
    18fc:	5f e3       	ldi	r21, 0x3F	; 63
    18fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1902:	88 23       	and	r24, r24
    1904:	44 f4       	brge	.+16     	; 0x1916 <LCD_void_Init+0xd2>
		__ticks = 1;
    1906:	fe 01       	movw	r30, r28
    1908:	ef 5a       	subi	r30, 0xAF	; 175
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	91 83       	std	Z+1, r25	; 0x01
    1912:	80 83       	st	Z, r24
    1914:	64 c0       	rjmp	.+200    	; 0x19de <LCD_void_Init+0x19a>
	else if (__tmp > 65535)
    1916:	fe 01       	movw	r30, r28
    1918:	ed 5a       	subi	r30, 0xAD	; 173
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	60 81       	ld	r22, Z
    191e:	71 81       	ldd	r23, Z+1	; 0x01
    1920:	82 81       	ldd	r24, Z+2	; 0x02
    1922:	93 81       	ldd	r25, Z+3	; 0x03
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	3f ef       	ldi	r19, 0xFF	; 255
    1928:	4f e7       	ldi	r20, 0x7F	; 127
    192a:	57 e4       	ldi	r21, 0x47	; 71
    192c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1930:	18 16       	cp	r1, r24
    1932:	0c f0       	brlt	.+2      	; 0x1936 <LCD_void_Init+0xf2>
    1934:	43 c0       	rjmp	.+134    	; 0x19bc <LCD_void_Init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1936:	fe 01       	movw	r30, r28
    1938:	e9 5a       	subi	r30, 0xA9	; 169
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	60 81       	ld	r22, Z
    193e:	71 81       	ldd	r23, Z+1	; 0x01
    1940:	82 81       	ldd	r24, Z+2	; 0x02
    1942:	93 81       	ldd	r25, Z+3	; 0x03
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e2       	ldi	r20, 0x20	; 32
    194a:	51 e4       	ldi	r21, 0x41	; 65
    194c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	8e 01       	movw	r16, r28
    1956:	0f 5a       	subi	r16, 0xAF	; 175
    1958:	1f 4f       	sbci	r17, 0xFF	; 255
    195a:	bc 01       	movw	r22, r24
    195c:	cd 01       	movw	r24, r26
    195e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	f8 01       	movw	r30, r16
    1968:	91 83       	std	Z+1, r25	; 0x01
    196a:	80 83       	st	Z, r24
    196c:	1f c0       	rjmp	.+62     	; 0x19ac <LCD_void_Init+0x168>
    196e:	fe 01       	movw	r30, r28
    1970:	e1 5b       	subi	r30, 0xB1	; 177
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	88 ec       	ldi	r24, 0xC8	; 200
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	91 83       	std	Z+1, r25	; 0x01
    197a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    197c:	fe 01       	movw	r30, r28
    197e:	e1 5b       	subi	r30, 0xB1	; 177
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	80 81       	ld	r24, Z
    1984:	91 81       	ldd	r25, Z+1	; 0x01
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	f1 f7       	brne	.-4      	; 0x1986 <LCD_void_Init+0x142>
    198a:	fe 01       	movw	r30, r28
    198c:	e1 5b       	subi	r30, 0xB1	; 177
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	91 83       	std	Z+1, r25	; 0x01
    1992:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1994:	de 01       	movw	r26, r28
    1996:	af 5a       	subi	r26, 0xAF	; 175
    1998:	bf 4f       	sbci	r27, 0xFF	; 255
    199a:	fe 01       	movw	r30, r28
    199c:	ef 5a       	subi	r30, 0xAF	; 175
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	80 81       	ld	r24, Z
    19a2:	91 81       	ldd	r25, Z+1	; 0x01
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	11 96       	adiw	r26, 0x01	; 1
    19a8:	9c 93       	st	X, r25
    19aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ac:	fe 01       	movw	r30, r28
    19ae:	ef 5a       	subi	r30, 0xAF	; 175
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	80 81       	ld	r24, Z
    19b4:	91 81       	ldd	r25, Z+1	; 0x01
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	d1 f6       	brne	.-76     	; 0x196e <LCD_void_Init+0x12a>
    19ba:	27 c0       	rjmp	.+78     	; 0x1a0a <LCD_void_Init+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19bc:	8e 01       	movw	r16, r28
    19be:	0f 5a       	subi	r16, 0xAF	; 175
    19c0:	1f 4f       	sbci	r17, 0xFF	; 255
    19c2:	fe 01       	movw	r30, r28
    19c4:	ed 5a       	subi	r30, 0xAD	; 173
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	60 81       	ld	r22, Z
    19ca:	71 81       	ldd	r23, Z+1	; 0x01
    19cc:	82 81       	ldd	r24, Z+2	; 0x02
    19ce:	93 81       	ldd	r25, Z+3	; 0x03
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	f8 01       	movw	r30, r16
    19da:	91 83       	std	Z+1, r25	; 0x01
    19dc:	80 83       	st	Z, r24
    19de:	de 01       	movw	r26, r28
    19e0:	a3 5b       	subi	r26, 0xB3	; 179
    19e2:	bf 4f       	sbci	r27, 0xFF	; 255
    19e4:	fe 01       	movw	r30, r28
    19e6:	ef 5a       	subi	r30, 0xAF	; 175
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	80 81       	ld	r24, Z
    19ec:	91 81       	ldd	r25, Z+1	; 0x01
    19ee:	8d 93       	st	X+, r24
    19f0:	9c 93       	st	X, r25
    19f2:	fe 01       	movw	r30, r28
    19f4:	e3 5b       	subi	r30, 0xB3	; 179
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	80 81       	ld	r24, Z
    19fa:	91 81       	ldd	r25, Z+1	; 0x01
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <LCD_void_Init+0x1b8>
    1a00:	fe 01       	movw	r30, r28
    1a02:	e3 5b       	subi	r30, 0xB3	; 179
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	91 83       	std	Z+1, r25	; 0x01
    1a08:	80 83       	st	Z, r24
	DIO_u8set_pin_dir(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_7,DIO_u8_OUTPUT);
#endif

	_delay_ms(40);

	LCD_void_Write_Cmd(0x02);
    1a0a:	82 e0       	ldi	r24, 0x02	; 2
    1a0c:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_void_Write_Cmd>
	LCD_void_Write_Cmd(0x28);// N:1 two line   //N:0  one line
    1a10:	88 e2       	ldi	r24, 0x28	; 40
    1a12:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_void_Write_Cmd>
    1a16:	fe 01       	movw	r30, r28
    1a18:	e7 5b       	subi	r30, 0xB7	; 183
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	a8 e4       	ldi	r26, 0x48	; 72
    1a22:	b2 e4       	ldi	r27, 0x42	; 66
    1a24:	80 83       	st	Z, r24
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	a2 83       	std	Z+2, r26	; 0x02
    1a2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a2c:	8e 01       	movw	r16, r28
    1a2e:	0b 5b       	subi	r16, 0xBB	; 187
    1a30:	1f 4f       	sbci	r17, 0xFF	; 255
    1a32:	fe 01       	movw	r30, r28
    1a34:	e7 5b       	subi	r30, 0xB7	; 183
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	82 81       	ldd	r24, Z+2	; 0x02
    1a3e:	93 81       	ldd	r25, Z+3	; 0x03
    1a40:	2b ea       	ldi	r18, 0xAB	; 171
    1a42:	3a ea       	ldi	r19, 0xAA	; 170
    1a44:	4a e2       	ldi	r20, 0x2A	; 42
    1a46:	50 e4       	ldi	r21, 0x40	; 64
    1a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	f8 01       	movw	r30, r16
    1a52:	80 83       	st	Z, r24
    1a54:	91 83       	std	Z+1, r25	; 0x01
    1a56:	a2 83       	std	Z+2, r26	; 0x02
    1a58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	eb 5b       	subi	r30, 0xBB	; 187
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	60 81       	ld	r22, Z
    1a62:	71 81       	ldd	r23, Z+1	; 0x01
    1a64:	82 81       	ldd	r24, Z+2	; 0x02
    1a66:	93 81       	ldd	r25, Z+3	; 0x03
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e8       	ldi	r20, 0x80	; 128
    1a6e:	5f e3       	ldi	r21, 0x3F	; 63
    1a70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a74:	88 23       	and	r24, r24
    1a76:	34 f4       	brge	.+12     	; 0x1a84 <LCD_void_Init+0x240>
		__ticks = 1;
    1a78:	fe 01       	movw	r30, r28
    1a7a:	ec 5b       	subi	r30, 0xBC	; 188
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	80 83       	st	Z, r24
    1a82:	a7 c0       	rjmp	.+334    	; 0x1bd2 <LCD_void_Init+0x38e>
	else if (__tmp > 255)
    1a84:	fe 01       	movw	r30, r28
    1a86:	eb 5b       	subi	r30, 0xBB	; 187
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	60 81       	ld	r22, Z
    1a8c:	71 81       	ldd	r23, Z+1	; 0x01
    1a8e:	82 81       	ldd	r24, Z+2	; 0x02
    1a90:	93 81       	ldd	r25, Z+3	; 0x03
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	4f e7       	ldi	r20, 0x7F	; 127
    1a98:	53 e4       	ldi	r21, 0x43	; 67
    1a9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a9e:	18 16       	cp	r1, r24
    1aa0:	0c f0       	brlt	.+2      	; 0x1aa4 <LCD_void_Init+0x260>
    1aa2:	87 c0       	rjmp	.+270    	; 0x1bb2 <LCD_void_Init+0x36e>
	{
		_delay_ms(__us / 1000.0);
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	e7 5b       	subi	r30, 0xB7	; 183
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	60 81       	ld	r22, Z
    1aac:	71 81       	ldd	r23, Z+1	; 0x01
    1aae:	82 81       	ldd	r24, Z+2	; 0x02
    1ab0:	93 81       	ldd	r25, Z+3	; 0x03
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	4a e7       	ldi	r20, 0x7A	; 122
    1ab8:	54 e4       	ldi	r21, 0x44	; 68
    1aba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e0 5c       	subi	r30, 0xC0	; 192
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	80 83       	st	Z, r24
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	a2 83       	std	Z+2, r26	; 0x02
    1ace:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e0 5c       	subi	r30, 0xC0	; 192
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	60 81       	ld	r22, Z
    1ad8:	71 81       	ldd	r23, Z+1	; 0x01
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	4a ef       	ldi	r20, 0xFA	; 250
    1ae4:	54 e4       	ldi	r21, 0x44	; 68
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	8c af       	std	Y+60, r24	; 0x3c
    1af0:	9d af       	std	Y+61, r25	; 0x3d
    1af2:	ae af       	std	Y+62, r26	; 0x3e
    1af4:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    1af6:	6c ad       	ldd	r22, Y+60	; 0x3c
    1af8:	7d ad       	ldd	r23, Y+61	; 0x3d
    1afa:	8e ad       	ldd	r24, Y+62	; 0x3e
    1afc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e8       	ldi	r20, 0x80	; 128
    1b04:	5f e3       	ldi	r21, 0x3F	; 63
    1b06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b0a:	88 23       	and	r24, r24
    1b0c:	2c f4       	brge	.+10     	; 0x1b18 <LCD_void_Init+0x2d4>
		__ticks = 1;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	9b af       	std	Y+59, r25	; 0x3b
    1b14:	8a af       	std	Y+58, r24	; 0x3a
    1b16:	42 c0       	rjmp	.+132    	; 0x1b9c <LCD_void_Init+0x358>
	else if (__tmp > 65535)
    1b18:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b1a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b1c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b1e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	3f ef       	ldi	r19, 0xFF	; 255
    1b24:	4f e7       	ldi	r20, 0x7F	; 127
    1b26:	57 e4       	ldi	r21, 0x47	; 71
    1b28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b2c:	18 16       	cp	r1, r24
    1b2e:	64 f5       	brge	.+88     	; 0x1b88 <LCD_void_Init+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b30:	fe 01       	movw	r30, r28
    1b32:	e0 5c       	subi	r30, 0xC0	; 192
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	60 81       	ld	r22, Z
    1b38:	71 81       	ldd	r23, Z+1	; 0x01
    1b3a:	82 81       	ldd	r24, Z+2	; 0x02
    1b3c:	93 81       	ldd	r25, Z+3	; 0x03
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e2       	ldi	r20, 0x20	; 32
    1b44:	51 e4       	ldi	r21, 0x41	; 65
    1b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9b af       	std	Y+59, r25	; 0x3b
    1b5c:	8a af       	std	Y+58, r24	; 0x3a
    1b5e:	0f c0       	rjmp	.+30     	; 0x1b7e <LCD_void_Init+0x33a>
    1b60:	88 ec       	ldi	r24, 0xC8	; 200
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	99 af       	std	Y+57, r25	; 0x39
    1b66:	88 af       	std	Y+56, r24	; 0x38
    1b68:	88 ad       	ldd	r24, Y+56	; 0x38
    1b6a:	99 ad       	ldd	r25, Y+57	; 0x39
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <LCD_void_Init+0x328>
    1b70:	99 af       	std	Y+57, r25	; 0x39
    1b72:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b74:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b76:	9b ad       	ldd	r25, Y+59	; 0x3b
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	9b af       	std	Y+59, r25	; 0x3b
    1b7c:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b80:	9b ad       	ldd	r25, Y+59	; 0x3b
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	69 f7       	brne	.-38     	; 0x1b60 <LCD_void_Init+0x31c>
    1b86:	2e c0       	rjmp	.+92     	; 0x1be4 <LCD_void_Init+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b88:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b8a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b8c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	9b af       	std	Y+59, r25	; 0x3b
    1b9a:	8a af       	std	Y+58, r24	; 0x3a
    1b9c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b9e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ba0:	9f ab       	std	Y+55, r25	; 0x37
    1ba2:	8e ab       	std	Y+54, r24	; 0x36
    1ba4:	8e a9       	ldd	r24, Y+54	; 0x36
    1ba6:	9f a9       	ldd	r25, Y+55	; 0x37
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_void_Init+0x364>
    1bac:	9f ab       	std	Y+55, r25	; 0x37
    1bae:	8e ab       	std	Y+54, r24	; 0x36
    1bb0:	19 c0       	rjmp	.+50     	; 0x1be4 <LCD_void_Init+0x3a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bb2:	8e 01       	movw	r16, r28
    1bb4:	0c 5b       	subi	r16, 0xBC	; 188
    1bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb8:	fe 01       	movw	r30, r28
    1bba:	eb 5b       	subi	r30, 0xBB	; 187
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	60 81       	ld	r22, Z
    1bc0:	71 81       	ldd	r23, Z+1	; 0x01
    1bc2:	82 81       	ldd	r24, Z+2	; 0x02
    1bc4:	93 81       	ldd	r25, Z+3	; 0x03
    1bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	f8 01       	movw	r30, r16
    1bd0:	80 83       	st	Z, r24
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ec 5b       	subi	r30, 0xBC	; 188
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	80 81       	ld	r24, Z
    1bda:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bdc:	8d a9       	ldd	r24, Y+53	; 0x35
    1bde:	8a 95       	dec	r24
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <LCD_void_Init+0x39a>
    1be2:	8d ab       	std	Y+53, r24	; 0x35
	//F:0  5*7pixels //F:1 5*11 Pixels
	_delay_us(50);
	LCD_void_Write_Cmd(0x0E);	//D=1 DISPLAY ON    // D:0 DISPLAY OFF
    1be4:	8e e0       	ldi	r24, 0x0E	; 14
    1be6:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_void_Write_Cmd>
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	a8 e4       	ldi	r26, 0x48	; 72
    1bf0:	b2 e4       	ldi	r27, 0x42	; 66
    1bf2:	89 ab       	std	Y+49, r24	; 0x31
    1bf4:	9a ab       	std	Y+50, r25	; 0x32
    1bf6:	ab ab       	std	Y+51, r26	; 0x33
    1bf8:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bfa:	69 a9       	ldd	r22, Y+49	; 0x31
    1bfc:	7a a9       	ldd	r23, Y+50	; 0x32
    1bfe:	8b a9       	ldd	r24, Y+51	; 0x33
    1c00:	9c a9       	ldd	r25, Y+52	; 0x34
    1c02:	2b ea       	ldi	r18, 0xAB	; 171
    1c04:	3a ea       	ldi	r19, 0xAA	; 170
    1c06:	4a e2       	ldi	r20, 0x2A	; 42
    1c08:	50 e4       	ldi	r21, 0x40	; 64
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	8d a7       	std	Y+45, r24	; 0x2d
    1c14:	9e a7       	std	Y+46, r25	; 0x2e
    1c16:	af a7       	std	Y+47, r26	; 0x2f
    1c18:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1c1a:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c1c:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c20:	98 a9       	ldd	r25, Y+48	; 0x30
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e8       	ldi	r20, 0x80	; 128
    1c28:	5f e3       	ldi	r21, 0x3F	; 63
    1c2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c2e:	88 23       	and	r24, r24
    1c30:	1c f4       	brge	.+6      	; 0x1c38 <LCD_void_Init+0x3f4>
		__ticks = 1;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	8c a7       	std	Y+44, r24	; 0x2c
    1c36:	91 c0       	rjmp	.+290    	; 0x1d5a <LCD_void_Init+0x516>
	else if (__tmp > 255)
    1c38:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c3a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	4f e7       	ldi	r20, 0x7F	; 127
    1c46:	53 e4       	ldi	r21, 0x43	; 67
    1c48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c4c:	18 16       	cp	r1, r24
    1c4e:	0c f0       	brlt	.+2      	; 0x1c52 <LCD_void_Init+0x40e>
    1c50:	7b c0       	rjmp	.+246    	; 0x1d48 <LCD_void_Init+0x504>
	{
		_delay_ms(__us / 1000.0);
    1c52:	69 a9       	ldd	r22, Y+49	; 0x31
    1c54:	7a a9       	ldd	r23, Y+50	; 0x32
    1c56:	8b a9       	ldd	r24, Y+51	; 0x33
    1c58:	9c a9       	ldd	r25, Y+52	; 0x34
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	4a e7       	ldi	r20, 0x7A	; 122
    1c60:	54 e4       	ldi	r21, 0x44	; 68
    1c62:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	88 a7       	std	Y+40, r24	; 0x28
    1c6c:	99 a7       	std	Y+41, r25	; 0x29
    1c6e:	aa a7       	std	Y+42, r26	; 0x2a
    1c70:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c72:	68 a5       	ldd	r22, Y+40	; 0x28
    1c74:	79 a5       	ldd	r23, Y+41	; 0x29
    1c76:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c78:	9b a5       	ldd	r25, Y+43	; 0x2b
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	4a ef       	ldi	r20, 0xFA	; 250
    1c80:	54 e4       	ldi	r21, 0x44	; 68
    1c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	8c a3       	std	Y+36, r24	; 0x24
    1c8c:	9d a3       	std	Y+37, r25	; 0x25
    1c8e:	ae a3       	std	Y+38, r26	; 0x26
    1c90:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    1c92:	6c a1       	ldd	r22, Y+36	; 0x24
    1c94:	7d a1       	ldd	r23, Y+37	; 0x25
    1c96:	8e a1       	ldd	r24, Y+38	; 0x26
    1c98:	9f a1       	ldd	r25, Y+39	; 0x27
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e8       	ldi	r20, 0x80	; 128
    1ca0:	5f e3       	ldi	r21, 0x3F	; 63
    1ca2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca6:	88 23       	and	r24, r24
    1ca8:	2c f4       	brge	.+10     	; 0x1cb4 <LCD_void_Init+0x470>
		__ticks = 1;
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	9b a3       	std	Y+35, r25	; 0x23
    1cb0:	8a a3       	std	Y+34, r24	; 0x22
    1cb2:	3f c0       	rjmp	.+126    	; 0x1d32 <LCD_void_Init+0x4ee>
	else if (__tmp > 65535)
    1cb4:	6c a1       	ldd	r22, Y+36	; 0x24
    1cb6:	7d a1       	ldd	r23, Y+37	; 0x25
    1cb8:	8e a1       	ldd	r24, Y+38	; 0x26
    1cba:	9f a1       	ldd	r25, Y+39	; 0x27
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	3f ef       	ldi	r19, 0xFF	; 255
    1cc0:	4f e7       	ldi	r20, 0x7F	; 127
    1cc2:	57 e4       	ldi	r21, 0x47	; 71
    1cc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc8:	18 16       	cp	r1, r24
    1cca:	4c f5       	brge	.+82     	; 0x1d1e <LCD_void_Init+0x4da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ccc:	68 a5       	ldd	r22, Y+40	; 0x28
    1cce:	79 a5       	ldd	r23, Y+41	; 0x29
    1cd0:	8a a5       	ldd	r24, Y+42	; 0x2a
    1cd2:	9b a5       	ldd	r25, Y+43	; 0x2b
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e2       	ldi	r20, 0x20	; 32
    1cda:	51 e4       	ldi	r21, 0x41	; 65
    1cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	bc 01       	movw	r22, r24
    1ce6:	cd 01       	movw	r24, r26
    1ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	9b a3       	std	Y+35, r25	; 0x23
    1cf2:	8a a3       	std	Y+34, r24	; 0x22
    1cf4:	0f c0       	rjmp	.+30     	; 0x1d14 <LCD_void_Init+0x4d0>
    1cf6:	88 ec       	ldi	r24, 0xC8	; 200
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	99 a3       	std	Y+33, r25	; 0x21
    1cfc:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cfe:	88 a1       	ldd	r24, Y+32	; 0x20
    1d00:	99 a1       	ldd	r25, Y+33	; 0x21
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <LCD_void_Init+0x4be>
    1d06:	99 a3       	std	Y+33, r25	; 0x21
    1d08:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0a:	8a a1       	ldd	r24, Y+34	; 0x22
    1d0c:	9b a1       	ldd	r25, Y+35	; 0x23
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	9b a3       	std	Y+35, r25	; 0x23
    1d12:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d14:	8a a1       	ldd	r24, Y+34	; 0x22
    1d16:	9b a1       	ldd	r25, Y+35	; 0x23
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	69 f7       	brne	.-38     	; 0x1cf6 <LCD_void_Init+0x4b2>
    1d1c:	24 c0       	rjmp	.+72     	; 0x1d66 <LCD_void_Init+0x522>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1e:	6c a1       	ldd	r22, Y+36	; 0x24
    1d20:	7d a1       	ldd	r23, Y+37	; 0x25
    1d22:	8e a1       	ldd	r24, Y+38	; 0x26
    1d24:	9f a1       	ldd	r25, Y+39	; 0x27
    1d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	9b a3       	std	Y+35, r25	; 0x23
    1d30:	8a a3       	std	Y+34, r24	; 0x22
    1d32:	8a a1       	ldd	r24, Y+34	; 0x22
    1d34:	9b a1       	ldd	r25, Y+35	; 0x23
    1d36:	9f 8f       	std	Y+31, r25	; 0x1f
    1d38:	8e 8f       	std	Y+30, r24	; 0x1e
    1d3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d3c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <LCD_void_Init+0x4fa>
    1d42:	9f 8f       	std	Y+31, r25	; 0x1f
    1d44:	8e 8f       	std	Y+30, r24	; 0x1e
    1d46:	0f c0       	rjmp	.+30     	; 0x1d66 <LCD_void_Init+0x522>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d48:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d4a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	8c a7       	std	Y+44, r24	; 0x2c
    1d5a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d5c:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d60:	8a 95       	dec	r24
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <LCD_void_Init+0x51c>
    1d64:	8d 8f       	std	Y+29, r24	; 0x1d
	//C:1 COURSOR ON    // c:0 COURSOR OFF
	//B:1 COURSOR BLINK	//B:0 CURSOR OFF

	_delay_us(50);
	LCD_void_Write_Cmd(0b00000001); //display clear
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_void_Write_Cmd>
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	a0 e0       	ldi	r26, 0x00	; 0
    1d72:	b0 e4       	ldi	r27, 0x40	; 64
    1d74:	89 8f       	std	Y+25, r24	; 0x19
    1d76:	9a 8f       	std	Y+26, r25	; 0x1a
    1d78:	ab 8f       	std	Y+27, r26	; 0x1b
    1d7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	4a ef       	ldi	r20, 0xFA	; 250
    1d8a:	54 e4       	ldi	r21, 0x44	; 68
    1d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	8d 8b       	std	Y+21, r24	; 0x15
    1d96:	9e 8b       	std	Y+22, r25	; 0x16
    1d98:	af 8b       	std	Y+23, r26	; 0x17
    1d9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1da0:	8f 89       	ldd	r24, Y+23	; 0x17
    1da2:	98 8d       	ldd	r25, Y+24	; 0x18
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e8       	ldi	r20, 0x80	; 128
    1daa:	5f e3       	ldi	r21, 0x3F	; 63
    1dac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1db0:	88 23       	and	r24, r24
    1db2:	2c f4       	brge	.+10     	; 0x1dbe <LCD_void_Init+0x57a>
		__ticks = 1;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9c 8b       	std	Y+20, r25	; 0x14
    1dba:	8b 8b       	std	Y+19, r24	; 0x13
    1dbc:	3f c0       	rjmp	.+126    	; 0x1e3c <LCD_void_Init+0x5f8>
	else if (__tmp > 65535)
    1dbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	3f ef       	ldi	r19, 0xFF	; 255
    1dca:	4f e7       	ldi	r20, 0x7F	; 127
    1dcc:	57 e4       	ldi	r21, 0x47	; 71
    1dce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dd2:	18 16       	cp	r1, r24
    1dd4:	4c f5       	brge	.+82     	; 0x1e28 <LCD_void_Init+0x5e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd6:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ddc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e2       	ldi	r20, 0x20	; 32
    1de4:	51 e4       	ldi	r21, 0x41	; 65
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	9c 8b       	std	Y+20, r25	; 0x14
    1dfc:	8b 8b       	std	Y+19, r24	; 0x13
    1dfe:	0f c0       	rjmp	.+30     	; 0x1e1e <LCD_void_Init+0x5da>
    1e00:	88 ec       	ldi	r24, 0xC8	; 200
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	9a 8b       	std	Y+18, r25	; 0x12
    1e06:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e08:	89 89       	ldd	r24, Y+17	; 0x11
    1e0a:	9a 89       	ldd	r25, Y+18	; 0x12
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <LCD_void_Init+0x5c8>
    1e10:	9a 8b       	std	Y+18, r25	; 0x12
    1e12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e14:	8b 89       	ldd	r24, Y+19	; 0x13
    1e16:	9c 89       	ldd	r25, Y+20	; 0x14
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	9c 8b       	std	Y+20, r25	; 0x14
    1e1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e20:	9c 89       	ldd	r25, Y+20	; 0x14
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	69 f7       	brne	.-38     	; 0x1e00 <LCD_void_Init+0x5bc>
    1e26:	14 c0       	rjmp	.+40     	; 0x1e50 <LCD_void_Init+0x60c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e28:	6d 89       	ldd	r22, Y+21	; 0x15
    1e2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	9c 8b       	std	Y+20, r25	; 0x14
    1e3a:	8b 8b       	std	Y+19, r24	; 0x13
    1e3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e40:	98 8b       	std	Y+16, r25	; 0x10
    1e42:	8f 87       	std	Y+15, r24	; 0x0f
    1e44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e46:	98 89       	ldd	r25, Y+16	; 0x10
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <LCD_void_Init+0x604>
    1e4c:	98 8b       	std	Y+16, r25	; 0x10
    1e4e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_void_Write_Cmd(0x80);// Entry mode. (No display shift , AC increase)
    1e50:	80 e8       	ldi	r24, 0x80	; 128
    1e52:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_void_Write_Cmd>
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	a0 e8       	ldi	r26, 0x80	; 128
    1e5c:	bf e3       	ldi	r27, 0x3F	; 63
    1e5e:	8b 87       	std	Y+11, r24	; 0x0b
    1e60:	9c 87       	std	Y+12, r25	; 0x0c
    1e62:	ad 87       	std	Y+13, r26	; 0x0d
    1e64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	4a ef       	ldi	r20, 0xFA	; 250
    1e74:	54 e4       	ldi	r21, 0x44	; 68
    1e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	8f 83       	std	Y+7, r24	; 0x07
    1e80:	98 87       	std	Y+8, r25	; 0x08
    1e82:	a9 87       	std	Y+9, r26	; 0x09
    1e84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e86:	6f 81       	ldd	r22, Y+7	; 0x07
    1e88:	78 85       	ldd	r23, Y+8	; 0x08
    1e8a:	89 85       	ldd	r24, Y+9	; 0x09
    1e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e8       	ldi	r20, 0x80	; 128
    1e94:	5f e3       	ldi	r21, 0x3F	; 63
    1e96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e9a:	88 23       	and	r24, r24
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <LCD_void_Init+0x664>
		__ticks = 1;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	9e 83       	std	Y+6, r25	; 0x06
    1ea4:	8d 83       	std	Y+5, r24	; 0x05
    1ea6:	3f c0       	rjmp	.+126    	; 0x1f26 <LCD_void_Init+0x6e2>
	else if (__tmp > 65535)
    1ea8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eaa:	78 85       	ldd	r23, Y+8	; 0x08
    1eac:	89 85       	ldd	r24, Y+9	; 0x09
    1eae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	3f ef       	ldi	r19, 0xFF	; 255
    1eb4:	4f e7       	ldi	r20, 0x7F	; 127
    1eb6:	57 e4       	ldi	r21, 0x47	; 71
    1eb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ebc:	18 16       	cp	r1, r24
    1ebe:	4c f5       	brge	.+82     	; 0x1f12 <LCD_void_Init+0x6ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e2       	ldi	r20, 0x20	; 32
    1ece:	51 e4       	ldi	r21, 0x41	; 65
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	bc 01       	movw	r22, r24
    1eda:	cd 01       	movw	r24, r26
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9e 83       	std	Y+6, r25	; 0x06
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
    1ee8:	0f c0       	rjmp	.+30     	; 0x1f08 <LCD_void_Init+0x6c4>
    1eea:	88 ec       	ldi	r24, 0xC8	; 200
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9c 83       	std	Y+4, r25	; 0x04
    1ef0:	8b 83       	std	Y+3, r24	; 0x03
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	f1 f7       	brne	.-4      	; 0x1ef6 <LCD_void_Init+0x6b2>
    1efa:	9c 83       	std	Y+4, r25	; 0x04
    1efc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efe:	8d 81       	ldd	r24, Y+5	; 0x05
    1f00:	9e 81       	ldd	r25, Y+6	; 0x06
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	9e 83       	std	Y+6, r25	; 0x06
    1f06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f08:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	69 f7       	brne	.-38     	; 0x1eea <LCD_void_Init+0x6a6>
    1f10:	14 c0       	rjmp	.+40     	; 0x1f3a <LCD_void_Init+0x6f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f12:	6f 81       	ldd	r22, Y+7	; 0x07
    1f14:	78 85       	ldd	r23, Y+8	; 0x08
    1f16:	89 85       	ldd	r24, Y+9	; 0x09
    1f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9e 83       	std	Y+6, r25	; 0x06
    1f24:	8d 83       	std	Y+5, r24	; 0x05
    1f26:	8d 81       	ldd	r24, Y+5	; 0x05
    1f28:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2a:	9a 83       	std	Y+2, r25	; 0x02
    1f2c:	89 83       	std	Y+1, r24	; 0x01
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	9a 81       	ldd	r25, Y+2	; 0x02
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_void_Init+0x6ee>
    1f36:	9a 83       	std	Y+2, r25	; 0x02
    1f38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


#endif
}
    1f3a:	c6 5a       	subi	r28, 0xA6	; 166
    1f3c:	df 4f       	sbci	r29, 0xFF	; 255
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 91       	pop	r16
    1f50:	08 95       	ret

00001f52 <LCD_void_Write_Cmd>:

void LCD_void_Write_Cmd(u8 Copy_u8Cmd)
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <LCD_void_Write_Cmd+0x6>
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_Copy_u8Cmd;
#if LCD_Selected_Mode==LCD_8Bit_Mode
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,LCD_u8_RS_CMD);
	LCD_void_Write(Copy_u8Cmd);
#elif LCD_Selected_Mode==LCD_4Bit_Mode
	LOC_Copy_u8Cmd=(Copy_u8Cmd & 0b11110000);
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	80 7f       	andi	r24, 0xF0	; 240
    1f62:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,LCD_u8_RS_CMD);
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	65 e0       	ldi	r22, 0x05	; 5
    1f68:	40 e0       	ldi	r20, 0x00	; 0
    1f6a:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_u8set_pin_value>
	LCD_void_Write(LOC_Copy_u8Cmd);
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_void_Write>
	LOC_Copy_u8Cmd=((Copy_u8Cmd<<4) & 0b11110000);
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	88 2f       	mov	r24, r24
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	82 95       	swap	r24
    1f7c:	92 95       	swap	r25
    1f7e:	90 7f       	andi	r25, 0xF0	; 240
    1f80:	98 27       	eor	r25, r24
    1f82:	80 7f       	andi	r24, 0xF0	; 240
    1f84:	98 27       	eor	r25, r24
    1f86:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,LCD_u8_RS_CMD);
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	65 e0       	ldi	r22, 0x05	; 5
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_u8set_pin_value>
	LCD_void_Write(LOC_Copy_u8Cmd);
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_void_Write>
#endif


}
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <LCD_void_Write_Data>:
void LCD_void_Write_Data(u8 Copy_u8Data)
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <LCD_void_Write_Data+0x6>
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
    1fac:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_Copy_u8Data;
#if LCD_Selected_Mode==LCD_8Bit_Mode
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,LCD_u8_RS_DATA);
	LCD_void_Write(Copy_u8Data);
#elif  LCD_Selected_Mode==LCD_4Bit_Mode
	LOC_Copy_u8Data=(Copy_u8Data & 0b11110000);
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	80 7f       	andi	r24, 0xF0	; 240
    1fb2:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,LCD_u8_RS_DATA);
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	65 e0       	ldi	r22, 0x05	; 5
    1fb8:	41 e0       	ldi	r20, 0x01	; 1
    1fba:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_u8set_pin_value>
	LCD_void_Write(LOC_Copy_u8Data);
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_void_Write>
	LOC_Copy_u8Data=((Copy_u8Data<<4) & 0b11110000);
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	88 2f       	mov	r24, r24
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	82 95       	swap	r24
    1fcc:	92 95       	swap	r25
    1fce:	90 7f       	andi	r25, 0xF0	; 240
    1fd0:	98 27       	eor	r25, r24
    1fd2:	80 7f       	andi	r24, 0xF0	; 240
    1fd4:	98 27       	eor	r25, r24
    1fd6:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,LCD_u8_RS_DATA);
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	65 e0       	ldi	r22, 0x05	; 5
    1fdc:	41 e0       	ldi	r20, 0x01	; 1
    1fde:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_u8set_pin_value>
	LCD_void_Write(LOC_Copy_u8Data);
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_void_Write>
#endif

}
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <LCD_void_Write>:

void LCD_void_Write(u8 Copy_u8val)
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	6d 97       	sbiw	r28, 0x1d	; 29
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	de bf       	out	0x3e, r29	; 62
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	cd bf       	out	0x3d, r28	; 61
    2006:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,LCD_u8_RW_WRITE);
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	66 e0       	ldi	r22, 0x06	; 6
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_u8set_pin_value>
	_delay_ms(2);
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_ENABLE_PIN,DIO_u8_LOW);
	_delay_ms(2);
#elif LCD_Selected_Mode==LCD_4Bit_Mode
#if   LCD_4PIN_IN_DATA_PORT_IN_4PIN_MODE==LCD_FIRST_4PIN_IN_DATA_PORT_IN_4PIN_MODE
	DIO_u8set_pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_0,get_bit(Copy_u8val,4));
    2012:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2014:	82 95       	swap	r24
    2016:	8f 70       	andi	r24, 0x0F	; 15
    2018:	98 2f       	mov	r25, r24
    201a:	91 70       	andi	r25, 0x01	; 1
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	60 e0       	ldi	r22, 0x00	; 0
    2020:	49 2f       	mov	r20, r25
    2022:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_u8set_pin_value>
	DIO_u8set_pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_1,get_bit(Copy_u8val,5));
    2026:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2028:	82 95       	swap	r24
    202a:	86 95       	lsr	r24
    202c:	87 70       	andi	r24, 0x07	; 7
    202e:	98 2f       	mov	r25, r24
    2030:	91 70       	andi	r25, 0x01	; 1
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	61 e0       	ldi	r22, 0x01	; 1
    2036:	49 2f       	mov	r20, r25
    2038:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_u8set_pin_value>
	DIO_u8set_pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_2,get_bit(Copy_u8val,6));
    203c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    203e:	82 95       	swap	r24
    2040:	86 95       	lsr	r24
    2042:	86 95       	lsr	r24
    2044:	83 70       	andi	r24, 0x03	; 3
    2046:	98 2f       	mov	r25, r24
    2048:	91 70       	andi	r25, 0x01	; 1
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	62 e0       	ldi	r22, 0x02	; 2
    204e:	49 2f       	mov	r20, r25
    2050:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_u8set_pin_value>
	DIO_u8set_pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN_3,get_bit(Copy_u8val,7));
    2054:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2056:	98 2f       	mov	r25, r24
    2058:	99 1f       	adc	r25, r25
    205a:	99 27       	eor	r25, r25
    205c:	99 1f       	adc	r25, r25
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	63 e0       	ldi	r22, 0x03	; 3
    2062:	49 2f       	mov	r20, r25
    2064:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_u8set_pin_value>
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_ENABLE_PIN,DIO_u8_HIGH);
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	67 e0       	ldi	r22, 0x07	; 7
    206c:	41 e0       	ldi	r20, 0x01	; 1
    206e:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_u8set_pin_value>
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	a0 e0       	ldi	r26, 0x00	; 0
    2078:	b0 e4       	ldi	r27, 0x40	; 64
    207a:	89 8f       	std	Y+25, r24	; 0x19
    207c:	9a 8f       	std	Y+26, r25	; 0x1a
    207e:	ab 8f       	std	Y+27, r26	; 0x1b
    2080:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2082:	69 8d       	ldd	r22, Y+25	; 0x19
    2084:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2086:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2088:	9c 8d       	ldd	r25, Y+28	; 0x1c
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	4a ef       	ldi	r20, 0xFA	; 250
    2090:	54 e4       	ldi	r21, 0x44	; 68
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	8d 8b       	std	Y+21, r24	; 0x15
    209c:	9e 8b       	std	Y+22, r25	; 0x16
    209e:	af 8b       	std	Y+23, r26	; 0x17
    20a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20a2:	6d 89       	ldd	r22, Y+21	; 0x15
    20a4:	7e 89       	ldd	r23, Y+22	; 0x16
    20a6:	8f 89       	ldd	r24, Y+23	; 0x17
    20a8:	98 8d       	ldd	r25, Y+24	; 0x18
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e8       	ldi	r20, 0x80	; 128
    20b0:	5f e3       	ldi	r21, 0x3F	; 63
    20b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20b6:	88 23       	and	r24, r24
    20b8:	2c f4       	brge	.+10     	; 0x20c4 <LCD_void_Write+0xd2>
		__ticks = 1;
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	9c 8b       	std	Y+20, r25	; 0x14
    20c0:	8b 8b       	std	Y+19, r24	; 0x13
    20c2:	3f c0       	rjmp	.+126    	; 0x2142 <LCD_void_Write+0x150>
	else if (__tmp > 65535)
    20c4:	6d 89       	ldd	r22, Y+21	; 0x15
    20c6:	7e 89       	ldd	r23, Y+22	; 0x16
    20c8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ca:	98 8d       	ldd	r25, Y+24	; 0x18
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	3f ef       	ldi	r19, 0xFF	; 255
    20d0:	4f e7       	ldi	r20, 0x7F	; 127
    20d2:	57 e4       	ldi	r21, 0x47	; 71
    20d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20d8:	18 16       	cp	r1, r24
    20da:	4c f5       	brge	.+82     	; 0x212e <LCD_void_Write+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20dc:	69 8d       	ldd	r22, Y+25	; 0x19
    20de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e2       	ldi	r20, 0x20	; 32
    20ea:	51 e4       	ldi	r21, 0x41	; 65
    20ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	bc 01       	movw	r22, r24
    20f6:	cd 01       	movw	r24, r26
    20f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	9c 8b       	std	Y+20, r25	; 0x14
    2102:	8b 8b       	std	Y+19, r24	; 0x13
    2104:	0f c0       	rjmp	.+30     	; 0x2124 <LCD_void_Write+0x132>
    2106:	88 ec       	ldi	r24, 0xC8	; 200
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9a 8b       	std	Y+18, r25	; 0x12
    210c:	89 8b       	std	Y+17, r24	; 0x11
    210e:	89 89       	ldd	r24, Y+17	; 0x11
    2110:	9a 89       	ldd	r25, Y+18	; 0x12
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <LCD_void_Write+0x120>
    2116:	9a 8b       	std	Y+18, r25	; 0x12
    2118:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211a:	8b 89       	ldd	r24, Y+19	; 0x13
    211c:	9c 89       	ldd	r25, Y+20	; 0x14
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	9c 8b       	std	Y+20, r25	; 0x14
    2122:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2124:	8b 89       	ldd	r24, Y+19	; 0x13
    2126:	9c 89       	ldd	r25, Y+20	; 0x14
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	69 f7       	brne	.-38     	; 0x2106 <LCD_void_Write+0x114>
    212c:	14 c0       	rjmp	.+40     	; 0x2156 <LCD_void_Write+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212e:	6d 89       	ldd	r22, Y+21	; 0x15
    2130:	7e 89       	ldd	r23, Y+22	; 0x16
    2132:	8f 89       	ldd	r24, Y+23	; 0x17
    2134:	98 8d       	ldd	r25, Y+24	; 0x18
    2136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	9c 8b       	std	Y+20, r25	; 0x14
    2140:	8b 8b       	std	Y+19, r24	; 0x13
    2142:	8b 89       	ldd	r24, Y+19	; 0x13
    2144:	9c 89       	ldd	r25, Y+20	; 0x14
    2146:	98 8b       	std	Y+16, r25	; 0x10
    2148:	8f 87       	std	Y+15, r24	; 0x0f
    214a:	8f 85       	ldd	r24, Y+15	; 0x0f
    214c:	98 89       	ldd	r25, Y+16	; 0x10
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	f1 f7       	brne	.-4      	; 0x214e <LCD_void_Write+0x15c>
    2152:	98 8b       	std	Y+16, r25	; 0x10
    2154:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8set_pin_value(LCD_u8_CTRL_PORT,LCD_u8_ENABLE_PIN,DIO_u8_LOW);
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	67 e0       	ldi	r22, 0x07	; 7
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_u8set_pin_value>
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	a0 e0       	ldi	r26, 0x00	; 0
    2166:	b0 e4       	ldi	r27, 0x40	; 64
    2168:	8b 87       	std	Y+11, r24	; 0x0b
    216a:	9c 87       	std	Y+12, r25	; 0x0c
    216c:	ad 87       	std	Y+13, r26	; 0x0d
    216e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2170:	6b 85       	ldd	r22, Y+11	; 0x0b
    2172:	7c 85       	ldd	r23, Y+12	; 0x0c
    2174:	8d 85       	ldd	r24, Y+13	; 0x0d
    2176:	9e 85       	ldd	r25, Y+14	; 0x0e
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	4a ef       	ldi	r20, 0xFA	; 250
    217e:	54 e4       	ldi	r21, 0x44	; 68
    2180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	8f 83       	std	Y+7, r24	; 0x07
    218a:	98 87       	std	Y+8, r25	; 0x08
    218c:	a9 87       	std	Y+9, r26	; 0x09
    218e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2190:	6f 81       	ldd	r22, Y+7	; 0x07
    2192:	78 85       	ldd	r23, Y+8	; 0x08
    2194:	89 85       	ldd	r24, Y+9	; 0x09
    2196:	9a 85       	ldd	r25, Y+10	; 0x0a
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e8       	ldi	r20, 0x80	; 128
    219e:	5f e3       	ldi	r21, 0x3F	; 63
    21a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21a4:	88 23       	and	r24, r24
    21a6:	2c f4       	brge	.+10     	; 0x21b2 <LCD_void_Write+0x1c0>
		__ticks = 1;
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	9e 83       	std	Y+6, r25	; 0x06
    21ae:	8d 83       	std	Y+5, r24	; 0x05
    21b0:	3f c0       	rjmp	.+126    	; 0x2230 <LCD_void_Write+0x23e>
	else if (__tmp > 65535)
    21b2:	6f 81       	ldd	r22, Y+7	; 0x07
    21b4:	78 85       	ldd	r23, Y+8	; 0x08
    21b6:	89 85       	ldd	r24, Y+9	; 0x09
    21b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	3f ef       	ldi	r19, 0xFF	; 255
    21be:	4f e7       	ldi	r20, 0x7F	; 127
    21c0:	57 e4       	ldi	r21, 0x47	; 71
    21c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21c6:	18 16       	cp	r1, r24
    21c8:	4c f5       	brge	.+82     	; 0x221c <LCD_void_Write+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    21cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e2       	ldi	r20, 0x20	; 32
    21d8:	51 e4       	ldi	r21, 0x41	; 65
    21da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	bc 01       	movw	r22, r24
    21e4:	cd 01       	movw	r24, r26
    21e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	9e 83       	std	Y+6, r25	; 0x06
    21f0:	8d 83       	std	Y+5, r24	; 0x05
    21f2:	0f c0       	rjmp	.+30     	; 0x2212 <LCD_void_Write+0x220>
    21f4:	88 ec       	ldi	r24, 0xC8	; 200
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	9c 83       	std	Y+4, r25	; 0x04
    21fa:	8b 83       	std	Y+3, r24	; 0x03
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	f1 f7       	brne	.-4      	; 0x2200 <LCD_void_Write+0x20e>
    2204:	9c 83       	std	Y+4, r25	; 0x04
    2206:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2208:	8d 81       	ldd	r24, Y+5	; 0x05
    220a:	9e 81       	ldd	r25, Y+6	; 0x06
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	9e 83       	std	Y+6, r25	; 0x06
    2210:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2212:	8d 81       	ldd	r24, Y+5	; 0x05
    2214:	9e 81       	ldd	r25, Y+6	; 0x06
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	69 f7       	brne	.-38     	; 0x21f4 <LCD_void_Write+0x202>
    221a:	14 c0       	rjmp	.+40     	; 0x2244 <LCD_void_Write+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221c:	6f 81       	ldd	r22, Y+7	; 0x07
    221e:	78 85       	ldd	r23, Y+8	; 0x08
    2220:	89 85       	ldd	r24, Y+9	; 0x09
    2222:	9a 85       	ldd	r25, Y+10	; 0x0a
    2224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	9e 83       	std	Y+6, r25	; 0x06
    222e:	8d 83       	std	Y+5, r24	; 0x05
    2230:	8d 81       	ldd	r24, Y+5	; 0x05
    2232:	9e 81       	ldd	r25, Y+6	; 0x06
    2234:	9a 83       	std	Y+2, r25	; 0x02
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	9a 81       	ldd	r25, Y+2	; 0x02
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <LCD_void_Write+0x24a>
    2240:	9a 83       	std	Y+2, r25	; 0x02
    2242:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

#endif
#endif

}
    2244:	6d 96       	adiw	r28, 0x1d	; 29
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	08 95       	ret

00002256 <LCD_void_set_DDRAM_ADD>:


void LCD_void_set_DDRAM_ADD(u8 Copy_u8DDRAM_ADD)
{
    2256:	df 93       	push	r29
    2258:	cf 93       	push	r28
    225a:	0f 92       	push	r0
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    2260:	89 83       	std	Y+1, r24	; 0x01
	LCD_void_Write_Cmd( LCD_u8_DDRAM_ADD_MASK|Copy_u8DDRAM_ADD);// set the position to display
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	80 68       	ori	r24, 0x80	; 128
    2266:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_void_Write_Cmd>
}
    226a:	0f 90       	pop	r0
    226c:	cf 91       	pop	r28
    226e:	df 91       	pop	r29
    2270:	08 95       	ret

00002272 <LCD_void_Write_String>:

void LCD_void_Write_String(u8 *Ptr_u8string,u8 Copy_u8x_Pos,u8 Copy_u8y_Pos)
{
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	00 d0       	rcall	.+0      	; 0x2278 <LCD_void_Write_String+0x6>
    2278:	00 d0       	rcall	.+0      	; 0x227a <LCD_void_Write_String+0x8>
    227a:	0f 92       	push	r0
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
    2280:	9b 83       	std	Y+3, r25	; 0x03
    2282:	8a 83       	std	Y+2, r24	; 0x02
    2284:	6c 83       	std	Y+4, r22	; 0x04
    2286:	4d 83       	std	Y+5, r20	; 0x05
	u8 LOC_DDRAM_ADD= Copy_u8x_Pos+(Copy_u8y_Pos*LCD_u8_DDRAM_ADD_LINE_MASK);
    2288:	8d 81       	ldd	r24, Y+5	; 0x05
    228a:	88 2f       	mov	r24, r24
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	00 24       	eor	r0, r0
    2290:	96 95       	lsr	r25
    2292:	87 95       	ror	r24
    2294:	07 94       	ror	r0
    2296:	96 95       	lsr	r25
    2298:	87 95       	ror	r24
    229a:	07 94       	ror	r0
    229c:	98 2f       	mov	r25, r24
    229e:	80 2d       	mov	r24, r0
    22a0:	98 2f       	mov	r25, r24
    22a2:	8c 81       	ldd	r24, Y+4	; 0x04
    22a4:	89 0f       	add	r24, r25
    22a6:	89 83       	std	Y+1, r24	; 0x01
	LCD_void_set_DDRAM_ADD(LOC_DDRAM_ADD);
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	0e 94 2b 11 	call	0x2256	; 0x2256 <LCD_void_set_DDRAM_ADD>
    22ae:	1d c0       	rjmp	.+58     	; 0x22ea <LCD_void_Write_String+0x78>
	while(*Ptr_u8string !='\0')
	{
		if(LOC_DDRAM_ADD==16)
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	80 31       	cpi	r24, 0x10	; 16
    22b4:	31 f4       	brne	.+12     	; 0x22c2 <LCD_void_Write_String+0x50>
		{
			LOC_DDRAM_ADD=64;
    22b6:	80 e4       	ldi	r24, 0x40	; 64
    22b8:	89 83       	std	Y+1, r24	; 0x01
			LCD_void_set_DDRAM_ADD(LOC_DDRAM_ADD);
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	0e 94 2b 11 	call	0x2256	; 0x2256 <LCD_void_set_DDRAM_ADD>
    22c0:	07 c0       	rjmp	.+14     	; 0x22d0 <LCD_void_Write_String+0x5e>
		}
		else if(LOC_DDRAM_ADD==80)
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	80 35       	cpi	r24, 0x50	; 80
    22c6:	21 f4       	brne	.+8      	; 0x22d0 <LCD_void_Write_String+0x5e>
		{
			LOC_DDRAM_ADD=0;
    22c8:	19 82       	std	Y+1, r1	; 0x01
			LCD_void_set_DDRAM_ADD(LOC_DDRAM_ADD);
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	0e 94 2b 11 	call	0x2256	; 0x2256 <LCD_void_set_DDRAM_ADD>
		}
		LCD_void_Write_Data(*Ptr_u8string);
    22d0:	ea 81       	ldd	r30, Y+2	; 0x02
    22d2:	fb 81       	ldd	r31, Y+3	; 0x03
    22d4:	80 81       	ld	r24, Z
    22d6:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_void_Write_Data>
		Ptr_u8string++;
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	9b 81       	ldd	r25, Y+3	; 0x03
    22de:	01 96       	adiw	r24, 0x01	; 1
    22e0:	9b 83       	std	Y+3, r25	; 0x03
    22e2:	8a 83       	std	Y+2, r24	; 0x02
		LOC_DDRAM_ADD++;
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	8f 5f       	subi	r24, 0xFF	; 255
    22e8:	89 83       	std	Y+1, r24	; 0x01

void LCD_void_Write_String(u8 *Ptr_u8string,u8 Copy_u8x_Pos,u8 Copy_u8y_Pos)
{
	u8 LOC_DDRAM_ADD= Copy_u8x_Pos+(Copy_u8y_Pos*LCD_u8_DDRAM_ADD_LINE_MASK);
	LCD_void_set_DDRAM_ADD(LOC_DDRAM_ADD);
	while(*Ptr_u8string !='\0')
    22ea:	ea 81       	ldd	r30, Y+2	; 0x02
    22ec:	fb 81       	ldd	r31, Y+3	; 0x03
    22ee:	80 81       	ld	r24, Z
    22f0:	88 23       	and	r24, r24
    22f2:	f1 f6       	brne	.-68     	; 0x22b0 <LCD_void_Write_String+0x3e>
		}
		LCD_void_Write_Data(*Ptr_u8string);
		Ptr_u8string++;
		LOC_DDRAM_ADD++;
	}
}
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	08 95       	ret

00002304 <LCD_void_set_CGRAM_ADD>:

void LCD_void_set_CGRAM_ADD(u8 Copy_u8CGRAM_ADD)
{
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	0f 92       	push	r0
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
    230e:	89 83       	std	Y+1, r24	; 0x01
	LCD_void_Write_Cmd( LCD_u8_CGRAM_ADD_MASK|Copy_u8CGRAM_ADD);
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	80 64       	ori	r24, 0x40	; 64
    2314:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_void_Write_Cmd>
}
    2318:	0f 90       	pop	r0
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	08 95       	ret

00002320 <LCD_u8_Count_Num_Digits>:

u32  LCD_u8_Count_Num_Digits(u32 Copy_u32_Num_VAL)
{
    2320:	df 93       	push	r29
    2322:	cf 93       	push	r28
    2324:	00 d0       	rcall	.+0      	; 0x2326 <LCD_u8_Count_Num_Digits+0x6>
    2326:	00 d0       	rcall	.+0      	; 0x2328 <LCD_u8_Count_Num_Digits+0x8>
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	9c 83       	std	Y+4, r25	; 0x04
    232e:	8b 83       	std	Y+3, r24	; 0x03
	u8 LOC_u8_Last_Digit;
	u8 LOC_u16_Counter=0;
    2330:	19 82       	std	Y+1, r1	; 0x01
    2332:	15 c0       	rjmp	.+42     	; 0x235e <LCD_u8_Count_Num_Digits+0x3e>
	while(Copy_u32_Num_VAL != 0)  //how to get all digits of a number
	{
		LOC_u8_Last_Digit = Copy_u32_Num_VAL % 10;   //Last digit
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	9c 81       	ldd	r25, Y+4	; 0x04
    2338:	2a e0       	ldi	r18, 0x0A	; 10
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	b9 01       	movw	r22, r18
    233e:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__udivmodhi4>
    2342:	8a 83       	std	Y+2, r24	; 0x02
		LOC_u16_Counter++;
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	8f 5f       	subi	r24, 0xFF	; 255
    2348:	89 83       	std	Y+1, r24	; 0x01
		Copy_u32_Num_VAL = Copy_u32_Num_VAL /10;
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	2a e0       	ldi	r18, 0x0A	; 10
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	b9 01       	movw	r22, r18
    2354:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__udivmodhi4>
    2358:	cb 01       	movw	r24, r22
    235a:	9c 83       	std	Y+4, r25	; 0x04
    235c:	8b 83       	std	Y+3, r24	; 0x03

u32  LCD_u8_Count_Num_Digits(u32 Copy_u32_Num_VAL)
{
	u8 LOC_u8_Last_Digit;
	u8 LOC_u16_Counter=0;
	while(Copy_u32_Num_VAL != 0)  //how to get all digits of a number
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	9c 81       	ldd	r25, Y+4	; 0x04
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	39 f7       	brne	.-50     	; 0x2334 <LCD_u8_Count_Num_Digits+0x14>
	{
		LOC_u8_Last_Digit = Copy_u32_Num_VAL % 10;   //Last digit
		LOC_u16_Counter++;
		Copy_u32_Num_VAL = Copy_u32_Num_VAL /10;
	}
	return LOC_u16_Counter;
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	88 2f       	mov	r24, r24
    236a:	90 e0       	ldi	r25, 0x00	; 0
}
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <LCD_void_Write_Spaces>:

void LCD_void_Write_Spaces(u32 Copy_u32_Num_Spaces)
{
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	00 d0       	rcall	.+0      	; 0x2380 <LCD_void_Write_Spaces+0x6>
    2380:	00 d0       	rcall	.+0      	; 0x2382 <LCD_void_Write_Spaces+0x8>
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
    2386:	9c 83       	std	Y+4, r25	; 0x04
    2388:	8b 83       	std	Y+3, r24	; 0x03
	u32 LOC_u32_Num_Spaces;
	for(LOC_u32_Num_Spaces=0; LOC_u32_Num_Spaces<=Copy_u32_Num_Spaces ;LOC_u32_Num_Spaces++)
    238a:	1a 82       	std	Y+2, r1	; 0x02
    238c:	19 82       	std	Y+1, r1	; 0x01
    238e:	08 c0       	rjmp	.+16     	; 0x23a0 <LCD_void_Write_Spaces+0x26>
	{
		LCD_void_Write_Data(' ');
    2390:	80 e2       	ldi	r24, 0x20	; 32
    2392:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_void_Write_Data>
}

void LCD_void_Write_Spaces(u32 Copy_u32_Num_Spaces)
{
	u32 LOC_u32_Num_Spaces;
	for(LOC_u32_Num_Spaces=0; LOC_u32_Num_Spaces<=Copy_u32_Num_Spaces ;LOC_u32_Num_Spaces++)
    2396:	89 81       	ldd	r24, Y+1	; 0x01
    2398:	9a 81       	ldd	r25, Y+2	; 0x02
    239a:	01 96       	adiw	r24, 0x01	; 1
    239c:	9a 83       	std	Y+2, r25	; 0x02
    239e:	89 83       	std	Y+1, r24	; 0x01
    23a0:	29 81       	ldd	r18, Y+1	; 0x01
    23a2:	3a 81       	ldd	r19, Y+2	; 0x02
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	9c 81       	ldd	r25, Y+4	; 0x04
    23a8:	82 17       	cp	r24, r18
    23aa:	93 07       	cpc	r25, r19
    23ac:	88 f7       	brcc	.-30     	; 0x2390 <LCD_void_Write_Spaces+0x16>
	{
		LCD_void_Write_Data(' ');
	}
}
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <swap>:

static void swap(u8 *PTR_u8Num1,u8 *PTR_u8Num2){
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <swap+0x6>
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <swap+0x8>
    23c4:	0f 92       	push	r0
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	9b 83       	std	Y+3, r25	; 0x03
    23cc:	8a 83       	std	Y+2, r24	; 0x02
    23ce:	7d 83       	std	Y+5, r23	; 0x05
    23d0:	6c 83       	std	Y+4, r22	; 0x04
	u8 LOC_u8_Temp = *PTR_u8Num1 ;
    23d2:	ea 81       	ldd	r30, Y+2	; 0x02
    23d4:	fb 81       	ldd	r31, Y+3	; 0x03
    23d6:	80 81       	ld	r24, Z
    23d8:	89 83       	std	Y+1, r24	; 0x01
	*PTR_u8Num1 = *PTR_u8Num2 ;
    23da:	ec 81       	ldd	r30, Y+4	; 0x04
    23dc:	fd 81       	ldd	r31, Y+5	; 0x05
    23de:	80 81       	ld	r24, Z
    23e0:	ea 81       	ldd	r30, Y+2	; 0x02
    23e2:	fb 81       	ldd	r31, Y+3	; 0x03
    23e4:	80 83       	st	Z, r24
	*PTR_u8Num2 = LOC_u8_Temp ;
    23e6:	ec 81       	ldd	r30, Y+4	; 0x04
    23e8:	fd 81       	ldd	r31, Y+5	; 0x05
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	80 83       	st	Z, r24
}
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <reverse>:

static void reverse(u8 *PTR_u8Arr,u8 Copy_u8Length){
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	00 d0       	rcall	.+0      	; 0x2404 <reverse+0x6>
    2404:	00 d0       	rcall	.+0      	; 0x2406 <reverse+0x8>
    2406:	0f 92       	push	r0
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	9c 83       	std	Y+4, r25	; 0x04
    240e:	8b 83       	std	Y+3, r24	; 0x03
    2410:	6d 83       	std	Y+5, r22	; 0x05
	u8 LOC_u8Start = 0 ;
    2412:	1a 82       	std	Y+2, r1	; 0x02
	u8 LOC_u8End   = Copy_u8Length-1;
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	81 50       	subi	r24, 0x01	; 1
    2418:	89 83       	std	Y+1, r24	; 0x01
    241a:	19 c0       	rjmp	.+50     	; 0x244e <reverse+0x50>
	while(LOC_u8Start<LOC_u8End){
		swap(&PTR_u8Arr[LOC_u8Start],&PTR_u8Arr[LOC_u8End]);
    241c:	8a 81       	ldd	r24, Y+2	; 0x02
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	8b 81       	ldd	r24, Y+3	; 0x03
    2424:	9c 81       	ldd	r25, Y+4	; 0x04
    2426:	ac 01       	movw	r20, r24
    2428:	42 0f       	add	r20, r18
    242a:	53 1f       	adc	r21, r19
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	28 2f       	mov	r18, r24
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	8b 81       	ldd	r24, Y+3	; 0x03
    2434:	9c 81       	ldd	r25, Y+4	; 0x04
    2436:	28 0f       	add	r18, r24
    2438:	39 1f       	adc	r19, r25
    243a:	ca 01       	movw	r24, r20
    243c:	b9 01       	movw	r22, r18
    243e:	0e 94 de 11 	call	0x23bc	; 0x23bc <swap>
		LOC_u8Start++;
    2442:	8a 81       	ldd	r24, Y+2	; 0x02
    2444:	8f 5f       	subi	r24, 0xFF	; 255
    2446:	8a 83       	std	Y+2, r24	; 0x02
		LOC_u8End--;
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	81 50       	subi	r24, 0x01	; 1
    244c:	89 83       	std	Y+1, r24	; 0x01
}

static void reverse(u8 *PTR_u8Arr,u8 Copy_u8Length){
	u8 LOC_u8Start = 0 ;
	u8 LOC_u8End   = Copy_u8Length-1;
	while(LOC_u8Start<LOC_u8End){
    244e:	9a 81       	ldd	r25, Y+2	; 0x02
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	98 17       	cp	r25, r24
    2454:	18 f3       	brcs	.-58     	; 0x241c <reverse+0x1e>
		swap(&PTR_u8Arr[LOC_u8Start],&PTR_u8Arr[LOC_u8End]);
		LOC_u8Start++;
		LOC_u8End--;
	}

}
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <LCD_void_Write_Num>:

void LCD_void_Write_Num(u32 Copy_u32Num,u8 Copy_u8x_Pos,u8 Copy_u8y_Pos)
{
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	61 97       	sbiw	r28, 0x11	; 17
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	f8 94       	cli
    2474:	de bf       	out	0x3e, r29	; 62
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	cd bf       	out	0x3d, r28	; 61
    247a:	9f 87       	std	Y+15, r25	; 0x0f
    247c:	8e 87       	std	Y+14, r24	; 0x0e
    247e:	68 8b       	std	Y+16, r22	; 0x10
    2480:	49 8b       	std	Y+17, r20	; 0x11
	u8 LOC_u8Rem ;
	u8 LOC_u8ArrIndex = 0;
    2482:	19 82       	std	Y+1, r1	; 0x01
	u8 ARR_u8Str[11];
	if(Copy_u32Num ==0)
    2484:	8e 85       	ldd	r24, Y+14	; 0x0e
    2486:	9f 85       	ldd	r25, Y+15	; 0x0f
    2488:	00 97       	sbiw	r24, 0x00	; 0
    248a:	79 f5       	brne	.+94     	; 0x24ea <LCD_void_Write_Num+0x84>
	{
		ARR_u8Str[LOC_u8ArrIndex] = '0';
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	28 2f       	mov	r18, r24
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	ce 01       	movw	r24, r28
    2494:	03 96       	adiw	r24, 0x03	; 3
    2496:	fc 01       	movw	r30, r24
    2498:	e2 0f       	add	r30, r18
    249a:	f3 1f       	adc	r31, r19
    249c:	80 e3       	ldi	r24, 0x30	; 48
    249e:	80 83       	st	Z, r24
		LOC_u8ArrIndex++;
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	8f 5f       	subi	r24, 0xFF	; 255
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	21 c0       	rjmp	.+66     	; 0x24ea <LCD_void_Write_Num+0x84>
	}
	while(Copy_u32Num !=0){
		LOC_u8Rem = Copy_u32Num%10 ;
    24a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    24aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    24ac:	2a e0       	ldi	r18, 0x0A	; 10
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	b9 01       	movw	r22, r18
    24b2:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__udivmodhi4>
    24b6:	8a 83       	std	Y+2, r24	; 0x02
		ARR_u8Str[LOC_u8ArrIndex] = LOC_u8Rem + '0' ;
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	48 2f       	mov	r20, r24
    24c2:	40 5d       	subi	r20, 0xD0	; 208
    24c4:	ce 01       	movw	r24, r28
    24c6:	03 96       	adiw	r24, 0x03	; 3
    24c8:	fc 01       	movw	r30, r24
    24ca:	e2 0f       	add	r30, r18
    24cc:	f3 1f       	adc	r31, r19
    24ce:	40 83       	st	Z, r20
		LOC_u8ArrIndex++;
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	8f 5f       	subi	r24, 0xFF	; 255
    24d4:	89 83       	std	Y+1, r24	; 0x01
		Copy_u32Num = Copy_u32Num/10;
    24d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    24d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    24da:	2a e0       	ldi	r18, 0x0A	; 10
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	b9 01       	movw	r22, r18
    24e0:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__udivmodhi4>
    24e4:	cb 01       	movw	r24, r22
    24e6:	9f 87       	std	Y+15, r25	; 0x0f
    24e8:	8e 87       	std	Y+14, r24	; 0x0e
	if(Copy_u32Num ==0)
	{
		ARR_u8Str[LOC_u8ArrIndex] = '0';
		LOC_u8ArrIndex++;
	}
	while(Copy_u32Num !=0){
    24ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    24ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    24ee:	00 97       	sbiw	r24, 0x00	; 0
    24f0:	d9 f6       	brne	.-74     	; 0x24a8 <LCD_void_Write_Num+0x42>
		LOC_u8ArrIndex++;
		Copy_u32Num = Copy_u32Num/10;

	}

	ARR_u8Str[LOC_u8ArrIndex] = '\0';
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	28 2f       	mov	r18, r24
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	ce 01       	movw	r24, r28
    24fa:	03 96       	adiw	r24, 0x03	; 3
    24fc:	fc 01       	movw	r30, r24
    24fe:	e2 0f       	add	r30, r18
    2500:	f3 1f       	adc	r31, r19
    2502:	10 82       	st	Z, r1
	reverse(ARR_u8Str,LOC_u8ArrIndex);
    2504:	ce 01       	movw	r24, r28
    2506:	03 96       	adiw	r24, 0x03	; 3
    2508:	69 81       	ldd	r22, Y+1	; 0x01
    250a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <reverse>
	LCD_void_Write_String(ARR_u8Str,Copy_u8x_Pos,Copy_u8y_Pos);
    250e:	ce 01       	movw	r24, r28
    2510:	03 96       	adiw	r24, 0x03	; 3
    2512:	68 89       	ldd	r22, Y+16	; 0x10
    2514:	49 89       	ldd	r20, Y+17	; 0x11
    2516:	0e 94 39 11 	call	0x2272	; 0x2272 <LCD_void_Write_String>
}
    251a:	61 96       	adiw	r28, 0x11	; 17
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	08 95       	ret

0000252c <LCD_void_Wirte_Float_Num>:
	//LCD_void_Write_String(arr_final,Copy_u8x_Pos,Copy_u8y_Pos);
}*/


void LCD_void_Wirte_Float_Num(f32 Num)
{
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	aa 97       	sbiw	r28, 0x2a	; 42
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	6f a3       	std	Y+39, r22	; 0x27
    2542:	78 a7       	std	Y+40, r23	; 0x28
    2544:	89 a7       	std	Y+41, r24	; 0x29
    2546:	9a a7       	std	Y+42, r25	; 0x2a
	u8 arr_Dec[3];
	u8 arr_int[25];
	u32 temp,temp2,i=0,j=0,w=0;
    2548:	1e 82       	std	Y+6, r1	; 0x06
    254a:	1d 82       	std	Y+5, r1	; 0x05
    254c:	1c 82       	std	Y+4, r1	; 0x04
    254e:	1b 82       	std	Y+3, r1	; 0x03
    2550:	1a 82       	std	Y+2, r1	; 0x02
    2552:	19 82       	std	Y+1, r1	; 0x01
	// storing floating numbs in arr_Dec
	temp=Num*100;
    2554:	6f a1       	ldd	r22, Y+39	; 0x27
    2556:	78 a5       	ldd	r23, Y+40	; 0x28
    2558:	89 a5       	ldd	r24, Y+41	; 0x29
    255a:	9a a5       	ldd	r25, Y+42	; 0x2a
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	48 ec       	ldi	r20, 0xC8	; 200
    2562:	52 e4       	ldi	r21, 0x42	; 66
    2564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	bc 01       	movw	r22, r24
    256e:	cd 01       	movw	r24, r26
    2570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	9a 87       	std	Y+10, r25	; 0x0a
    257a:	89 87       	std	Y+9, r24	; 0x09
	arr_Dec[1]=temp%10;
    257c:	89 85       	ldd	r24, Y+9	; 0x09
    257e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2580:	2a e0       	ldi	r18, 0x0A	; 10
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	b9 01       	movw	r22, r18
    2586:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__udivmodhi4>
    258a:	8c 87       	std	Y+12, r24	; 0x0c
	temp/=10;
    258c:	89 85       	ldd	r24, Y+9	; 0x09
    258e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2590:	2a e0       	ldi	r18, 0x0A	; 10
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	b9 01       	movw	r22, r18
    2596:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__udivmodhi4>
    259a:	cb 01       	movw	r24, r22
    259c:	9a 87       	std	Y+10, r25	; 0x0a
    259e:	89 87       	std	Y+9, r24	; 0x09
	arr_Dec[0]=temp%10;
    25a0:	89 85       	ldd	r24, Y+9	; 0x09
    25a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a4:	2a e0       	ldi	r18, 0x0A	; 10
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	b9 01       	movw	r22, r18
    25aa:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__udivmodhi4>
    25ae:	8b 87       	std	Y+11, r24	; 0x0b
	temp/=10;
    25b0:	89 85       	ldd	r24, Y+9	; 0x09
    25b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b4:	2a e0       	ldi	r18, 0x0A	; 10
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	b9 01       	movw	r22, r18
    25ba:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__udivmodhi4>
    25be:	cb 01       	movw	r24, r22
    25c0:	9a 87       	std	Y+10, r25	; 0x0a
    25c2:	89 87       	std	Y+9, r24	; 0x09
	arr_Dec[2]='x';
    25c4:	88 e7       	ldi	r24, 0x78	; 120
    25c6:	8d 87       	std	Y+13, r24	; 0x0d
    25c8:	21 c0       	rjmp	.+66     	; 0x260c <LCD_void_Wirte_Float_Num+0xe0>
	while(temp!=0)
	{
		temp2=temp%10;
    25ca:	89 85       	ldd	r24, Y+9	; 0x09
    25cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ce:	2a e0       	ldi	r18, 0x0A	; 10
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	b9 01       	movw	r22, r18
    25d4:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__udivmodhi4>
    25d8:	98 87       	std	Y+8, r25	; 0x08
    25da:	8f 83       	std	Y+7, r24	; 0x07
		arr_int[i]=temp2;
    25dc:	2d 81       	ldd	r18, Y+5	; 0x05
    25de:	3e 81       	ldd	r19, Y+6	; 0x06
    25e0:	4f 81       	ldd	r20, Y+7	; 0x07
    25e2:	ce 01       	movw	r24, r28
    25e4:	0e 96       	adiw	r24, 0x0e	; 14
    25e6:	fc 01       	movw	r30, r24
    25e8:	e2 0f       	add	r30, r18
    25ea:	f3 1f       	adc	r31, r19
    25ec:	40 83       	st	Z, r20
		i++;
    25ee:	8d 81       	ldd	r24, Y+5	; 0x05
    25f0:	9e 81       	ldd	r25, Y+6	; 0x06
    25f2:	01 96       	adiw	r24, 0x01	; 1
    25f4:	9e 83       	std	Y+6, r25	; 0x06
    25f6:	8d 83       	std	Y+5, r24	; 0x05
		temp/=10;
    25f8:	89 85       	ldd	r24, Y+9	; 0x09
    25fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fc:	2a e0       	ldi	r18, 0x0A	; 10
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	b9 01       	movw	r22, r18
    2602:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__udivmodhi4>
    2606:	cb 01       	movw	r24, r22
    2608:	9a 87       	std	Y+10, r25	; 0x0a
    260a:	89 87       	std	Y+9, r24	; 0x09
	arr_Dec[1]=temp%10;
	temp/=10;
	arr_Dec[0]=temp%10;
	temp/=10;
	arr_Dec[2]='x';
	while(temp!=0)
    260c:	89 85       	ldd	r24, Y+9	; 0x09
    260e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	d9 f6       	brne	.-74     	; 0x25ca <LCD_void_Wirte_Float_Num+0x9e>
		temp2=temp%10;
		arr_int[i]=temp2;
		i++;
		temp/=10;
	}
	arr_int[i]='x';
    2614:	2d 81       	ldd	r18, Y+5	; 0x05
    2616:	3e 81       	ldd	r19, Y+6	; 0x06
    2618:	ce 01       	movw	r24, r28
    261a:	0e 96       	adiw	r24, 0x0e	; 14
    261c:	fc 01       	movw	r30, r24
    261e:	e2 0f       	add	r30, r18
    2620:	f3 1f       	adc	r31, r19
    2622:	88 e7       	ldi	r24, 0x78	; 120
    2624:	80 83       	st	Z, r24
	i--;
    2626:	8d 81       	ldd	r24, Y+5	; 0x05
    2628:	9e 81       	ldd	r25, Y+6	; 0x06
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	9e 83       	std	Y+6, r25	; 0x06
    262e:	8d 83       	std	Y+5, r24	; 0x05
    2630:	2f c0       	rjmp	.+94     	; 0x2690 <LCD_void_Wirte_Float_Num+0x164>
	// re arrange the array
	while(j<i)
	{
		// swap
		temp2=arr_int[j];
    2632:	2b 81       	ldd	r18, Y+3	; 0x03
    2634:	3c 81       	ldd	r19, Y+4	; 0x04
    2636:	ce 01       	movw	r24, r28
    2638:	0e 96       	adiw	r24, 0x0e	; 14
    263a:	fc 01       	movw	r30, r24
    263c:	e2 0f       	add	r30, r18
    263e:	f3 1f       	adc	r31, r19
    2640:	80 81       	ld	r24, Z
    2642:	88 2f       	mov	r24, r24
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	98 87       	std	Y+8, r25	; 0x08
    2648:	8f 83       	std	Y+7, r24	; 0x07
		arr_int[j]=arr_int[i];
    264a:	4b 81       	ldd	r20, Y+3	; 0x03
    264c:	5c 81       	ldd	r21, Y+4	; 0x04
    264e:	2d 81       	ldd	r18, Y+5	; 0x05
    2650:	3e 81       	ldd	r19, Y+6	; 0x06
    2652:	ce 01       	movw	r24, r28
    2654:	0e 96       	adiw	r24, 0x0e	; 14
    2656:	fc 01       	movw	r30, r24
    2658:	e2 0f       	add	r30, r18
    265a:	f3 1f       	adc	r31, r19
    265c:	20 81       	ld	r18, Z
    265e:	ce 01       	movw	r24, r28
    2660:	0e 96       	adiw	r24, 0x0e	; 14
    2662:	fc 01       	movw	r30, r24
    2664:	e4 0f       	add	r30, r20
    2666:	f5 1f       	adc	r31, r21
    2668:	20 83       	st	Z, r18
		arr_int[i]=temp2;
    266a:	2d 81       	ldd	r18, Y+5	; 0x05
    266c:	3e 81       	ldd	r19, Y+6	; 0x06
    266e:	4f 81       	ldd	r20, Y+7	; 0x07
    2670:	ce 01       	movw	r24, r28
    2672:	0e 96       	adiw	r24, 0x0e	; 14
    2674:	fc 01       	movw	r30, r24
    2676:	e2 0f       	add	r30, r18
    2678:	f3 1f       	adc	r31, r19
    267a:	40 83       	st	Z, r20
		j++;
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	9c 81       	ldd	r25, Y+4	; 0x04
    2680:	01 96       	adiw	r24, 0x01	; 1
    2682:	9c 83       	std	Y+4, r25	; 0x04
    2684:	8b 83       	std	Y+3, r24	; 0x03
		i--;
    2686:	8d 81       	ldd	r24, Y+5	; 0x05
    2688:	9e 81       	ldd	r25, Y+6	; 0x06
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	9e 83       	std	Y+6, r25	; 0x06
    268e:	8d 83       	std	Y+5, r24	; 0x05
		temp/=10;
	}
	arr_int[i]='x';
	i--;
	// re arrange the array
	while(j<i)
    2690:	2b 81       	ldd	r18, Y+3	; 0x03
    2692:	3c 81       	ldd	r19, Y+4	; 0x04
    2694:	8d 81       	ldd	r24, Y+5	; 0x05
    2696:	9e 81       	ldd	r25, Y+6	; 0x06
    2698:	28 17       	cp	r18, r24
    269a:	39 07       	cpc	r19, r25
    269c:	50 f2       	brcs	.-108    	; 0x2632 <LCD_void_Wirte_Float_Num+0x106>
    269e:	10 c0       	rjmp	.+32     	; 0x26c0 <LCD_void_Wirte_Float_Num+0x194>
		j++;
		i--;
	}
	while(arr_int[w]!='x')
	{
		LCD_void_Write_Data(arr_int[w]+'0');
    26a0:	29 81       	ldd	r18, Y+1	; 0x01
    26a2:	3a 81       	ldd	r19, Y+2	; 0x02
    26a4:	ce 01       	movw	r24, r28
    26a6:	0e 96       	adiw	r24, 0x0e	; 14
    26a8:	fc 01       	movw	r30, r24
    26aa:	e2 0f       	add	r30, r18
    26ac:	f3 1f       	adc	r31, r19
    26ae:	80 81       	ld	r24, Z
    26b0:	80 5d       	subi	r24, 0xD0	; 208
    26b2:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_void_Write_Data>

		w++;
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ba:	01 96       	adiw	r24, 0x01	; 1
    26bc:	9a 83       	std	Y+2, r25	; 0x02
    26be:	89 83       	std	Y+1, r24	; 0x01
		arr_int[j]=arr_int[i];
		arr_int[i]=temp2;
		j++;
		i--;
	}
	while(arr_int[w]!='x')
    26c0:	29 81       	ldd	r18, Y+1	; 0x01
    26c2:	3a 81       	ldd	r19, Y+2	; 0x02
    26c4:	ce 01       	movw	r24, r28
    26c6:	0e 96       	adiw	r24, 0x0e	; 14
    26c8:	fc 01       	movw	r30, r24
    26ca:	e2 0f       	add	r30, r18
    26cc:	f3 1f       	adc	r31, r19
    26ce:	80 81       	ld	r24, Z
    26d0:	88 37       	cpi	r24, 0x78	; 120
    26d2:	31 f7       	brne	.-52     	; 0x26a0 <LCD_void_Wirte_Float_Num+0x174>
	{
		LCD_void_Write_Data(arr_int[w]+'0');

		w++;
	}
	LCD_void_Write_Data('.');
    26d4:	8e e2       	ldi	r24, 0x2E	; 46
    26d6:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_void_Write_Data>

	w=0;
    26da:	1a 82       	std	Y+2, r1	; 0x02
    26dc:	19 82       	std	Y+1, r1	; 0x01
    26de:	10 c0       	rjmp	.+32     	; 0x2700 <LCD_void_Wirte_Float_Num+0x1d4>
	while(arr_Dec[w]!='x')
	{
		LCD_void_Write_Data(arr_Dec[w]+'0');
    26e0:	29 81       	ldd	r18, Y+1	; 0x01
    26e2:	3a 81       	ldd	r19, Y+2	; 0x02
    26e4:	ce 01       	movw	r24, r28
    26e6:	0b 96       	adiw	r24, 0x0b	; 11
    26e8:	fc 01       	movw	r30, r24
    26ea:	e2 0f       	add	r30, r18
    26ec:	f3 1f       	adc	r31, r19
    26ee:	80 81       	ld	r24, Z
    26f0:	80 5d       	subi	r24, 0xD0	; 208
    26f2:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_void_Write_Data>
		w++;
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	9a 81       	ldd	r25, Y+2	; 0x02
    26fa:	01 96       	adiw	r24, 0x01	; 1
    26fc:	9a 83       	std	Y+2, r25	; 0x02
    26fe:	89 83       	std	Y+1, r24	; 0x01
		w++;
	}
	LCD_void_Write_Data('.');

	w=0;
	while(arr_Dec[w]!='x')
    2700:	29 81       	ldd	r18, Y+1	; 0x01
    2702:	3a 81       	ldd	r19, Y+2	; 0x02
    2704:	ce 01       	movw	r24, r28
    2706:	0b 96       	adiw	r24, 0x0b	; 11
    2708:	fc 01       	movw	r30, r24
    270a:	e2 0f       	add	r30, r18
    270c:	f3 1f       	adc	r31, r19
    270e:	80 81       	ld	r24, Z
    2710:	88 37       	cpi	r24, 0x78	; 120
    2712:	31 f7       	brne	.-52     	; 0x26e0 <LCD_void_Wirte_Float_Num+0x1b4>
	}




}
    2714:	aa 96       	adiw	r28, 0x2a	; 42
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	08 95       	ret

00002726 <main>:
#include  "LCD_CONFIG.h"

volatile f32 result=0;
extern u32 flag;
void main (void)
{
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	62 97       	sbiw	r28, 0x12	; 18
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61



f32 analog;

	ADC_voidInit_Interrupt();
    273a:	0e 94 b6 07 	call	0xf6c	; 0xf6c <ADC_voidInit_Interrupt>
	LCD_void_Init();
    273e:	0e 94 22 0c 	call	0x1844	; 0x1844 <LCD_void_Init>
	// inti. ADC via interrupt mode the converted analog value in digital value
	ADC_u16Read_Interput();
    2742:	0e 94 2b 08 	call	0x1056	; 0x1056 <ADC_u16Read_Interput>

	while(1)
	{

		if (flag==1){
    2746:	80 91 68 01 	lds	r24, 0x0168
    274a:	90 91 69 01 	lds	r25, 0x0169
    274e:	81 30       	cpi	r24, 0x01	; 1
    2750:	91 05       	cpc	r25, r1
    2752:	c9 f7       	brne	.-14     	; 0x2746 <main+0x20>
		//	DIO_u8Set_Pin_value(GROUP_A,DIO_u8_PIN_1 ,DIO_u8_HIGH);
		//displaying on LCD 16x2 the digital value
		LCD_void_Wirte_Float_Num(result);
    2754:	80 91 6a 01 	lds	r24, 0x016A
    2758:	90 91 6b 01 	lds	r25, 0x016B
    275c:	a0 91 6c 01 	lds	r26, 0x016C
    2760:	b0 91 6d 01 	lds	r27, 0x016D
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 96 12 	call	0x252c	; 0x252c <LCD_void_Wirte_Float_Num>


		LCD_void_Write_Spaces(16);
    276c:	80 e1       	ldi	r24, 0x10	; 16
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_void_Write_Spaces>

		//calculating the analog value through this math equation
		analog= (result*5000)/1024.0;
    2774:	80 91 6a 01 	lds	r24, 0x016A
    2778:	90 91 6b 01 	lds	r25, 0x016B
    277c:	a0 91 6c 01 	lds	r26, 0x016C
    2780:	b0 91 6d 01 	lds	r27, 0x016D
    2784:	bc 01       	movw	r22, r24
    2786:	cd 01       	movw	r24, r26
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e4       	ldi	r19, 0x40	; 64
    278c:	4c e9       	ldi	r20, 0x9C	; 156
    278e:	55 e4       	ldi	r21, 0x45	; 69
    2790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e8       	ldi	r20, 0x80	; 128
    27a2:	54 e4       	ldi	r21, 0x44	; 68
    27a4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	8f 87       	std	Y+15, r24	; 0x0f
    27ae:	98 8b       	std	Y+16, r25	; 0x10
    27b0:	a9 8b       	std	Y+17, r26	; 0x11
    27b2:	ba 8b       	std	Y+18, r27	; 0x12

		//displaying on LCD 16x2 the analog value
		LCD_void_Wirte_Float_Num(analog);
    27b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    27b6:	98 89       	ldd	r25, Y+16	; 0x10
    27b8:	a9 89       	ldd	r26, Y+17	; 0x11
    27ba:	ba 89       	ldd	r27, Y+18	; 0x12
    27bc:	bc 01       	movw	r22, r24
    27be:	cd 01       	movw	r24, r26
    27c0:	0e 94 96 12 	call	0x252c	; 0x252c <LCD_void_Wirte_Float_Num>
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	aa ef       	ldi	r26, 0xFA	; 250
    27ca:	b3 e4       	ldi	r27, 0x43	; 67
    27cc:	8b 87       	std	Y+11, r24	; 0x0b
    27ce:	9c 87       	std	Y+12, r25	; 0x0c
    27d0:	ad 87       	std	Y+13, r26	; 0x0d
    27d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27da:	9e 85       	ldd	r25, Y+14	; 0x0e
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	4a ef       	ldi	r20, 0xFA	; 250
    27e2:	54 e4       	ldi	r21, 0x44	; 68
    27e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	8f 83       	std	Y+7, r24	; 0x07
    27ee:	98 87       	std	Y+8, r25	; 0x08
    27f0:	a9 87       	std	Y+9, r26	; 0x09
    27f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27f4:	6f 81       	ldd	r22, Y+7	; 0x07
    27f6:	78 85       	ldd	r23, Y+8	; 0x08
    27f8:	89 85       	ldd	r24, Y+9	; 0x09
    27fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e8       	ldi	r20, 0x80	; 128
    2802:	5f e3       	ldi	r21, 0x3F	; 63
    2804:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2808:	88 23       	and	r24, r24
    280a:	2c f4       	brge	.+10     	; 0x2816 <main+0xf0>
		__ticks = 1;
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	9e 83       	std	Y+6, r25	; 0x06
    2812:	8d 83       	std	Y+5, r24	; 0x05
    2814:	3f c0       	rjmp	.+126    	; 0x2894 <main+0x16e>
	else if (__tmp > 65535)
    2816:	6f 81       	ldd	r22, Y+7	; 0x07
    2818:	78 85       	ldd	r23, Y+8	; 0x08
    281a:	89 85       	ldd	r24, Y+9	; 0x09
    281c:	9a 85       	ldd	r25, Y+10	; 0x0a
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	3f ef       	ldi	r19, 0xFF	; 255
    2822:	4f e7       	ldi	r20, 0x7F	; 127
    2824:	57 e4       	ldi	r21, 0x47	; 71
    2826:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    282a:	18 16       	cp	r1, r24
    282c:	4c f5       	brge	.+82     	; 0x2880 <main+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2830:	7c 85       	ldd	r23, Y+12	; 0x0c
    2832:	8d 85       	ldd	r24, Y+13	; 0x0d
    2834:	9e 85       	ldd	r25, Y+14	; 0x0e
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	40 e2       	ldi	r20, 0x20	; 32
    283c:	51 e4       	ldi	r21, 0x41	; 65
    283e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	9e 83       	std	Y+6, r25	; 0x06
    2854:	8d 83       	std	Y+5, r24	; 0x05
    2856:	0f c0       	rjmp	.+30     	; 0x2876 <main+0x150>
    2858:	88 ec       	ldi	r24, 0xC8	; 200
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	9c 83       	std	Y+4, r25	; 0x04
    285e:	8b 83       	std	Y+3, r24	; 0x03
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
    2862:	9c 81       	ldd	r25, Y+4	; 0x04
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <main+0x13e>
    2868:	9c 83       	std	Y+4, r25	; 0x04
    286a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286c:	8d 81       	ldd	r24, Y+5	; 0x05
    286e:	9e 81       	ldd	r25, Y+6	; 0x06
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	9e 83       	std	Y+6, r25	; 0x06
    2874:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2876:	8d 81       	ldd	r24, Y+5	; 0x05
    2878:	9e 81       	ldd	r25, Y+6	; 0x06
    287a:	00 97       	sbiw	r24, 0x00	; 0
    287c:	69 f7       	brne	.-38     	; 0x2858 <main+0x132>
    287e:	14 c0       	rjmp	.+40     	; 0x28a8 <main+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2880:	6f 81       	ldd	r22, Y+7	; 0x07
    2882:	78 85       	ldd	r23, Y+8	; 0x08
    2884:	89 85       	ldd	r24, Y+9	; 0x09
    2886:	9a 85       	ldd	r25, Y+10	; 0x0a
    2888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	9e 83       	std	Y+6, r25	; 0x06
    2892:	8d 83       	std	Y+5, r24	; 0x05
    2894:	8d 81       	ldd	r24, Y+5	; 0x05
    2896:	9e 81       	ldd	r25, Y+6	; 0x06
    2898:	9a 83       	std	Y+2, r25	; 0x02
    289a:	89 83       	std	Y+1, r24	; 0x01
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	9a 81       	ldd	r25, Y+2	; 0x02
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <main+0x17a>
    28a4:	9a 83       	std	Y+2, r25	; 0x02
    28a6:	89 83       	std	Y+1, r24	; 0x01

		// waiting to see the result displayed on the LCD
		_delay_ms(500);
		//display clear the LCD to enable new value to be written
		LCD_void_Write_Cmd(Clear_LCD);
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_void_Write_Cmd>
		flag=0;
    28ae:	10 92 69 01 	sts	0x0169, r1
    28b2:	10 92 68 01 	sts	0x0168, r1
    28b6:	47 cf       	rjmp	.-370    	; 0x2746 <main+0x20>

000028b8 <__udivmodhi4>:
    28b8:	aa 1b       	sub	r26, r26
    28ba:	bb 1b       	sub	r27, r27
    28bc:	51 e1       	ldi	r21, 0x11	; 17
    28be:	07 c0       	rjmp	.+14     	; 0x28ce <__udivmodhi4_ep>

000028c0 <__udivmodhi4_loop>:
    28c0:	aa 1f       	adc	r26, r26
    28c2:	bb 1f       	adc	r27, r27
    28c4:	a6 17       	cp	r26, r22
    28c6:	b7 07       	cpc	r27, r23
    28c8:	10 f0       	brcs	.+4      	; 0x28ce <__udivmodhi4_ep>
    28ca:	a6 1b       	sub	r26, r22
    28cc:	b7 0b       	sbc	r27, r23

000028ce <__udivmodhi4_ep>:
    28ce:	88 1f       	adc	r24, r24
    28d0:	99 1f       	adc	r25, r25
    28d2:	5a 95       	dec	r21
    28d4:	a9 f7       	brne	.-22     	; 0x28c0 <__udivmodhi4_loop>
    28d6:	80 95       	com	r24
    28d8:	90 95       	com	r25
    28da:	bc 01       	movw	r22, r24
    28dc:	cd 01       	movw	r24, r26
    28de:	08 95       	ret

000028e0 <__prologue_saves__>:
    28e0:	2f 92       	push	r2
    28e2:	3f 92       	push	r3
    28e4:	4f 92       	push	r4
    28e6:	5f 92       	push	r5
    28e8:	6f 92       	push	r6
    28ea:	7f 92       	push	r7
    28ec:	8f 92       	push	r8
    28ee:	9f 92       	push	r9
    28f0:	af 92       	push	r10
    28f2:	bf 92       	push	r11
    28f4:	cf 92       	push	r12
    28f6:	df 92       	push	r13
    28f8:	ef 92       	push	r14
    28fa:	ff 92       	push	r15
    28fc:	0f 93       	push	r16
    28fe:	1f 93       	push	r17
    2900:	cf 93       	push	r28
    2902:	df 93       	push	r29
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
    2908:	ca 1b       	sub	r28, r26
    290a:	db 0b       	sbc	r29, r27
    290c:	0f b6       	in	r0, 0x3f	; 63
    290e:	f8 94       	cli
    2910:	de bf       	out	0x3e, r29	; 62
    2912:	0f be       	out	0x3f, r0	; 63
    2914:	cd bf       	out	0x3d, r28	; 61
    2916:	09 94       	ijmp

00002918 <__epilogue_restores__>:
    2918:	2a 88       	ldd	r2, Y+18	; 0x12
    291a:	39 88       	ldd	r3, Y+17	; 0x11
    291c:	48 88       	ldd	r4, Y+16	; 0x10
    291e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2920:	6e 84       	ldd	r6, Y+14	; 0x0e
    2922:	7d 84       	ldd	r7, Y+13	; 0x0d
    2924:	8c 84       	ldd	r8, Y+12	; 0x0c
    2926:	9b 84       	ldd	r9, Y+11	; 0x0b
    2928:	aa 84       	ldd	r10, Y+10	; 0x0a
    292a:	b9 84       	ldd	r11, Y+9	; 0x09
    292c:	c8 84       	ldd	r12, Y+8	; 0x08
    292e:	df 80       	ldd	r13, Y+7	; 0x07
    2930:	ee 80       	ldd	r14, Y+6	; 0x06
    2932:	fd 80       	ldd	r15, Y+5	; 0x05
    2934:	0c 81       	ldd	r16, Y+4	; 0x04
    2936:	1b 81       	ldd	r17, Y+3	; 0x03
    2938:	aa 81       	ldd	r26, Y+2	; 0x02
    293a:	b9 81       	ldd	r27, Y+1	; 0x01
    293c:	ce 0f       	add	r28, r30
    293e:	d1 1d       	adc	r29, r1
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	ed 01       	movw	r28, r26
    294c:	08 95       	ret

0000294e <_exit>:
    294e:	f8 94       	cli

00002950 <__stop_program>:
    2950:	ff cf       	rjmp	.-2      	; 0x2950 <__stop_program>
