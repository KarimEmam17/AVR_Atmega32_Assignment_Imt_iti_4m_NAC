
EXTERNAL_INTERRUPT_NEW_ONE_pluse_LAB1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e40  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  00000eb4  2**0
                  ALLOC
  2 .stab         00001020  00000000  00000000  00000eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a78  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ce 03 	jmp	0x79c	; 0x79c <__vector_1>
   8:	0c 94 01 04 	jmp	0x802	; 0x802 <__vector_2>
   c:	0c 94 34 04 	jmp	0x868	; 0x868 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <main>
  74:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8set_pin_value>:
#include "../MCAL/DIO/DIO_INTERFACE.h"



u8 DIO_u8set_pin_value(u8 Copy_u8_port_ID,u8 Copy_u8_pin_ID,u8 Copy_u8_pin_val)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_u8set_pin_value+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <DIO_u8set_pin_value+0x8>
  84:	00 d0       	rcall	.+0      	; 0x86 <DIO_u8set_pin_value+0xa>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	8a 83       	std	Y+2, r24	; 0x02
  8c:	6b 83       	std	Y+3, r22	; 0x03
  8e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
  90:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
  92:	8a 81       	ldd	r24, Y+2	; 0x02
  94:	84 30       	cpi	r24, 0x04	; 4
  96:	08 f0       	brcs	.+2      	; 0x9a <DIO_u8set_pin_value+0x1e>
  98:	e3 c0       	rjmp	.+454    	; 0x260 <DIO_u8set_pin_value+0x1e4>
	{
		if((Copy_u8_pin_ID>=MIN_u8_PIN_ID)&&(Copy_u8_pin_ID<=MAX_u8_PIN_ID))
  9a:	8b 81       	ldd	r24, Y+3	; 0x03
  9c:	88 30       	cpi	r24, 0x08	; 8
  9e:	08 f0       	brcs	.+2      	; 0xa2 <DIO_u8set_pin_value+0x26>
  a0:	dc c0       	rjmp	.+440    	; 0x25a <DIO_u8set_pin_value+0x1de>
		{
			if((Copy_u8_pin_val==MIN_u8_PIN_VAL)||(Copy_u8_pin_val==MAX_u8_PIN_VAL))
  a2:	8c 81       	ldd	r24, Y+4	; 0x04
  a4:	88 23       	and	r24, r24
  a6:	21 f0       	breq	.+8      	; 0xb0 <DIO_u8set_pin_value+0x34>
  a8:	8c 81       	ldd	r24, Y+4	; 0x04
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	09 f0       	breq	.+2      	; 0xb0 <DIO_u8set_pin_value+0x34>
  ae:	d2 c0       	rjmp	.+420    	; 0x254 <DIO_u8set_pin_value+0x1d8>
					{
						switch(Copy_u8_port_ID)
  b0:	8a 81       	ldd	r24, Y+2	; 0x02
  b2:	28 2f       	mov	r18, r24
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	3e 83       	std	Y+6, r19	; 0x06
  b8:	2d 83       	std	Y+5, r18	; 0x05
  ba:	8d 81       	ldd	r24, Y+5	; 0x05
  bc:	9e 81       	ldd	r25, Y+6	; 0x06
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	91 05       	cpc	r25, r1
  c2:	09 f4       	brne	.+2      	; 0xc6 <DIO_u8set_pin_value+0x4a>
  c4:	43 c0       	rjmp	.+134    	; 0x14c <DIO_u8set_pin_value+0xd0>
  c6:	2d 81       	ldd	r18, Y+5	; 0x05
  c8:	3e 81       	ldd	r19, Y+6	; 0x06
  ca:	22 30       	cpi	r18, 0x02	; 2
  cc:	31 05       	cpc	r19, r1
  ce:	2c f4       	brge	.+10     	; 0xda <DIO_u8set_pin_value+0x5e>
  d0:	8d 81       	ldd	r24, Y+5	; 0x05
  d2:	9e 81       	ldd	r25, Y+6	; 0x06
  d4:	00 97       	sbiw	r24, 0x00	; 0
  d6:	71 f0       	breq	.+28     	; 0xf4 <DIO_u8set_pin_value+0x78>
  d8:	c5 c0       	rjmp	.+394    	; 0x264 <DIO_u8set_pin_value+0x1e8>
  da:	2d 81       	ldd	r18, Y+5	; 0x05
  dc:	3e 81       	ldd	r19, Y+6	; 0x06
  de:	22 30       	cpi	r18, 0x02	; 2
  e0:	31 05       	cpc	r19, r1
  e2:	09 f4       	brne	.+2      	; 0xe6 <DIO_u8set_pin_value+0x6a>
  e4:	5f c0       	rjmp	.+190    	; 0x1a4 <DIO_u8set_pin_value+0x128>
  e6:	8d 81       	ldd	r24, Y+5	; 0x05
  e8:	9e 81       	ldd	r25, Y+6	; 0x06
  ea:	83 30       	cpi	r24, 0x03	; 3
  ec:	91 05       	cpc	r25, r1
  ee:	09 f4       	brne	.+2      	; 0xf2 <DIO_u8set_pin_value+0x76>
  f0:	85 c0       	rjmp	.+266    	; 0x1fc <DIO_u8set_pin_value+0x180>
  f2:	b8 c0       	rjmp	.+368    	; 0x264 <DIO_u8set_pin_value+0x1e8>
							{
								case GROUP_A:
									Assign_Bit(DIO_U8_PORTA,Copy_u8_pin_ID,Copy_u8_pin_val);
  f4:	8c 81       	ldd	r24, Y+4	; 0x04
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	a1 f4       	brne	.+40     	; 0x122 <DIO_u8set_pin_value+0xa6>
  fa:	ab e3       	ldi	r26, 0x3B	; 59
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	eb e3       	ldi	r30, 0x3B	; 59
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	48 2f       	mov	r20, r24
 106:	8b 81       	ldd	r24, Y+3	; 0x03
 108:	28 2f       	mov	r18, r24
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 2e       	mov	r0, r18
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_u8set_pin_value+0x9c>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	0a 94       	dec	r0
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_u8set_pin_value+0x98>
 11c:	84 2b       	or	r24, r20
 11e:	8c 93       	st	X, r24
 120:	a1 c0       	rjmp	.+322    	; 0x264 <DIO_u8set_pin_value+0x1e8>
 122:	ab e3       	ldi	r26, 0x3B	; 59
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	eb e3       	ldi	r30, 0x3B	; 59
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	48 2f       	mov	r20, r24
 12e:	8b 81       	ldd	r24, Y+3	; 0x03
 130:	28 2f       	mov	r18, r24
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 2e       	mov	r0, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_u8set_pin_value+0xc4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_u8set_pin_value+0xc0>
 144:	80 95       	com	r24
 146:	84 23       	and	r24, r20
 148:	8c 93       	st	X, r24
 14a:	8c c0       	rjmp	.+280    	; 0x264 <DIO_u8set_pin_value+0x1e8>
									break;
								case GROUP_B:
									Assign_Bit(DIO_U8_PORTB,Copy_u8_pin_ID,Copy_u8_pin_val);
 14c:	8c 81       	ldd	r24, Y+4	; 0x04
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	a1 f4       	brne	.+40     	; 0x17a <DIO_u8set_pin_value+0xfe>
 152:	a8 e3       	ldi	r26, 0x38	; 56
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	e8 e3       	ldi	r30, 0x38	; 56
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	48 2f       	mov	r20, r24
 15e:	8b 81       	ldd	r24, Y+3	; 0x03
 160:	28 2f       	mov	r18, r24
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 2e       	mov	r0, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_u8set_pin_value+0xf4>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_u8set_pin_value+0xf0>
 174:	84 2b       	or	r24, r20
 176:	8c 93       	st	X, r24
 178:	75 c0       	rjmp	.+234    	; 0x264 <DIO_u8set_pin_value+0x1e8>
 17a:	a8 e3       	ldi	r26, 0x38	; 56
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	e8 e3       	ldi	r30, 0x38	; 56
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	48 2f       	mov	r20, r24
 186:	8b 81       	ldd	r24, Y+3	; 0x03
 188:	28 2f       	mov	r18, r24
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 2e       	mov	r0, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_u8set_pin_value+0x11c>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_u8set_pin_value+0x118>
 19c:	80 95       	com	r24
 19e:	84 23       	and	r24, r20
 1a0:	8c 93       	st	X, r24
 1a2:	60 c0       	rjmp	.+192    	; 0x264 <DIO_u8set_pin_value+0x1e8>
									break;
								case GROUP_C:
									Assign_Bit(DIO_U8_PORTC,Copy_u8_pin_ID,Copy_u8_pin_val);
 1a4:	8c 81       	ldd	r24, Y+4	; 0x04
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	a1 f4       	brne	.+40     	; 0x1d2 <DIO_u8set_pin_value+0x156>
 1aa:	a5 e3       	ldi	r26, 0x35	; 53
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	e5 e3       	ldi	r30, 0x35	; 53
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	48 2f       	mov	r20, r24
 1b6:	8b 81       	ldd	r24, Y+3	; 0x03
 1b8:	28 2f       	mov	r18, r24
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 2e       	mov	r0, r18
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_u8set_pin_value+0x14c>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_u8set_pin_value+0x148>
 1cc:	84 2b       	or	r24, r20
 1ce:	8c 93       	st	X, r24
 1d0:	49 c0       	rjmp	.+146    	; 0x264 <DIO_u8set_pin_value+0x1e8>
 1d2:	a5 e3       	ldi	r26, 0x35	; 53
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	e5 e3       	ldi	r30, 0x35	; 53
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	48 2f       	mov	r20, r24
 1de:	8b 81       	ldd	r24, Y+3	; 0x03
 1e0:	28 2f       	mov	r18, r24
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 2e       	mov	r0, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_u8set_pin_value+0x174>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_u8set_pin_value+0x170>
 1f4:	80 95       	com	r24
 1f6:	84 23       	and	r24, r20
 1f8:	8c 93       	st	X, r24
 1fa:	34 c0       	rjmp	.+104    	; 0x264 <DIO_u8set_pin_value+0x1e8>
									break;
								case GROUP_D:
									Assign_Bit(DIO_U8_PORTD,Copy_u8_pin_ID,Copy_u8_pin_val);
 1fc:	8c 81       	ldd	r24, Y+4	; 0x04
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	a1 f4       	brne	.+40     	; 0x22a <DIO_u8set_pin_value+0x1ae>
 202:	a2 e3       	ldi	r26, 0x32	; 50
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	e2 e3       	ldi	r30, 0x32	; 50
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	48 2f       	mov	r20, r24
 20e:	8b 81       	ldd	r24, Y+3	; 0x03
 210:	28 2f       	mov	r18, r24
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 2e       	mov	r0, r18
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_u8set_pin_value+0x1a4>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	0a 94       	dec	r0
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_u8set_pin_value+0x1a0>
 224:	84 2b       	or	r24, r20
 226:	8c 93       	st	X, r24
 228:	1d c0       	rjmp	.+58     	; 0x264 <DIO_u8set_pin_value+0x1e8>
 22a:	a2 e3       	ldi	r26, 0x32	; 50
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	e2 e3       	ldi	r30, 0x32	; 50
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	48 2f       	mov	r20, r24
 236:	8b 81       	ldd	r24, Y+3	; 0x03
 238:	28 2f       	mov	r18, r24
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 2e       	mov	r0, r18
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_u8set_pin_value+0x1cc>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	0a 94       	dec	r0
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_u8set_pin_value+0x1c8>
 24c:	80 95       	com	r24
 24e:	84 23       	and	r24, r20
 250:	8c 93       	st	X, r24
 252:	08 c0       	rjmp	.+16     	; 0x264 <DIO_u8set_pin_value+0x1e8>

							}
					}
			else
				{
				Loc_u8Error_state=DIO_u8_PIN_VAL_ERROR;
 254:	89 e0       	ldi	r24, 0x09	; 9
 256:	89 83       	std	Y+1, r24	; 0x01
 258:	05 c0       	rjmp	.+10     	; 0x264 <DIO_u8set_pin_value+0x1e8>
				}

			}
		else
						{
			Loc_u8Error_state=DIO_u8_PIN_ID_ERROR;
 25a:	86 e0       	ldi	r24, 0x06	; 6
 25c:	89 83       	std	Y+1, r24	; 0x01
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_u8set_pin_value+0x1e8>


	}
	else
	{
			Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	89 83       	std	Y+1, r24	; 0x01
	}

	return Loc_u8Error_state;
 264:	89 81       	ldd	r24, Y+1	; 0x01
}
 266:	26 96       	adiw	r28, 0x06	; 6
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	f8 94       	cli
 26c:	de bf       	out	0x3e, r29	; 62
 26e:	0f be       	out	0x3f, r0	; 63
 270:	cd bf       	out	0x3d, r28	; 61
 272:	cf 91       	pop	r28
 274:	df 91       	pop	r29
 276:	08 95       	ret

00000278 <DIO_u8set_pin_dir>:

u8 DIO_u8set_pin_dir(u8 Copy_u8_port_ID,u8 Copy_u8_pin_ID,u8 Copy_u8_pin_dir)
{
 278:	df 93       	push	r29
 27a:	cf 93       	push	r28
 27c:	00 d0       	rcall	.+0      	; 0x27e <DIO_u8set_pin_dir+0x6>
 27e:	00 d0       	rcall	.+0      	; 0x280 <DIO_u8set_pin_dir+0x8>
 280:	00 d0       	rcall	.+0      	; 0x282 <DIO_u8set_pin_dir+0xa>
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	8a 83       	std	Y+2, r24	; 0x02
 288:	6b 83       	std	Y+3, r22	; 0x03
 28a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
 28c:	19 82       	std	Y+1, r1	; 0x01
		if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
 28e:	8a 81       	ldd	r24, Y+2	; 0x02
 290:	84 30       	cpi	r24, 0x04	; 4
 292:	08 f0       	brcs	.+2      	; 0x296 <DIO_u8set_pin_dir+0x1e>
 294:	e3 c0       	rjmp	.+454    	; 0x45c <DIO_u8set_pin_dir+0x1e4>
		{
			if((Copy_u8_pin_ID>=MIN_u8_PIN_ID)&&(Copy_u8_pin_ID<=MAX_u8_PIN_ID))
 296:	8b 81       	ldd	r24, Y+3	; 0x03
 298:	88 30       	cpi	r24, 0x08	; 8
 29a:	08 f0       	brcs	.+2      	; 0x29e <DIO_u8set_pin_dir+0x26>
 29c:	dc c0       	rjmp	.+440    	; 0x456 <DIO_u8set_pin_dir+0x1de>
			{
				if((Copy_u8_pin_dir==MIN_u8_PIN_DIR)||(Copy_u8_pin_dir==MAX_u8_PIN_DIR))
 29e:	8c 81       	ldd	r24, Y+4	; 0x04
 2a0:	88 23       	and	r24, r24
 2a2:	21 f0       	breq	.+8      	; 0x2ac <DIO_u8set_pin_dir+0x34>
 2a4:	8c 81       	ldd	r24, Y+4	; 0x04
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	09 f0       	breq	.+2      	; 0x2ac <DIO_u8set_pin_dir+0x34>
 2aa:	d2 c0       	rjmp	.+420    	; 0x450 <DIO_u8set_pin_dir+0x1d8>
						{
							switch(Copy_u8_port_ID)
 2ac:	8a 81       	ldd	r24, Y+2	; 0x02
 2ae:	28 2f       	mov	r18, r24
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	3e 83       	std	Y+6, r19	; 0x06
 2b4:	2d 83       	std	Y+5, r18	; 0x05
 2b6:	8d 81       	ldd	r24, Y+5	; 0x05
 2b8:	9e 81       	ldd	r25, Y+6	; 0x06
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	91 05       	cpc	r25, r1
 2be:	09 f4       	brne	.+2      	; 0x2c2 <DIO_u8set_pin_dir+0x4a>
 2c0:	43 c0       	rjmp	.+134    	; 0x348 <DIO_u8set_pin_dir+0xd0>
 2c2:	2d 81       	ldd	r18, Y+5	; 0x05
 2c4:	3e 81       	ldd	r19, Y+6	; 0x06
 2c6:	22 30       	cpi	r18, 0x02	; 2
 2c8:	31 05       	cpc	r19, r1
 2ca:	2c f4       	brge	.+10     	; 0x2d6 <DIO_u8set_pin_dir+0x5e>
 2cc:	8d 81       	ldd	r24, Y+5	; 0x05
 2ce:	9e 81       	ldd	r25, Y+6	; 0x06
 2d0:	00 97       	sbiw	r24, 0x00	; 0
 2d2:	71 f0       	breq	.+28     	; 0x2f0 <DIO_u8set_pin_dir+0x78>
 2d4:	c5 c0       	rjmp	.+394    	; 0x460 <DIO_u8set_pin_dir+0x1e8>
 2d6:	2d 81       	ldd	r18, Y+5	; 0x05
 2d8:	3e 81       	ldd	r19, Y+6	; 0x06
 2da:	22 30       	cpi	r18, 0x02	; 2
 2dc:	31 05       	cpc	r19, r1
 2de:	09 f4       	brne	.+2      	; 0x2e2 <DIO_u8set_pin_dir+0x6a>
 2e0:	5f c0       	rjmp	.+190    	; 0x3a0 <DIO_u8set_pin_dir+0x128>
 2e2:	8d 81       	ldd	r24, Y+5	; 0x05
 2e4:	9e 81       	ldd	r25, Y+6	; 0x06
 2e6:	83 30       	cpi	r24, 0x03	; 3
 2e8:	91 05       	cpc	r25, r1
 2ea:	09 f4       	brne	.+2      	; 0x2ee <DIO_u8set_pin_dir+0x76>
 2ec:	85 c0       	rjmp	.+266    	; 0x3f8 <DIO_u8set_pin_dir+0x180>
 2ee:	b8 c0       	rjmp	.+368    	; 0x460 <DIO_u8set_pin_dir+0x1e8>
								{
									case GROUP_A:
										Assign_Bit(DIO_U8_DDRA,Copy_u8_pin_ID,Copy_u8_pin_dir);
 2f0:	8c 81       	ldd	r24, Y+4	; 0x04
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	a1 f4       	brne	.+40     	; 0x31e <DIO_u8set_pin_dir+0xa6>
 2f6:	aa e3       	ldi	r26, 0x3A	; 58
 2f8:	b0 e0       	ldi	r27, 0x00	; 0
 2fa:	ea e3       	ldi	r30, 0x3A	; 58
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	48 2f       	mov	r20, r24
 302:	8b 81       	ldd	r24, Y+3	; 0x03
 304:	28 2f       	mov	r18, r24
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 2e       	mov	r0, r18
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_u8set_pin_dir+0x9c>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	0a 94       	dec	r0
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_u8set_pin_dir+0x98>
 318:	84 2b       	or	r24, r20
 31a:	8c 93       	st	X, r24
 31c:	a1 c0       	rjmp	.+322    	; 0x460 <DIO_u8set_pin_dir+0x1e8>
 31e:	aa e3       	ldi	r26, 0x3A	; 58
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	ea e3       	ldi	r30, 0x3A	; 58
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	48 2f       	mov	r20, r24
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	28 2f       	mov	r18, r24
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 2e       	mov	r0, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_u8set_pin_dir+0xc4>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_u8set_pin_dir+0xc0>
 340:	80 95       	com	r24
 342:	84 23       	and	r24, r20
 344:	8c 93       	st	X, r24
 346:	8c c0       	rjmp	.+280    	; 0x460 <DIO_u8set_pin_dir+0x1e8>
										break;
									case GROUP_B:
										Assign_Bit(DIO_U8_DDRB,Copy_u8_pin_ID,Copy_u8_pin_dir);
 348:	8c 81       	ldd	r24, Y+4	; 0x04
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	a1 f4       	brne	.+40     	; 0x376 <DIO_u8set_pin_dir+0xfe>
 34e:	a7 e3       	ldi	r26, 0x37	; 55
 350:	b0 e0       	ldi	r27, 0x00	; 0
 352:	e7 e3       	ldi	r30, 0x37	; 55
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	48 2f       	mov	r20, r24
 35a:	8b 81       	ldd	r24, Y+3	; 0x03
 35c:	28 2f       	mov	r18, r24
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 2e       	mov	r0, r18
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_u8set_pin_dir+0xf4>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	0a 94       	dec	r0
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_u8set_pin_dir+0xf0>
 370:	84 2b       	or	r24, r20
 372:	8c 93       	st	X, r24
 374:	75 c0       	rjmp	.+234    	; 0x460 <DIO_u8set_pin_dir+0x1e8>
 376:	a7 e3       	ldi	r26, 0x37	; 55
 378:	b0 e0       	ldi	r27, 0x00	; 0
 37a:	e7 e3       	ldi	r30, 0x37	; 55
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	48 2f       	mov	r20, r24
 382:	8b 81       	ldd	r24, Y+3	; 0x03
 384:	28 2f       	mov	r18, r24
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 2e       	mov	r0, r18
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_u8set_pin_dir+0x11c>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_u8set_pin_dir+0x118>
 398:	80 95       	com	r24
 39a:	84 23       	and	r24, r20
 39c:	8c 93       	st	X, r24
 39e:	60 c0       	rjmp	.+192    	; 0x460 <DIO_u8set_pin_dir+0x1e8>
										break;
									case GROUP_C:
										Assign_Bit(DIO_U8_DDRC,Copy_u8_pin_ID,Copy_u8_pin_dir);
 3a0:	8c 81       	ldd	r24, Y+4	; 0x04
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	a1 f4       	brne	.+40     	; 0x3ce <DIO_u8set_pin_dir+0x156>
 3a6:	a4 e3       	ldi	r26, 0x34	; 52
 3a8:	b0 e0       	ldi	r27, 0x00	; 0
 3aa:	e4 e3       	ldi	r30, 0x34	; 52
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	48 2f       	mov	r20, r24
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	28 2f       	mov	r18, r24
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 2e       	mov	r0, r18
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_u8set_pin_dir+0x14c>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	0a 94       	dec	r0
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_u8set_pin_dir+0x148>
 3c8:	84 2b       	or	r24, r20
 3ca:	8c 93       	st	X, r24
 3cc:	49 c0       	rjmp	.+146    	; 0x460 <DIO_u8set_pin_dir+0x1e8>
 3ce:	a4 e3       	ldi	r26, 0x34	; 52
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	e4 e3       	ldi	r30, 0x34	; 52
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	48 2f       	mov	r20, r24
 3da:	8b 81       	ldd	r24, Y+3	; 0x03
 3dc:	28 2f       	mov	r18, r24
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 2e       	mov	r0, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_u8set_pin_dir+0x174>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	0a 94       	dec	r0
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_u8set_pin_dir+0x170>
 3f0:	80 95       	com	r24
 3f2:	84 23       	and	r24, r20
 3f4:	8c 93       	st	X, r24
 3f6:	34 c0       	rjmp	.+104    	; 0x460 <DIO_u8set_pin_dir+0x1e8>
										break;
									case GROUP_D:
										Assign_Bit(DIO_U8_DDRD,Copy_u8_pin_ID,Copy_u8_pin_dir);
 3f8:	8c 81       	ldd	r24, Y+4	; 0x04
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	a1 f4       	brne	.+40     	; 0x426 <DIO_u8set_pin_dir+0x1ae>
 3fe:	a1 e3       	ldi	r26, 0x31	; 49
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	e1 e3       	ldi	r30, 0x31	; 49
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	48 2f       	mov	r20, r24
 40a:	8b 81       	ldd	r24, Y+3	; 0x03
 40c:	28 2f       	mov	r18, r24
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	02 2e       	mov	r0, r18
 416:	02 c0       	rjmp	.+4      	; 0x41c <DIO_u8set_pin_dir+0x1a4>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	0a 94       	dec	r0
 41e:	e2 f7       	brpl	.-8      	; 0x418 <DIO_u8set_pin_dir+0x1a0>
 420:	84 2b       	or	r24, r20
 422:	8c 93       	st	X, r24
 424:	1d c0       	rjmp	.+58     	; 0x460 <DIO_u8set_pin_dir+0x1e8>
 426:	a1 e3       	ldi	r26, 0x31	; 49
 428:	b0 e0       	ldi	r27, 0x00	; 0
 42a:	e1 e3       	ldi	r30, 0x31	; 49
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	48 2f       	mov	r20, r24
 432:	8b 81       	ldd	r24, Y+3	; 0x03
 434:	28 2f       	mov	r18, r24
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 2e       	mov	r0, r18
 43e:	02 c0       	rjmp	.+4      	; 0x444 <DIO_u8set_pin_dir+0x1cc>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	0a 94       	dec	r0
 446:	e2 f7       	brpl	.-8      	; 0x440 <DIO_u8set_pin_dir+0x1c8>
 448:	80 95       	com	r24
 44a:	84 23       	and	r24, r20
 44c:	8c 93       	st	X, r24
 44e:	08 c0       	rjmp	.+16     	; 0x460 <DIO_u8set_pin_dir+0x1e8>

								}
						}
				else
					{
					Loc_u8Error_state=DIO_u8_PIN_DIR_ERROR;
 450:	8c e0       	ldi	r24, 0x0C	; 12
 452:	89 83       	std	Y+1, r24	; 0x01
 454:	05 c0       	rjmp	.+10     	; 0x460 <DIO_u8set_pin_dir+0x1e8>
					}

				}
			else
							{
				Loc_u8Error_state=DIO_u8_PIN_ID_ERROR;
 456:	86 e0       	ldi	r24, 0x06	; 6
 458:	89 83       	std	Y+1, r24	; 0x01
 45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_u8set_pin_dir+0x1e8>


		}
		else
		{
				Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
 45c:	83 e0       	ldi	r24, 0x03	; 3
 45e:	89 83       	std	Y+1, r24	; 0x01
		}

		return Loc_u8Error_state;
 460:	89 81       	ldd	r24, Y+1	; 0x01

}
 462:	26 96       	adiw	r28, 0x06	; 6
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	f8 94       	cli
 468:	de bf       	out	0x3e, r29	; 62
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	cd bf       	out	0x3d, r28	; 61
 46e:	cf 91       	pop	r28
 470:	df 91       	pop	r29
 472:	08 95       	ret

00000474 <DIO_u8set_port_value>:

u8 DIO_u8set_port_value(u8 Copy_u8_port_ID,u8 Copy_u8_port_val)
{
 474:	df 93       	push	r29
 476:	cf 93       	push	r28
 478:	00 d0       	rcall	.+0      	; 0x47a <DIO_u8set_port_value+0x6>
 47a:	00 d0       	rcall	.+0      	; 0x47c <DIO_u8set_port_value+0x8>
 47c:	0f 92       	push	r0
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
 482:	8a 83       	std	Y+2, r24	; 0x02
 484:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
 486:	19 82       	std	Y+1, r1	; 0x01
			if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
 488:	8a 81       	ldd	r24, Y+2	; 0x02
 48a:	84 30       	cpi	r24, 0x04	; 4
 48c:	e0 f5       	brcc	.+120    	; 0x506 <DIO_u8set_port_value+0x92>
			{
				//solution  for this problem
					if((Copy_u8_port_val==MIN_u8_PORT_VAL)||(Copy_u8_port_val==MAX_u8_PORT_VAL))
 48e:	8b 81       	ldd	r24, Y+3	; 0x03
 490:	88 23       	and	r24, r24
 492:	19 f0       	breq	.+6      	; 0x49a <DIO_u8set_port_value+0x26>
 494:	8b 81       	ldd	r24, Y+3	; 0x03
 496:	8f 3f       	cpi	r24, 0xFF	; 255
 498:	99 f5       	brne	.+102    	; 0x500 <DIO_u8set_port_value+0x8c>
							{
								switch(Copy_u8_port_ID)
 49a:	8a 81       	ldd	r24, Y+2	; 0x02
 49c:	28 2f       	mov	r18, r24
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	3d 83       	std	Y+5, r19	; 0x05
 4a2:	2c 83       	std	Y+4, r18	; 0x04
 4a4:	8c 81       	ldd	r24, Y+4	; 0x04
 4a6:	9d 81       	ldd	r25, Y+5	; 0x05
 4a8:	81 30       	cpi	r24, 0x01	; 1
 4aa:	91 05       	cpc	r25, r1
 4ac:	d1 f0       	breq	.+52     	; 0x4e2 <DIO_u8set_port_value+0x6e>
 4ae:	2c 81       	ldd	r18, Y+4	; 0x04
 4b0:	3d 81       	ldd	r19, Y+5	; 0x05
 4b2:	22 30       	cpi	r18, 0x02	; 2
 4b4:	31 05       	cpc	r19, r1
 4b6:	2c f4       	brge	.+10     	; 0x4c2 <DIO_u8set_port_value+0x4e>
 4b8:	8c 81       	ldd	r24, Y+4	; 0x04
 4ba:	9d 81       	ldd	r25, Y+5	; 0x05
 4bc:	00 97       	sbiw	r24, 0x00	; 0
 4be:	61 f0       	breq	.+24     	; 0x4d8 <DIO_u8set_port_value+0x64>
 4c0:	24 c0       	rjmp	.+72     	; 0x50a <DIO_u8set_port_value+0x96>
 4c2:	2c 81       	ldd	r18, Y+4	; 0x04
 4c4:	3d 81       	ldd	r19, Y+5	; 0x05
 4c6:	22 30       	cpi	r18, 0x02	; 2
 4c8:	31 05       	cpc	r19, r1
 4ca:	81 f0       	breq	.+32     	; 0x4ec <DIO_u8set_port_value+0x78>
 4cc:	8c 81       	ldd	r24, Y+4	; 0x04
 4ce:	9d 81       	ldd	r25, Y+5	; 0x05
 4d0:	83 30       	cpi	r24, 0x03	; 3
 4d2:	91 05       	cpc	r25, r1
 4d4:	81 f0       	breq	.+32     	; 0x4f6 <DIO_u8set_port_value+0x82>
 4d6:	19 c0       	rjmp	.+50     	; 0x50a <DIO_u8set_port_value+0x96>
									{
										case GROUP_A:
											DIO_U8_PORTA=Copy_u8_port_val;
 4d8:	eb e3       	ldi	r30, 0x3B	; 59
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	8b 81       	ldd	r24, Y+3	; 0x03
 4de:	80 83       	st	Z, r24
 4e0:	14 c0       	rjmp	.+40     	; 0x50a <DIO_u8set_port_value+0x96>
											//Assign_Bit(DIO_U8_PORTA,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_B:
											DIO_U8_PORTB=Copy_u8_port_val;
 4e2:	e8 e3       	ldi	r30, 0x38	; 56
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	8b 81       	ldd	r24, Y+3	; 0x03
 4e8:	80 83       	st	Z, r24
 4ea:	0f c0       	rjmp	.+30     	; 0x50a <DIO_u8set_port_value+0x96>
											//Assign_Bit(DIO_U8_PORTB,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_C:
											DIO_U8_PORTC=Copy_u8_port_val;
 4ec:	e5 e3       	ldi	r30, 0x35	; 53
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	8b 81       	ldd	r24, Y+3	; 0x03
 4f2:	80 83       	st	Z, r24
 4f4:	0a c0       	rjmp	.+20     	; 0x50a <DIO_u8set_port_value+0x96>
											//Assign_Bit(DIO_U8_PORTC,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_D:
											DIO_U8_PORTD=Copy_u8_port_val;
 4f6:	e2 e3       	ldi	r30, 0x32	; 50
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	8b 81       	ldd	r24, Y+3	; 0x03
 4fc:	80 83       	st	Z, r24
 4fe:	05 c0       	rjmp	.+10     	; 0x50a <DIO_u8set_port_value+0x96>

									}
							}
					else
						{
						Loc_u8Error_state=DIO_u8_PORT_VAL_ERROR;
 500:	8f e0       	ldi	r24, 0x0F	; 15
 502:	89 83       	std	Y+1, r24	; 0x01
 504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_u8set_port_value+0x96>

			}

			else
			{
					Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
 506:	83 e0       	ldi	r24, 0x03	; 3
 508:	89 83       	std	Y+1, r24	; 0x01
			}

			return Loc_u8Error_state;
 50a:	89 81       	ldd	r24, Y+1	; 0x01
}
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	0f 90       	pop	r0
 516:	cf 91       	pop	r28
 518:	df 91       	pop	r29
 51a:	08 95       	ret

0000051c <DIO_u8set_port_dir>:

u8 DIO_u8set_port_dir(u8 Copy_u8_port_ID,u8 Copy_u8_port_dir)
{
 51c:	df 93       	push	r29
 51e:	cf 93       	push	r28
 520:	00 d0       	rcall	.+0      	; 0x522 <DIO_u8set_port_dir+0x6>
 522:	00 d0       	rcall	.+0      	; 0x524 <DIO_u8set_port_dir+0x8>
 524:	0f 92       	push	r0
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
 52a:	8a 83       	std	Y+2, r24	; 0x02
 52c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
 52e:	19 82       	std	Y+1, r1	; 0x01
			if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
 530:	8a 81       	ldd	r24, Y+2	; 0x02
 532:	84 30       	cpi	r24, 0x04	; 4
 534:	e0 f5       	brcc	.+120    	; 0x5ae <DIO_u8set_port_dir+0x92>
			{
				//solution  for this problem
					if((Copy_u8_port_dir==MIN_u8_PORT_DIR)||(Copy_u8_port_dir==MAX_u8_PORT_DIR))
 536:	8b 81       	ldd	r24, Y+3	; 0x03
 538:	88 23       	and	r24, r24
 53a:	19 f0       	breq	.+6      	; 0x542 <DIO_u8set_port_dir+0x26>
 53c:	8b 81       	ldd	r24, Y+3	; 0x03
 53e:	8f 3f       	cpi	r24, 0xFF	; 255
 540:	99 f5       	brne	.+102    	; 0x5a8 <DIO_u8set_port_dir+0x8c>
							{
								switch(Copy_u8_port_ID)
 542:	8a 81       	ldd	r24, Y+2	; 0x02
 544:	28 2f       	mov	r18, r24
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	3d 83       	std	Y+5, r19	; 0x05
 54a:	2c 83       	std	Y+4, r18	; 0x04
 54c:	8c 81       	ldd	r24, Y+4	; 0x04
 54e:	9d 81       	ldd	r25, Y+5	; 0x05
 550:	81 30       	cpi	r24, 0x01	; 1
 552:	91 05       	cpc	r25, r1
 554:	d1 f0       	breq	.+52     	; 0x58a <DIO_u8set_port_dir+0x6e>
 556:	2c 81       	ldd	r18, Y+4	; 0x04
 558:	3d 81       	ldd	r19, Y+5	; 0x05
 55a:	22 30       	cpi	r18, 0x02	; 2
 55c:	31 05       	cpc	r19, r1
 55e:	2c f4       	brge	.+10     	; 0x56a <DIO_u8set_port_dir+0x4e>
 560:	8c 81       	ldd	r24, Y+4	; 0x04
 562:	9d 81       	ldd	r25, Y+5	; 0x05
 564:	00 97       	sbiw	r24, 0x00	; 0
 566:	61 f0       	breq	.+24     	; 0x580 <DIO_u8set_port_dir+0x64>
 568:	24 c0       	rjmp	.+72     	; 0x5b2 <DIO_u8set_port_dir+0x96>
 56a:	2c 81       	ldd	r18, Y+4	; 0x04
 56c:	3d 81       	ldd	r19, Y+5	; 0x05
 56e:	22 30       	cpi	r18, 0x02	; 2
 570:	31 05       	cpc	r19, r1
 572:	81 f0       	breq	.+32     	; 0x594 <DIO_u8set_port_dir+0x78>
 574:	8c 81       	ldd	r24, Y+4	; 0x04
 576:	9d 81       	ldd	r25, Y+5	; 0x05
 578:	83 30       	cpi	r24, 0x03	; 3
 57a:	91 05       	cpc	r25, r1
 57c:	81 f0       	breq	.+32     	; 0x59e <DIO_u8set_port_dir+0x82>
 57e:	19 c0       	rjmp	.+50     	; 0x5b2 <DIO_u8set_port_dir+0x96>
									{
										case GROUP_A:
											DIO_U8_DDRA=Copy_u8_port_dir;
 580:	ea e3       	ldi	r30, 0x3A	; 58
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	8b 81       	ldd	r24, Y+3	; 0x03
 586:	80 83       	st	Z, r24
 588:	14 c0       	rjmp	.+40     	; 0x5b2 <DIO_u8set_port_dir+0x96>
											//Assign_Bit(DIO_U8_PORTA,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_B:
											DIO_U8_DDRB=Copy_u8_port_dir;
 58a:	e7 e3       	ldi	r30, 0x37	; 55
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	8b 81       	ldd	r24, Y+3	; 0x03
 590:	80 83       	st	Z, r24
 592:	0f c0       	rjmp	.+30     	; 0x5b2 <DIO_u8set_port_dir+0x96>
											//Assign_Bit(DIO_U8_PORTB,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_C:
											DIO_U8_DDRC=Copy_u8_port_dir;
 594:	e4 e3       	ldi	r30, 0x34	; 52
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	8b 81       	ldd	r24, Y+3	; 0x03
 59a:	80 83       	st	Z, r24
 59c:	0a c0       	rjmp	.+20     	; 0x5b2 <DIO_u8set_port_dir+0x96>
											//Assign_Bit(DIO_U8_PORTC,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_D:
											DIO_U8_DDRD=Copy_u8_port_dir;
 59e:	e1 e3       	ldi	r30, 0x31	; 49
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	8b 81       	ldd	r24, Y+3	; 0x03
 5a4:	80 83       	st	Z, r24
 5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <DIO_u8set_port_dir+0x96>

									}
							}
					else
						{
						Loc_u8Error_state=DIO_u8_PORT_DIR_ERROR;
 5a8:	82 e1       	ldi	r24, 0x12	; 18
 5aa:	89 83       	std	Y+1, r24	; 0x01
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_u8set_port_dir+0x96>

			}

			else
			{
					Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
 5ae:	83 e0       	ldi	r24, 0x03	; 3
 5b0:	89 83       	std	Y+1, r24	; 0x01
			}

			return Loc_u8Error_state;
 5b2:	89 81       	ldd	r24, Y+1	; 0x01
}
 5b4:	0f 90       	pop	r0
 5b6:	0f 90       	pop	r0
 5b8:	0f 90       	pop	r0
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
 5be:	cf 91       	pop	r28
 5c0:	df 91       	pop	r29
 5c2:	08 95       	ret

000005c4 <DIO_u8get_pin_value>:

u8 DIO_u8get_pin_value(u8 Copy_u8_port_ID,u8 Copy_u8_pin_ID,u8 *Copy_u8_pin_val)
{
 5c4:	df 93       	push	r29
 5c6:	cf 93       	push	r28
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
 5cc:	27 97       	sbiw	r28, 0x07	; 7
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	f8 94       	cli
 5d2:	de bf       	out	0x3e, r29	; 62
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	cd bf       	out	0x3d, r28	; 61
 5d8:	8a 83       	std	Y+2, r24	; 0x02
 5da:	6b 83       	std	Y+3, r22	; 0x03
 5dc:	5d 83       	std	Y+5, r21	; 0x05
 5de:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
 5e0:	19 82       	std	Y+1, r1	; 0x01
		if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
 5e2:	8a 81       	ldd	r24, Y+2	; 0x02
 5e4:	84 30       	cpi	r24, 0x04	; 4
 5e6:	08 f0       	brcs	.+2      	; 0x5ea <DIO_u8get_pin_value+0x26>
 5e8:	78 c0       	rjmp	.+240    	; 0x6da <DIO_u8get_pin_value+0x116>
		{
			if((Copy_u8_pin_ID>=MIN_u8_PIN_ID)&&(Copy_u8_pin_ID<=MAX_u8_PIN_ID))
 5ea:	8b 81       	ldd	r24, Y+3	; 0x03
 5ec:	88 30       	cpi	r24, 0x08	; 8
 5ee:	08 f0       	brcs	.+2      	; 0x5f2 <DIO_u8get_pin_value+0x2e>
 5f0:	71 c0       	rjmp	.+226    	; 0x6d4 <DIO_u8get_pin_value+0x110>
			{

							switch(Copy_u8_port_ID)
 5f2:	8a 81       	ldd	r24, Y+2	; 0x02
 5f4:	28 2f       	mov	r18, r24
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	3f 83       	std	Y+7, r19	; 0x07
 5fa:	2e 83       	std	Y+6, r18	; 0x06
 5fc:	4e 81       	ldd	r20, Y+6	; 0x06
 5fe:	5f 81       	ldd	r21, Y+7	; 0x07
 600:	41 30       	cpi	r20, 0x01	; 1
 602:	51 05       	cpc	r21, r1
 604:	59 f1       	breq	.+86     	; 0x65c <DIO_u8get_pin_value+0x98>
 606:	8e 81       	ldd	r24, Y+6	; 0x06
 608:	9f 81       	ldd	r25, Y+7	; 0x07
 60a:	82 30       	cpi	r24, 0x02	; 2
 60c:	91 05       	cpc	r25, r1
 60e:	34 f4       	brge	.+12     	; 0x61c <DIO_u8get_pin_value+0x58>
 610:	2e 81       	ldd	r18, Y+6	; 0x06
 612:	3f 81       	ldd	r19, Y+7	; 0x07
 614:	21 15       	cp	r18, r1
 616:	31 05       	cpc	r19, r1
 618:	69 f0       	breq	.+26     	; 0x634 <DIO_u8get_pin_value+0x70>
 61a:	61 c0       	rjmp	.+194    	; 0x6de <DIO_u8get_pin_value+0x11a>
 61c:	4e 81       	ldd	r20, Y+6	; 0x06
 61e:	5f 81       	ldd	r21, Y+7	; 0x07
 620:	42 30       	cpi	r20, 0x02	; 2
 622:	51 05       	cpc	r21, r1
 624:	79 f1       	breq	.+94     	; 0x684 <DIO_u8get_pin_value+0xc0>
 626:	8e 81       	ldd	r24, Y+6	; 0x06
 628:	9f 81       	ldd	r25, Y+7	; 0x07
 62a:	83 30       	cpi	r24, 0x03	; 3
 62c:	91 05       	cpc	r25, r1
 62e:	09 f4       	brne	.+2      	; 0x632 <DIO_u8get_pin_value+0x6e>
 630:	3d c0       	rjmp	.+122    	; 0x6ac <DIO_u8get_pin_value+0xe8>
 632:	55 c0       	rjmp	.+170    	; 0x6de <DIO_u8get_pin_value+0x11a>
								{
									case GROUP_A:
										*Copy_u8_pin_val = get_bit(DIO_U8_PINA,Copy_u8_pin_ID);
 634:	e9 e3       	ldi	r30, 0x39	; 57
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
 63a:	28 2f       	mov	r18, r24
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	8b 81       	ldd	r24, Y+3	; 0x03
 640:	88 2f       	mov	r24, r24
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	a9 01       	movw	r20, r18
 646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_u8get_pin_value+0x88>
 648:	55 95       	asr	r21
 64a:	47 95       	ror	r20
 64c:	8a 95       	dec	r24
 64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_u8get_pin_value+0x84>
 650:	ca 01       	movw	r24, r20
 652:	81 70       	andi	r24, 0x01	; 1
 654:	ec 81       	ldd	r30, Y+4	; 0x04
 656:	fd 81       	ldd	r31, Y+5	; 0x05
 658:	80 83       	st	Z, r24
 65a:	41 c0       	rjmp	.+130    	; 0x6de <DIO_u8get_pin_value+0x11a>
										break;
									case GROUP_B:
										*Copy_u8_pin_val = get_bit(DIO_U8_PINB,Copy_u8_pin_ID);
 65c:	e6 e3       	ldi	r30, 0x36	; 54
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	80 81       	ld	r24, Z
 662:	28 2f       	mov	r18, r24
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	8b 81       	ldd	r24, Y+3	; 0x03
 668:	88 2f       	mov	r24, r24
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	a9 01       	movw	r20, r18
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_u8get_pin_value+0xb0>
 670:	55 95       	asr	r21
 672:	47 95       	ror	r20
 674:	8a 95       	dec	r24
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_u8get_pin_value+0xac>
 678:	ca 01       	movw	r24, r20
 67a:	81 70       	andi	r24, 0x01	; 1
 67c:	ec 81       	ldd	r30, Y+4	; 0x04
 67e:	fd 81       	ldd	r31, Y+5	; 0x05
 680:	80 83       	st	Z, r24
 682:	2d c0       	rjmp	.+90     	; 0x6de <DIO_u8get_pin_value+0x11a>
										break;
									case GROUP_C:
										*Copy_u8_pin_val = get_bit(DIO_U8_PINC,Copy_u8_pin_ID);
 684:	e3 e3       	ldi	r30, 0x33	; 51
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	28 2f       	mov	r18, r24
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	8b 81       	ldd	r24, Y+3	; 0x03
 690:	88 2f       	mov	r24, r24
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	a9 01       	movw	r20, r18
 696:	02 c0       	rjmp	.+4      	; 0x69c <DIO_u8get_pin_value+0xd8>
 698:	55 95       	asr	r21
 69a:	47 95       	ror	r20
 69c:	8a 95       	dec	r24
 69e:	e2 f7       	brpl	.-8      	; 0x698 <DIO_u8get_pin_value+0xd4>
 6a0:	ca 01       	movw	r24, r20
 6a2:	81 70       	andi	r24, 0x01	; 1
 6a4:	ec 81       	ldd	r30, Y+4	; 0x04
 6a6:	fd 81       	ldd	r31, Y+5	; 0x05
 6a8:	80 83       	st	Z, r24
 6aa:	19 c0       	rjmp	.+50     	; 0x6de <DIO_u8get_pin_value+0x11a>
										break;
									case GROUP_D:
										*Copy_u8_pin_val = get_bit(DIO_U8_PIND,Copy_u8_pin_ID);
 6ac:	e0 e3       	ldi	r30, 0x30	; 48
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	80 81       	ld	r24, Z
 6b2:	28 2f       	mov	r18, r24
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	8b 81       	ldd	r24, Y+3	; 0x03
 6b8:	88 2f       	mov	r24, r24
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	a9 01       	movw	r20, r18
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <DIO_u8get_pin_value+0x100>
 6c0:	55 95       	asr	r21
 6c2:	47 95       	ror	r20
 6c4:	8a 95       	dec	r24
 6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <DIO_u8get_pin_value+0xfc>
 6c8:	ca 01       	movw	r24, r20
 6ca:	81 70       	andi	r24, 0x01	; 1
 6cc:	ec 81       	ldd	r30, Y+4	; 0x04
 6ce:	fd 81       	ldd	r31, Y+5	; 0x05
 6d0:	80 83       	st	Z, r24
 6d2:	05 c0       	rjmp	.+10     	; 0x6de <DIO_u8get_pin_value+0x11a>


				}
			else
							{
				Loc_u8Error_state=DIO_u8_PIN_ID_ERROR;
 6d4:	86 e0       	ldi	r24, 0x06	; 6
 6d6:	89 83       	std	Y+1, r24	; 0x01
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <DIO_u8get_pin_value+0x11a>


		}
		else
		{
				Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
 6da:	83 e0       	ldi	r24, 0x03	; 3
 6dc:	89 83       	std	Y+1, r24	; 0x01
		}

		return Loc_u8Error_state;
 6de:	89 81       	ldd	r24, Y+1	; 0x01
}
 6e0:	27 96       	adiw	r28, 0x07	; 7
 6e2:	0f b6       	in	r0, 0x3f	; 63
 6e4:	f8 94       	cli
 6e6:	de bf       	out	0x3e, r29	; 62
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	cd bf       	out	0x3d, r28	; 61
 6ec:	cf 91       	pop	r28
 6ee:	df 91       	pop	r29
 6f0:	08 95       	ret

000006f2 <DIO_u8Get_port_value>:

u8 DIO_u8Get_port_value(u8 Copy_u8_port_ID,u8 *Copy_u8_port_val)
{
 6f2:	df 93       	push	r29
 6f4:	cf 93       	push	r28
 6f6:	00 d0       	rcall	.+0      	; 0x6f8 <DIO_u8Get_port_value+0x6>
 6f8:	00 d0       	rcall	.+0      	; 0x6fa <DIO_u8Get_port_value+0x8>
 6fa:	00 d0       	rcall	.+0      	; 0x6fc <DIO_u8Get_port_value+0xa>
 6fc:	cd b7       	in	r28, 0x3d	; 61
 6fe:	de b7       	in	r29, 0x3e	; 62
 700:	8a 83       	std	Y+2, r24	; 0x02
 702:	7c 83       	std	Y+4, r23	; 0x04
 704:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
 706:	19 82       	std	Y+1, r1	; 0x01
			if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
 708:	8a 81       	ldd	r24, Y+2	; 0x02
 70a:	84 30       	cpi	r24, 0x04	; 4
 70c:	d8 f5       	brcc	.+118    	; 0x784 <DIO_u8Get_port_value+0x92>
			{

								switch(Copy_u8_port_ID)
 70e:	8a 81       	ldd	r24, Y+2	; 0x02
 710:	28 2f       	mov	r18, r24
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	3e 83       	std	Y+6, r19	; 0x06
 716:	2d 83       	std	Y+5, r18	; 0x05
 718:	8d 81       	ldd	r24, Y+5	; 0x05
 71a:	9e 81       	ldd	r25, Y+6	; 0x06
 71c:	81 30       	cpi	r24, 0x01	; 1
 71e:	91 05       	cpc	r25, r1
 720:	e1 f0       	breq	.+56     	; 0x75a <DIO_u8Get_port_value+0x68>
 722:	2d 81       	ldd	r18, Y+5	; 0x05
 724:	3e 81       	ldd	r19, Y+6	; 0x06
 726:	22 30       	cpi	r18, 0x02	; 2
 728:	31 05       	cpc	r19, r1
 72a:	2c f4       	brge	.+10     	; 0x736 <DIO_u8Get_port_value+0x44>
 72c:	8d 81       	ldd	r24, Y+5	; 0x05
 72e:	9e 81       	ldd	r25, Y+6	; 0x06
 730:	00 97       	sbiw	r24, 0x00	; 0
 732:	61 f0       	breq	.+24     	; 0x74c <DIO_u8Get_port_value+0x5a>
 734:	29 c0       	rjmp	.+82     	; 0x788 <DIO_u8Get_port_value+0x96>
 736:	2d 81       	ldd	r18, Y+5	; 0x05
 738:	3e 81       	ldd	r19, Y+6	; 0x06
 73a:	22 30       	cpi	r18, 0x02	; 2
 73c:	31 05       	cpc	r19, r1
 73e:	a1 f0       	breq	.+40     	; 0x768 <DIO_u8Get_port_value+0x76>
 740:	8d 81       	ldd	r24, Y+5	; 0x05
 742:	9e 81       	ldd	r25, Y+6	; 0x06
 744:	83 30       	cpi	r24, 0x03	; 3
 746:	91 05       	cpc	r25, r1
 748:	b1 f0       	breq	.+44     	; 0x776 <DIO_u8Get_port_value+0x84>
 74a:	1e c0       	rjmp	.+60     	; 0x788 <DIO_u8Get_port_value+0x96>
									{
										case GROUP_A:
											*Copy_u8_port_val = DIO_U8_PINA;
 74c:	e9 e3       	ldi	r30, 0x39	; 57
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	eb 81       	ldd	r30, Y+3	; 0x03
 754:	fc 81       	ldd	r31, Y+4	; 0x04
 756:	80 83       	st	Z, r24
 758:	17 c0       	rjmp	.+46     	; 0x788 <DIO_u8Get_port_value+0x96>
											break;
										case GROUP_B:
											*Copy_u8_port_val = DIO_U8_PINB;
 75a:	e6 e3       	ldi	r30, 0x36	; 54
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	80 81       	ld	r24, Z
 760:	eb 81       	ldd	r30, Y+3	; 0x03
 762:	fc 81       	ldd	r31, Y+4	; 0x04
 764:	80 83       	st	Z, r24
 766:	10 c0       	rjmp	.+32     	; 0x788 <DIO_u8Get_port_value+0x96>
											break;
										case GROUP_C:
											*Copy_u8_port_val = DIO_U8_PINC;
 768:	e3 e3       	ldi	r30, 0x33	; 51
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	80 81       	ld	r24, Z
 76e:	eb 81       	ldd	r30, Y+3	; 0x03
 770:	fc 81       	ldd	r31, Y+4	; 0x04
 772:	80 83       	st	Z, r24
 774:	09 c0       	rjmp	.+18     	; 0x788 <DIO_u8Get_port_value+0x96>
											break;
										case GROUP_D:
											*Copy_u8_port_val =DIO_U8_PIND;
 776:	e0 e3       	ldi	r30, 0x30	; 48
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	80 81       	ld	r24, Z
 77c:	eb 81       	ldd	r30, Y+3	; 0x03
 77e:	fc 81       	ldd	r31, Y+4	; 0x04
 780:	80 83       	st	Z, r24
 782:	02 c0       	rjmp	.+4      	; 0x788 <DIO_u8Get_port_value+0x96>

			}

			else
			{
					Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
 784:	83 e0       	ldi	r24, 0x03	; 3
 786:	89 83       	std	Y+1, r24	; 0x01
			}

			return Loc_u8Error_state;
 788:	89 81       	ldd	r24, Y+1	; 0x01

}
 78a:	26 96       	adiw	r28, 0x06	; 6
 78c:	0f b6       	in	r0, 0x3f	; 63
 78e:	f8 94       	cli
 790:	de bf       	out	0x3e, r29	; 62
 792:	0f be       	out	0x3f, r0	; 63
 794:	cd bf       	out	0x3d, r28	; 61
 796:	cf 91       	pop	r28
 798:	df 91       	pop	r29
 79a:	08 95       	ret

0000079c <__vector_1>:
	DIO_u8set_pin_value   (GROUP_A,DIO_u8_PIN_0,DIO_u8_LOW);
	_delay_ms(1000);
}
*/
void __vector_1 (void)//interrupt0
{
 79c:	1f 92       	push	r1
 79e:	0f 92       	push	r0
 7a0:	0f b6       	in	r0, 0x3f	; 63
 7a2:	0f 92       	push	r0
 7a4:	11 24       	eor	r1, r1
 7a6:	2f 93       	push	r18
 7a8:	3f 93       	push	r19
 7aa:	4f 93       	push	r20
 7ac:	5f 93       	push	r21
 7ae:	6f 93       	push	r22
 7b0:	7f 93       	push	r23
 7b2:	8f 93       	push	r24
 7b4:	9f 93       	push	r25
 7b6:	af 93       	push	r26
 7b8:	bf 93       	push	r27
 7ba:	ef 93       	push	r30
 7bc:	ff 93       	push	r31
 7be:	df 93       	push	r29
 7c0:	cf 93       	push	r28
 7c2:	cd b7       	in	r28, 0x3d	; 61
 7c4:	de b7       	in	r29, 0x3e	; 62
	if(AvoidCallBack[0]!=NULL)
 7c6:	80 91 60 00 	lds	r24, 0x0060
 7ca:	90 91 61 00 	lds	r25, 0x0061
 7ce:	00 97       	sbiw	r24, 0x00	; 0
 7d0:	29 f0       	breq	.+10     	; 0x7dc <__vector_1+0x40>
	{AvoidCallBack[0]();}
 7d2:	e0 91 60 00 	lds	r30, 0x0060
 7d6:	f0 91 61 00 	lds	r31, 0x0061
 7da:	09 95       	icall

}
 7dc:	cf 91       	pop	r28
 7de:	df 91       	pop	r29
 7e0:	ff 91       	pop	r31
 7e2:	ef 91       	pop	r30
 7e4:	bf 91       	pop	r27
 7e6:	af 91       	pop	r26
 7e8:	9f 91       	pop	r25
 7ea:	8f 91       	pop	r24
 7ec:	7f 91       	pop	r23
 7ee:	6f 91       	pop	r22
 7f0:	5f 91       	pop	r21
 7f2:	4f 91       	pop	r20
 7f4:	3f 91       	pop	r19
 7f6:	2f 91       	pop	r18
 7f8:	0f 90       	pop	r0
 7fa:	0f be       	out	0x3f, r0	; 63
 7fc:	0f 90       	pop	r0
 7fe:	1f 90       	pop	r1
 800:	18 95       	reti

00000802 <__vector_2>:
void __vector_2 (void)//interrupt1
{
 802:	1f 92       	push	r1
 804:	0f 92       	push	r0
 806:	0f b6       	in	r0, 0x3f	; 63
 808:	0f 92       	push	r0
 80a:	11 24       	eor	r1, r1
 80c:	2f 93       	push	r18
 80e:	3f 93       	push	r19
 810:	4f 93       	push	r20
 812:	5f 93       	push	r21
 814:	6f 93       	push	r22
 816:	7f 93       	push	r23
 818:	8f 93       	push	r24
 81a:	9f 93       	push	r25
 81c:	af 93       	push	r26
 81e:	bf 93       	push	r27
 820:	ef 93       	push	r30
 822:	ff 93       	push	r31
 824:	df 93       	push	r29
 826:	cf 93       	push	r28
 828:	cd b7       	in	r28, 0x3d	; 61
 82a:	de b7       	in	r29, 0x3e	; 62
	if(AvoidCallBack[1]!=NULL)
 82c:	80 91 62 00 	lds	r24, 0x0062
 830:	90 91 63 00 	lds	r25, 0x0063
 834:	00 97       	sbiw	r24, 0x00	; 0
 836:	29 f0       	breq	.+10     	; 0x842 <__vector_2+0x40>
	{AvoidCallBack[1]();}
 838:	e0 91 62 00 	lds	r30, 0x0062
 83c:	f0 91 63 00 	lds	r31, 0x0063
 840:	09 95       	icall

}
 842:	cf 91       	pop	r28
 844:	df 91       	pop	r29
 846:	ff 91       	pop	r31
 848:	ef 91       	pop	r30
 84a:	bf 91       	pop	r27
 84c:	af 91       	pop	r26
 84e:	9f 91       	pop	r25
 850:	8f 91       	pop	r24
 852:	7f 91       	pop	r23
 854:	6f 91       	pop	r22
 856:	5f 91       	pop	r21
 858:	4f 91       	pop	r20
 85a:	3f 91       	pop	r19
 85c:	2f 91       	pop	r18
 85e:	0f 90       	pop	r0
 860:	0f be       	out	0x3f, r0	; 63
 862:	0f 90       	pop	r0
 864:	1f 90       	pop	r1
 866:	18 95       	reti

00000868 <__vector_3>:
void __vector_3 (void)//interrupt2
{
 868:	1f 92       	push	r1
 86a:	0f 92       	push	r0
 86c:	0f b6       	in	r0, 0x3f	; 63
 86e:	0f 92       	push	r0
 870:	11 24       	eor	r1, r1
 872:	2f 93       	push	r18
 874:	3f 93       	push	r19
 876:	4f 93       	push	r20
 878:	5f 93       	push	r21
 87a:	6f 93       	push	r22
 87c:	7f 93       	push	r23
 87e:	8f 93       	push	r24
 880:	9f 93       	push	r25
 882:	af 93       	push	r26
 884:	bf 93       	push	r27
 886:	ef 93       	push	r30
 888:	ff 93       	push	r31
 88a:	df 93       	push	r29
 88c:	cf 93       	push	r28
 88e:	cd b7       	in	r28, 0x3d	; 61
 890:	de b7       	in	r29, 0x3e	; 62
	if(AvoidCallBack[2]!=NULL)
 892:	80 91 64 00 	lds	r24, 0x0064
 896:	90 91 65 00 	lds	r25, 0x0065
 89a:	00 97       	sbiw	r24, 0x00	; 0
 89c:	29 f0       	breq	.+10     	; 0x8a8 <__vector_3+0x40>
	{
	AvoidCallBack[2]();
 89e:	e0 91 64 00 	lds	r30, 0x0064
 8a2:	f0 91 65 00 	lds	r31, 0x0065
 8a6:	09 95       	icall
	}
}
 8a8:	cf 91       	pop	r28
 8aa:	df 91       	pop	r29
 8ac:	ff 91       	pop	r31
 8ae:	ef 91       	pop	r30
 8b0:	bf 91       	pop	r27
 8b2:	af 91       	pop	r26
 8b4:	9f 91       	pop	r25
 8b6:	8f 91       	pop	r24
 8b8:	7f 91       	pop	r23
 8ba:	6f 91       	pop	r22
 8bc:	5f 91       	pop	r21
 8be:	4f 91       	pop	r20
 8c0:	3f 91       	pop	r19
 8c2:	2f 91       	pop	r18
 8c4:	0f 90       	pop	r0
 8c6:	0f be       	out	0x3f, r0	; 63
 8c8:	0f 90       	pop	r0
 8ca:	1f 90       	pop	r1
 8cc:	18 95       	reti

000008ce <EXTI_INIT>:

void EXTI_INIT(u8 Copy_u8INT_Index,u8 Copy_u8_Direct,u8 Copy_u8_Value)  // this function  to initial the  external interrupt ..1st is the exterint num
{																		//2nd is the direction 3rd isthe value if it pull up  or low
 8ce:	df 93       	push	r29
 8d0:	cf 93       	push	r28
 8d2:	00 d0       	rcall	.+0      	; 0x8d4 <EXTI_INIT+0x6>
 8d4:	00 d0       	rcall	.+0      	; 0x8d6 <EXTI_INIT+0x8>
 8d6:	0f 92       	push	r0
 8d8:	cd b7       	in	r28, 0x3d	; 61
 8da:	de b7       	in	r29, 0x3e	; 62
 8dc:	89 83       	std	Y+1, r24	; 0x01
 8de:	6a 83       	std	Y+2, r22	; 0x02
 8e0:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8INT_Index)
 8e2:	89 81       	ldd	r24, Y+1	; 0x01
 8e4:	28 2f       	mov	r18, r24
 8e6:	30 e0       	ldi	r19, 0x00	; 0
 8e8:	3d 83       	std	Y+5, r19	; 0x05
 8ea:	2c 83       	std	Y+4, r18	; 0x04
 8ec:	8c 81       	ldd	r24, Y+4	; 0x04
 8ee:	9d 81       	ldd	r25, Y+5	; 0x05
 8f0:	81 30       	cpi	r24, 0x01	; 1
 8f2:	91 05       	cpc	r25, r1
 8f4:	a1 f0       	breq	.+40     	; 0x91e <EXTI_INIT+0x50>
 8f6:	2c 81       	ldd	r18, Y+4	; 0x04
 8f8:	3d 81       	ldd	r19, Y+5	; 0x05
 8fa:	22 30       	cpi	r18, 0x02	; 2
 8fc:	31 05       	cpc	r19, r1
 8fe:	d1 f0       	breq	.+52     	; 0x934 <EXTI_INIT+0x66>
 900:	8c 81       	ldd	r24, Y+4	; 0x04
 902:	9d 81       	ldd	r25, Y+5	; 0x05
 904:	00 97       	sbiw	r24, 0x00	; 0
 906:	01 f5       	brne	.+64     	; 0x948 <EXTI_INIT+0x7a>
	{
		case EXTI_u8EXTI0:
			DIO_u8set_pin_dir(GROUP_D,DIO_u8_PIN_2,Copy_u8_Direct);
 908:	83 e0       	ldi	r24, 0x03	; 3
 90a:	62 e0       	ldi	r22, 0x02	; 2
 90c:	4a 81       	ldd	r20, Y+2	; 0x02
 90e:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_u8set_pin_dir>
			DIO_u8set_pin_value(GROUP_D,DIO_u8_PIN_2,Copy_u8_Value);
 912:	83 e0       	ldi	r24, 0x03	; 3
 914:	62 e0       	ldi	r22, 0x02	; 2
 916:	4b 81       	ldd	r20, Y+3	; 0x03
 918:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8set_pin_value>
 91c:	15 c0       	rjmp	.+42     	; 0x948 <EXTI_INIT+0x7a>
			break;

		case EXTI_u8EXTI1:
			DIO_u8set_pin_dir(GROUP_D,DIO_u8_PIN_3,Copy_u8_Direct);
 91e:	83 e0       	ldi	r24, 0x03	; 3
 920:	63 e0       	ldi	r22, 0x03	; 3
 922:	4a 81       	ldd	r20, Y+2	; 0x02
 924:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_u8set_pin_dir>
			DIO_u8set_pin_value(GROUP_D,DIO_u8_PIN_3,Copy_u8_Value);
 928:	83 e0       	ldi	r24, 0x03	; 3
 92a:	63 e0       	ldi	r22, 0x03	; 3
 92c:	4b 81       	ldd	r20, Y+3	; 0x03
 92e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8set_pin_value>
 932:	0a c0       	rjmp	.+20     	; 0x948 <EXTI_INIT+0x7a>
			break;


		case EXTI_u8EXTI2:
			DIO_u8set_pin_dir(GROUP_B,DIO_u8_PIN_2,Copy_u8_Direct);
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	62 e0       	ldi	r22, 0x02	; 2
 938:	4a 81       	ldd	r20, Y+2	; 0x02
 93a:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_u8set_pin_dir>
			DIO_u8set_pin_value(GROUP_B,DIO_u8_PIN_2,Copy_u8_Value);
 93e:	81 e0       	ldi	r24, 0x01	; 1
 940:	62 e0       	ldi	r22, 0x02	; 2
 942:	4b 81       	ldd	r20, Y+3	; 0x03
 944:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8set_pin_value>
			break;

	}


}
 948:	0f 90       	pop	r0
 94a:	0f 90       	pop	r0
 94c:	0f 90       	pop	r0
 94e:	0f 90       	pop	r0
 950:	0f 90       	pop	r0
 952:	cf 91       	pop	r28
 954:	df 91       	pop	r29
 956:	08 95       	ret

00000958 <EXTI_voidSet_MODE>:

void EXTI_voidSet_MODE(u8 Copy_u8_INT_Index, u8 Copy_u8INT_Level)
{
 958:	df 93       	push	r29
 95a:	cf 93       	push	r28
 95c:	00 d0       	rcall	.+0      	; 0x95e <EXTI_voidSet_MODE+0x6>
 95e:	00 d0       	rcall	.+0      	; 0x960 <EXTI_voidSet_MODE+0x8>
 960:	cd b7       	in	r28, 0x3d	; 61
 962:	de b7       	in	r29, 0x3e	; 62
 964:	89 83       	std	Y+1, r24	; 0x01
 966:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_INT_Index)
 968:	89 81       	ldd	r24, Y+1	; 0x01
 96a:	28 2f       	mov	r18, r24
 96c:	30 e0       	ldi	r19, 0x00	; 0
 96e:	3c 83       	std	Y+4, r19	; 0x04
 970:	2b 83       	std	Y+3, r18	; 0x03
 972:	8b 81       	ldd	r24, Y+3	; 0x03
 974:	9c 81       	ldd	r25, Y+4	; 0x04
 976:	81 30       	cpi	r24, 0x01	; 1
 978:	91 05       	cpc	r25, r1
 97a:	c9 f1       	breq	.+114    	; 0x9ee <EXTI_voidSet_MODE+0x96>
 97c:	2b 81       	ldd	r18, Y+3	; 0x03
 97e:	3c 81       	ldd	r19, Y+4	; 0x04
 980:	22 30       	cpi	r18, 0x02	; 2
 982:	31 05       	cpc	r19, r1
 984:	09 f4       	brne	.+2      	; 0x988 <EXTI_voidSet_MODE+0x30>
 986:	61 c0       	rjmp	.+194    	; 0xa4a <EXTI_voidSet_MODE+0xf2>
 988:	8b 81       	ldd	r24, Y+3	; 0x03
 98a:	9c 81       	ldd	r25, Y+4	; 0x04
 98c:	00 97       	sbiw	r24, 0x00	; 0
 98e:	09 f0       	breq	.+2      	; 0x992 <EXTI_voidSet_MODE+0x3a>
 990:	72 c0       	rjmp	.+228    	; 0xa76 <EXTI_voidSet_MODE+0x11e>
	{
	case EXTI_u8EXTI0:
		Assign_Bit(EXTI_u8_MCUCR,0,get_bit(Copy_u8INT_Level,0));
 992:	8a 81       	ldd	r24, Y+2	; 0x02
 994:	88 2f       	mov	r24, r24
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	81 70       	andi	r24, 0x01	; 1
 99a:	90 70       	andi	r25, 0x00	; 0
 99c:	88 23       	and	r24, r24
 99e:	41 f0       	breq	.+16     	; 0x9b0 <EXTI_voidSet_MODE+0x58>
 9a0:	a5 e5       	ldi	r26, 0x55	; 85
 9a2:	b0 e0       	ldi	r27, 0x00	; 0
 9a4:	e5 e5       	ldi	r30, 0x55	; 85
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	80 81       	ld	r24, Z
 9aa:	81 60       	ori	r24, 0x01	; 1
 9ac:	8c 93       	st	X, r24
 9ae:	07 c0       	rjmp	.+14     	; 0x9be <EXTI_voidSet_MODE+0x66>
 9b0:	a5 e5       	ldi	r26, 0x55	; 85
 9b2:	b0 e0       	ldi	r27, 0x00	; 0
 9b4:	e5 e5       	ldi	r30, 0x55	; 85
 9b6:	f0 e0       	ldi	r31, 0x00	; 0
 9b8:	80 81       	ld	r24, Z
 9ba:	8e 7f       	andi	r24, 0xFE	; 254
 9bc:	8c 93       	st	X, r24
		Assign_Bit(EXTI_u8_MCUCR,1,get_bit(Copy_u8INT_Level,1));
 9be:	8a 81       	ldd	r24, Y+2	; 0x02
 9c0:	86 95       	lsr	r24
 9c2:	88 2f       	mov	r24, r24
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	81 70       	andi	r24, 0x01	; 1
 9c8:	90 70       	andi	r25, 0x00	; 0
 9ca:	88 23       	and	r24, r24
 9cc:	41 f0       	breq	.+16     	; 0x9de <EXTI_voidSet_MODE+0x86>
 9ce:	a5 e5       	ldi	r26, 0x55	; 85
 9d0:	b0 e0       	ldi	r27, 0x00	; 0
 9d2:	e5 e5       	ldi	r30, 0x55	; 85
 9d4:	f0 e0       	ldi	r31, 0x00	; 0
 9d6:	80 81       	ld	r24, Z
 9d8:	82 60       	ori	r24, 0x02	; 2
 9da:	8c 93       	st	X, r24
 9dc:	4c c0       	rjmp	.+152    	; 0xa76 <EXTI_voidSet_MODE+0x11e>
 9de:	a5 e5       	ldi	r26, 0x55	; 85
 9e0:	b0 e0       	ldi	r27, 0x00	; 0
 9e2:	e5 e5       	ldi	r30, 0x55	; 85
 9e4:	f0 e0       	ldi	r31, 0x00	; 0
 9e6:	80 81       	ld	r24, Z
 9e8:	8d 7f       	andi	r24, 0xFD	; 253
 9ea:	8c 93       	st	X, r24
 9ec:	44 c0       	rjmp	.+136    	; 0xa76 <EXTI_voidSet_MODE+0x11e>
		break;
	case EXTI_u8EXTI1:
		Assign_Bit(EXTI_u8_MCUCR,2,get_bit(Copy_u8INT_Level,0));
 9ee:	8a 81       	ldd	r24, Y+2	; 0x02
 9f0:	88 2f       	mov	r24, r24
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	81 70       	andi	r24, 0x01	; 1
 9f6:	90 70       	andi	r25, 0x00	; 0
 9f8:	88 23       	and	r24, r24
 9fa:	41 f0       	breq	.+16     	; 0xa0c <EXTI_voidSet_MODE+0xb4>
 9fc:	a5 e5       	ldi	r26, 0x55	; 85
 9fe:	b0 e0       	ldi	r27, 0x00	; 0
 a00:	e5 e5       	ldi	r30, 0x55	; 85
 a02:	f0 e0       	ldi	r31, 0x00	; 0
 a04:	80 81       	ld	r24, Z
 a06:	84 60       	ori	r24, 0x04	; 4
 a08:	8c 93       	st	X, r24
 a0a:	07 c0       	rjmp	.+14     	; 0xa1a <EXTI_voidSet_MODE+0xc2>
 a0c:	a5 e5       	ldi	r26, 0x55	; 85
 a0e:	b0 e0       	ldi	r27, 0x00	; 0
 a10:	e5 e5       	ldi	r30, 0x55	; 85
 a12:	f0 e0       	ldi	r31, 0x00	; 0
 a14:	80 81       	ld	r24, Z
 a16:	8b 7f       	andi	r24, 0xFB	; 251
 a18:	8c 93       	st	X, r24
		Assign_Bit(EXTI_u8_MCUCR,3,get_bit(Copy_u8INT_Level,1));
 a1a:	8a 81       	ldd	r24, Y+2	; 0x02
 a1c:	86 95       	lsr	r24
 a1e:	88 2f       	mov	r24, r24
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	81 70       	andi	r24, 0x01	; 1
 a24:	90 70       	andi	r25, 0x00	; 0
 a26:	88 23       	and	r24, r24
 a28:	41 f0       	breq	.+16     	; 0xa3a <EXTI_voidSet_MODE+0xe2>
 a2a:	a5 e5       	ldi	r26, 0x55	; 85
 a2c:	b0 e0       	ldi	r27, 0x00	; 0
 a2e:	e5 e5       	ldi	r30, 0x55	; 85
 a30:	f0 e0       	ldi	r31, 0x00	; 0
 a32:	80 81       	ld	r24, Z
 a34:	88 60       	ori	r24, 0x08	; 8
 a36:	8c 93       	st	X, r24
 a38:	1e c0       	rjmp	.+60     	; 0xa76 <EXTI_voidSet_MODE+0x11e>
 a3a:	a5 e5       	ldi	r26, 0x55	; 85
 a3c:	b0 e0       	ldi	r27, 0x00	; 0
 a3e:	e5 e5       	ldi	r30, 0x55	; 85
 a40:	f0 e0       	ldi	r31, 0x00	; 0
 a42:	80 81       	ld	r24, Z
 a44:	87 7f       	andi	r24, 0xF7	; 247
 a46:	8c 93       	st	X, r24
 a48:	16 c0       	rjmp	.+44     	; 0xa76 <EXTI_voidSet_MODE+0x11e>
		break;
	case EXTI_u8EXTI2:

		Assign_Bit(EXTI_u8_MCUCSR,6,get_bit(Copy_u8INT_Level,0));
 a4a:	8a 81       	ldd	r24, Y+2	; 0x02
 a4c:	88 2f       	mov	r24, r24
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	81 70       	andi	r24, 0x01	; 1
 a52:	90 70       	andi	r25, 0x00	; 0
 a54:	88 23       	and	r24, r24
 a56:	41 f0       	breq	.+16     	; 0xa68 <EXTI_voidSet_MODE+0x110>
 a58:	a4 e5       	ldi	r26, 0x54	; 84
 a5a:	b0 e0       	ldi	r27, 0x00	; 0
 a5c:	e4 e5       	ldi	r30, 0x54	; 84
 a5e:	f0 e0       	ldi	r31, 0x00	; 0
 a60:	80 81       	ld	r24, Z
 a62:	80 64       	ori	r24, 0x40	; 64
 a64:	8c 93       	st	X, r24
 a66:	07 c0       	rjmp	.+14     	; 0xa76 <EXTI_voidSet_MODE+0x11e>
 a68:	a4 e5       	ldi	r26, 0x54	; 84
 a6a:	b0 e0       	ldi	r27, 0x00	; 0
 a6c:	e4 e5       	ldi	r30, 0x54	; 84
 a6e:	f0 e0       	ldi	r31, 0x00	; 0
 a70:	80 81       	ld	r24, Z
 a72:	8f 7b       	andi	r24, 0xBF	; 191
 a74:	8c 93       	st	X, r24

		break;
	}
}
 a76:	0f 90       	pop	r0
 a78:	0f 90       	pop	r0
 a7a:	0f 90       	pop	r0
 a7c:	0f 90       	pop	r0
 a7e:	cf 91       	pop	r28
 a80:	df 91       	pop	r29
 a82:	08 95       	ret

00000a84 <EXTI_voidSet_MODE_RUNTIME>:


void EXTI_voidSet_MODE_RUNTIME(u8 Copy_u8_INT_Index, u8 Copy_u8INT_Level)
{
 a84:	df 93       	push	r29
 a86:	cf 93       	push	r28
 a88:	00 d0       	rcall	.+0      	; 0xa8a <EXTI_voidSet_MODE_RUNTIME+0x6>
 a8a:	00 d0       	rcall	.+0      	; 0xa8c <EXTI_voidSet_MODE_RUNTIME+0x8>
 a8c:	cd b7       	in	r28, 0x3d	; 61
 a8e:	de b7       	in	r29, 0x3e	; 62
 a90:	89 83       	std	Y+1, r24	; 0x01
 a92:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_INT_Index)
 a94:	89 81       	ldd	r24, Y+1	; 0x01
 a96:	28 2f       	mov	r18, r24
 a98:	30 e0       	ldi	r19, 0x00	; 0
 a9a:	3c 83       	std	Y+4, r19	; 0x04
 a9c:	2b 83       	std	Y+3, r18	; 0x03
 a9e:	8b 81       	ldd	r24, Y+3	; 0x03
 aa0:	9c 81       	ldd	r25, Y+4	; 0x04
 aa2:	81 30       	cpi	r24, 0x01	; 1
 aa4:	91 05       	cpc	r25, r1
 aa6:	c9 f1       	breq	.+114    	; 0xb1a <EXTI_voidSet_MODE_RUNTIME+0x96>
 aa8:	2b 81       	ldd	r18, Y+3	; 0x03
 aaa:	3c 81       	ldd	r19, Y+4	; 0x04
 aac:	22 30       	cpi	r18, 0x02	; 2
 aae:	31 05       	cpc	r19, r1
 ab0:	09 f4       	brne	.+2      	; 0xab4 <EXTI_voidSet_MODE_RUNTIME+0x30>
 ab2:	61 c0       	rjmp	.+194    	; 0xb76 <EXTI_voidSet_MODE_RUNTIME+0xf2>
 ab4:	8b 81       	ldd	r24, Y+3	; 0x03
 ab6:	9c 81       	ldd	r25, Y+4	; 0x04
 ab8:	00 97       	sbiw	r24, 0x00	; 0
 aba:	09 f0       	breq	.+2      	; 0xabe <EXTI_voidSet_MODE_RUNTIME+0x3a>
 abc:	87 c0       	rjmp	.+270    	; 0xbcc <EXTI_voidSet_MODE_RUNTIME+0x148>
	{
	case EXTI_u8EXTI0:
		Assign_Bit(EXTI_u8_MCUCR,0,get_bit(Copy_u8INT_Level,0));
 abe:	8a 81       	ldd	r24, Y+2	; 0x02
 ac0:	88 2f       	mov	r24, r24
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	81 70       	andi	r24, 0x01	; 1
 ac6:	90 70       	andi	r25, 0x00	; 0
 ac8:	88 23       	and	r24, r24
 aca:	41 f0       	breq	.+16     	; 0xadc <EXTI_voidSet_MODE_RUNTIME+0x58>
 acc:	a5 e5       	ldi	r26, 0x55	; 85
 ace:	b0 e0       	ldi	r27, 0x00	; 0
 ad0:	e5 e5       	ldi	r30, 0x55	; 85
 ad2:	f0 e0       	ldi	r31, 0x00	; 0
 ad4:	80 81       	ld	r24, Z
 ad6:	81 60       	ori	r24, 0x01	; 1
 ad8:	8c 93       	st	X, r24
 ada:	07 c0       	rjmp	.+14     	; 0xaea <EXTI_voidSet_MODE_RUNTIME+0x66>
 adc:	a5 e5       	ldi	r26, 0x55	; 85
 ade:	b0 e0       	ldi	r27, 0x00	; 0
 ae0:	e5 e5       	ldi	r30, 0x55	; 85
 ae2:	f0 e0       	ldi	r31, 0x00	; 0
 ae4:	80 81       	ld	r24, Z
 ae6:	8e 7f       	andi	r24, 0xFE	; 254
 ae8:	8c 93       	st	X, r24
		Assign_Bit(EXTI_u8_MCUCR,1,get_bit(Copy_u8INT_Level,1));
 aea:	8a 81       	ldd	r24, Y+2	; 0x02
 aec:	86 95       	lsr	r24
 aee:	88 2f       	mov	r24, r24
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	81 70       	andi	r24, 0x01	; 1
 af4:	90 70       	andi	r25, 0x00	; 0
 af6:	88 23       	and	r24, r24
 af8:	41 f0       	breq	.+16     	; 0xb0a <EXTI_voidSet_MODE_RUNTIME+0x86>
 afa:	a5 e5       	ldi	r26, 0x55	; 85
 afc:	b0 e0       	ldi	r27, 0x00	; 0
 afe:	e5 e5       	ldi	r30, 0x55	; 85
 b00:	f0 e0       	ldi	r31, 0x00	; 0
 b02:	80 81       	ld	r24, Z
 b04:	82 60       	ori	r24, 0x02	; 2
 b06:	8c 93       	st	X, r24
 b08:	61 c0       	rjmp	.+194    	; 0xbcc <EXTI_voidSet_MODE_RUNTIME+0x148>
 b0a:	a5 e5       	ldi	r26, 0x55	; 85
 b0c:	b0 e0       	ldi	r27, 0x00	; 0
 b0e:	e5 e5       	ldi	r30, 0x55	; 85
 b10:	f0 e0       	ldi	r31, 0x00	; 0
 b12:	80 81       	ld	r24, Z
 b14:	8d 7f       	andi	r24, 0xFD	; 253
 b16:	8c 93       	st	X, r24
 b18:	59 c0       	rjmp	.+178    	; 0xbcc <EXTI_voidSet_MODE_RUNTIME+0x148>
		break;
	case EXTI_u8EXTI1:
		Assign_Bit(EXTI_u8_MCUCR,2,get_bit(Copy_u8INT_Level,0));
 b1a:	8a 81       	ldd	r24, Y+2	; 0x02
 b1c:	88 2f       	mov	r24, r24
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	81 70       	andi	r24, 0x01	; 1
 b22:	90 70       	andi	r25, 0x00	; 0
 b24:	88 23       	and	r24, r24
 b26:	41 f0       	breq	.+16     	; 0xb38 <EXTI_voidSet_MODE_RUNTIME+0xb4>
 b28:	a5 e5       	ldi	r26, 0x55	; 85
 b2a:	b0 e0       	ldi	r27, 0x00	; 0
 b2c:	e5 e5       	ldi	r30, 0x55	; 85
 b2e:	f0 e0       	ldi	r31, 0x00	; 0
 b30:	80 81       	ld	r24, Z
 b32:	84 60       	ori	r24, 0x04	; 4
 b34:	8c 93       	st	X, r24
 b36:	07 c0       	rjmp	.+14     	; 0xb46 <EXTI_voidSet_MODE_RUNTIME+0xc2>
 b38:	a5 e5       	ldi	r26, 0x55	; 85
 b3a:	b0 e0       	ldi	r27, 0x00	; 0
 b3c:	e5 e5       	ldi	r30, 0x55	; 85
 b3e:	f0 e0       	ldi	r31, 0x00	; 0
 b40:	80 81       	ld	r24, Z
 b42:	8b 7f       	andi	r24, 0xFB	; 251
 b44:	8c 93       	st	X, r24
		Assign_Bit(EXTI_u8_MCUCR,3,get_bit(Copy_u8INT_Level,1));
 b46:	8a 81       	ldd	r24, Y+2	; 0x02
 b48:	86 95       	lsr	r24
 b4a:	88 2f       	mov	r24, r24
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	81 70       	andi	r24, 0x01	; 1
 b50:	90 70       	andi	r25, 0x00	; 0
 b52:	88 23       	and	r24, r24
 b54:	41 f0       	breq	.+16     	; 0xb66 <EXTI_voidSet_MODE_RUNTIME+0xe2>
 b56:	a5 e5       	ldi	r26, 0x55	; 85
 b58:	b0 e0       	ldi	r27, 0x00	; 0
 b5a:	e5 e5       	ldi	r30, 0x55	; 85
 b5c:	f0 e0       	ldi	r31, 0x00	; 0
 b5e:	80 81       	ld	r24, Z
 b60:	88 60       	ori	r24, 0x08	; 8
 b62:	8c 93       	st	X, r24
 b64:	33 c0       	rjmp	.+102    	; 0xbcc <EXTI_voidSet_MODE_RUNTIME+0x148>
 b66:	a5 e5       	ldi	r26, 0x55	; 85
 b68:	b0 e0       	ldi	r27, 0x00	; 0
 b6a:	e5 e5       	ldi	r30, 0x55	; 85
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	80 81       	ld	r24, Z
 b70:	87 7f       	andi	r24, 0xF7	; 247
 b72:	8c 93       	st	X, r24
 b74:	2b c0       	rjmp	.+86     	; 0xbcc <EXTI_voidSet_MODE_RUNTIME+0x148>
		break;
	case EXTI_u8EXTI2:
		Assign_Bit(EXTI_u8_GICR,5,EXTI_u8DISABLE);
 b76:	ab e5       	ldi	r26, 0x5B	; 91
 b78:	b0 e0       	ldi	r27, 0x00	; 0
 b7a:	eb e5       	ldi	r30, 0x5B	; 91
 b7c:	f0 e0       	ldi	r31, 0x00	; 0
 b7e:	80 81       	ld	r24, Z
 b80:	8f 7d       	andi	r24, 0xDF	; 223
 b82:	8c 93       	st	X, r24
		Assign_Bit(EXTI_u8_MCUCSR,6,get_bit(Copy_u8INT_Level,0)); //this  is mentioned  p65 in  extint 2 section
 b84:	8a 81       	ldd	r24, Y+2	; 0x02
 b86:	88 2f       	mov	r24, r24
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	81 70       	andi	r24, 0x01	; 1
 b8c:	90 70       	andi	r25, 0x00	; 0
 b8e:	88 23       	and	r24, r24
 b90:	41 f0       	breq	.+16     	; 0xba2 <EXTI_voidSet_MODE_RUNTIME+0x11e>
 b92:	a4 e5       	ldi	r26, 0x54	; 84
 b94:	b0 e0       	ldi	r27, 0x00	; 0
 b96:	e4 e5       	ldi	r30, 0x54	; 84
 b98:	f0 e0       	ldi	r31, 0x00	; 0
 b9a:	80 81       	ld	r24, Z
 b9c:	80 64       	ori	r24, 0x40	; 64
 b9e:	8c 93       	st	X, r24
 ba0:	07 c0       	rjmp	.+14     	; 0xbb0 <EXTI_voidSet_MODE_RUNTIME+0x12c>
 ba2:	a4 e5       	ldi	r26, 0x54	; 84
 ba4:	b0 e0       	ldi	r27, 0x00	; 0
 ba6:	e4 e5       	ldi	r30, 0x54	; 84
 ba8:	f0 e0       	ldi	r31, 0x00	; 0
 baa:	80 81       	ld	r24, Z
 bac:	8f 7b       	andi	r24, 0xBF	; 191
 bae:	8c 93       	st	X, r24
		Assign_Bit(EXTI_u8_GIFR,5,EXTI_u8EXTI2_Clear_flag);
 bb0:	aa e5       	ldi	r26, 0x5A	; 90
 bb2:	b0 e0       	ldi	r27, 0x00	; 0
 bb4:	ea e5       	ldi	r30, 0x5A	; 90
 bb6:	f0 e0       	ldi	r31, 0x00	; 0
 bb8:	80 81       	ld	r24, Z
 bba:	80 62       	ori	r24, 0x20	; 32
 bbc:	8c 93       	st	X, r24
		Assign_Bit(EXTI_u8_GICR,5,EXTI_u8ENABLE);
 bbe:	ab e5       	ldi	r26, 0x5B	; 91
 bc0:	b0 e0       	ldi	r27, 0x00	; 0
 bc2:	eb e5       	ldi	r30, 0x5B	; 91
 bc4:	f0 e0       	ldi	r31, 0x00	; 0
 bc6:	80 81       	ld	r24, Z
 bc8:	80 62       	ori	r24, 0x20	; 32
 bca:	8c 93       	st	X, r24
		break;
	}
}
 bcc:	0f 90       	pop	r0
 bce:	0f 90       	pop	r0
 bd0:	0f 90       	pop	r0
 bd2:	0f 90       	pop	r0
 bd4:	cf 91       	pop	r28
 bd6:	df 91       	pop	r29
 bd8:	08 95       	ret

00000bda <EXTI_voidSET_CallBack>:

void EXTI_voidSET_CallBack(u8 Copy_u8INT_Index,void(*pvoidCallBack)(void))
{
 bda:	df 93       	push	r29
 bdc:	cf 93       	push	r28
 bde:	00 d0       	rcall	.+0      	; 0xbe0 <EXTI_voidSET_CallBack+0x6>
 be0:	0f 92       	push	r0
 be2:	cd b7       	in	r28, 0x3d	; 61
 be4:	de b7       	in	r29, 0x3e	; 62
 be6:	89 83       	std	Y+1, r24	; 0x01
 be8:	7b 83       	std	Y+3, r23	; 0x03
 bea:	6a 83       	std	Y+2, r22	; 0x02
	AvoidCallBack[Copy_u8INT_Index]= pvoidCallBack;
 bec:	89 81       	ldd	r24, Y+1	; 0x01
 bee:	88 2f       	mov	r24, r24
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	88 0f       	add	r24, r24
 bf4:	99 1f       	adc	r25, r25
 bf6:	fc 01       	movw	r30, r24
 bf8:	e0 5a       	subi	r30, 0xA0	; 160
 bfa:	ff 4f       	sbci	r31, 0xFF	; 255
 bfc:	8a 81       	ldd	r24, Y+2	; 0x02
 bfe:	9b 81       	ldd	r25, Y+3	; 0x03
 c00:	91 83       	std	Z+1, r25	; 0x01
 c02:	80 83       	st	Z, r24
}
 c04:	0f 90       	pop	r0
 c06:	0f 90       	pop	r0
 c08:	0f 90       	pop	r0
 c0a:	cf 91       	pop	r28
 c0c:	df 91       	pop	r29
 c0e:	08 95       	ret

00000c10 <EXTI_voidEnable>:




void EXTI_voidEnable(u8 Copy_u8_INT_Index)
{
 c10:	df 93       	push	r29
 c12:	cf 93       	push	r28
 c14:	00 d0       	rcall	.+0      	; 0xc16 <EXTI_voidEnable+0x6>
 c16:	0f 92       	push	r0
 c18:	cd b7       	in	r28, 0x3d	; 61
 c1a:	de b7       	in	r29, 0x3e	; 62
 c1c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_INT_Index)
 c1e:	89 81       	ldd	r24, Y+1	; 0x01
 c20:	28 2f       	mov	r18, r24
 c22:	30 e0       	ldi	r19, 0x00	; 0
 c24:	3b 83       	std	Y+3, r19	; 0x03
 c26:	2a 83       	std	Y+2, r18	; 0x02
 c28:	8a 81       	ldd	r24, Y+2	; 0x02
 c2a:	9b 81       	ldd	r25, Y+3	; 0x03
 c2c:	81 30       	cpi	r24, 0x01	; 1
 c2e:	91 05       	cpc	r25, r1
 c30:	89 f0       	breq	.+34     	; 0xc54 <EXTI_voidEnable+0x44>
 c32:	2a 81       	ldd	r18, Y+2	; 0x02
 c34:	3b 81       	ldd	r19, Y+3	; 0x03
 c36:	22 30       	cpi	r18, 0x02	; 2
 c38:	31 05       	cpc	r19, r1
 c3a:	a1 f0       	breq	.+40     	; 0xc64 <EXTI_voidEnable+0x54>
 c3c:	8a 81       	ldd	r24, Y+2	; 0x02
 c3e:	9b 81       	ldd	r25, Y+3	; 0x03
 c40:	00 97       	sbiw	r24, 0x00	; 0
 c42:	b9 f4       	brne	.+46     	; 0xc72 <EXTI_voidEnable+0x62>
	{
	case EXTI_u8EXTI0:
		Assign_Bit(EXTI_u8_GICR,6,EXTI_u8ENABLE);
 c44:	ab e5       	ldi	r26, 0x5B	; 91
 c46:	b0 e0       	ldi	r27, 0x00	; 0
 c48:	eb e5       	ldi	r30, 0x5B	; 91
 c4a:	f0 e0       	ldi	r31, 0x00	; 0
 c4c:	80 81       	ld	r24, Z
 c4e:	80 64       	ori	r24, 0x40	; 64
 c50:	8c 93       	st	X, r24
 c52:	0f c0       	rjmp	.+30     	; 0xc72 <EXTI_voidEnable+0x62>
		break;
	case EXTI_u8EXTI1:
		Assign_Bit(EXTI_u8_GICR,7,EXTI_u8ENABLE);
 c54:	ab e5       	ldi	r26, 0x5B	; 91
 c56:	b0 e0       	ldi	r27, 0x00	; 0
 c58:	eb e5       	ldi	r30, 0x5B	; 91
 c5a:	f0 e0       	ldi	r31, 0x00	; 0
 c5c:	80 81       	ld	r24, Z
 c5e:	80 68       	ori	r24, 0x80	; 128
 c60:	8c 93       	st	X, r24
 c62:	07 c0       	rjmp	.+14     	; 0xc72 <EXTI_voidEnable+0x62>
		break;
	case EXTI_u8EXTI2:
		Assign_Bit(EXTI_u8_GICR,5,EXTI_u8ENABLE);
 c64:	ab e5       	ldi	r26, 0x5B	; 91
 c66:	b0 e0       	ldi	r27, 0x00	; 0
 c68:	eb e5       	ldi	r30, 0x5B	; 91
 c6a:	f0 e0       	ldi	r31, 0x00	; 0
 c6c:	80 81       	ld	r24, Z
 c6e:	80 62       	ori	r24, 0x20	; 32
 c70:	8c 93       	st	X, r24
		break;
	}
}
 c72:	0f 90       	pop	r0
 c74:	0f 90       	pop	r0
 c76:	0f 90       	pop	r0
 c78:	cf 91       	pop	r28
 c7a:	df 91       	pop	r29
 c7c:	08 95       	ret

00000c7e <EXTI_voidDisable>:
void EXTI_voidDisable(u8 Copy_u8_INT_Index)
{
 c7e:	df 93       	push	r29
 c80:	cf 93       	push	r28
 c82:	00 d0       	rcall	.+0      	; 0xc84 <EXTI_voidDisable+0x6>
 c84:	0f 92       	push	r0
 c86:	cd b7       	in	r28, 0x3d	; 61
 c88:	de b7       	in	r29, 0x3e	; 62
 c8a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_INT_Index)
 c8c:	89 81       	ldd	r24, Y+1	; 0x01
 c8e:	28 2f       	mov	r18, r24
 c90:	30 e0       	ldi	r19, 0x00	; 0
 c92:	3b 83       	std	Y+3, r19	; 0x03
 c94:	2a 83       	std	Y+2, r18	; 0x02
 c96:	8a 81       	ldd	r24, Y+2	; 0x02
 c98:	9b 81       	ldd	r25, Y+3	; 0x03
 c9a:	81 30       	cpi	r24, 0x01	; 1
 c9c:	91 05       	cpc	r25, r1
 c9e:	89 f0       	breq	.+34     	; 0xcc2 <EXTI_voidDisable+0x44>
 ca0:	2a 81       	ldd	r18, Y+2	; 0x02
 ca2:	3b 81       	ldd	r19, Y+3	; 0x03
 ca4:	22 30       	cpi	r18, 0x02	; 2
 ca6:	31 05       	cpc	r19, r1
 ca8:	a1 f0       	breq	.+40     	; 0xcd2 <EXTI_voidDisable+0x54>
 caa:	8a 81       	ldd	r24, Y+2	; 0x02
 cac:	9b 81       	ldd	r25, Y+3	; 0x03
 cae:	00 97       	sbiw	r24, 0x00	; 0
 cb0:	b9 f4       	brne	.+46     	; 0xce0 <EXTI_voidDisable+0x62>
	{
	case EXTI_u8EXTI0:
		Assign_Bit(EXTI_u8_GICR,6,EXTI_u8DISABLE);
 cb2:	ab e5       	ldi	r26, 0x5B	; 91
 cb4:	b0 e0       	ldi	r27, 0x00	; 0
 cb6:	eb e5       	ldi	r30, 0x5B	; 91
 cb8:	f0 e0       	ldi	r31, 0x00	; 0
 cba:	80 81       	ld	r24, Z
 cbc:	8f 7b       	andi	r24, 0xBF	; 191
 cbe:	8c 93       	st	X, r24
 cc0:	0f c0       	rjmp	.+30     	; 0xce0 <EXTI_voidDisable+0x62>
		break;
	case EXTI_u8EXTI1:
		Assign_Bit(EXTI_u8_GICR,7,EXTI_u8DISABLE);
 cc2:	ab e5       	ldi	r26, 0x5B	; 91
 cc4:	b0 e0       	ldi	r27, 0x00	; 0
 cc6:	eb e5       	ldi	r30, 0x5B	; 91
 cc8:	f0 e0       	ldi	r31, 0x00	; 0
 cca:	80 81       	ld	r24, Z
 ccc:	8f 77       	andi	r24, 0x7F	; 127
 cce:	8c 93       	st	X, r24
 cd0:	07 c0       	rjmp	.+14     	; 0xce0 <EXTI_voidDisable+0x62>
		break;
	case EXTI_u8EXTI2:
		Assign_Bit(EXTI_u8_GICR,5,EXTI_u8DISABLE);
 cd2:	ab e5       	ldi	r26, 0x5B	; 91
 cd4:	b0 e0       	ldi	r27, 0x00	; 0
 cd6:	eb e5       	ldi	r30, 0x5B	; 91
 cd8:	f0 e0       	ldi	r31, 0x00	; 0
 cda:	80 81       	ld	r24, Z
 cdc:	8f 7d       	andi	r24, 0xDF	; 223
 cde:	8c 93       	st	X, r24
		break;
	}
}
 ce0:	0f 90       	pop	r0
 ce2:	0f 90       	pop	r0
 ce4:	0f 90       	pop	r0
 ce6:	cf 91       	pop	r28
 ce8:	df 91       	pop	r29
 cea:	08 95       	ret

00000cec <EXTI_voidGLOBAL_En_Dis>:


void EXTI_voidGLOBAL_En_Dis(u8 Copy_u8En_Dis)
{
 cec:	df 93       	push	r29
 cee:	cf 93       	push	r28
 cf0:	00 d0       	rcall	.+0      	; 0xcf2 <EXTI_voidGLOBAL_En_Dis+0x6>
 cf2:	0f 92       	push	r0
 cf4:	cd b7       	in	r28, 0x3d	; 61
 cf6:	de b7       	in	r29, 0x3e	; 62
 cf8:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8En_Dis)
 cfa:	89 81       	ldd	r24, Y+1	; 0x01
 cfc:	28 2f       	mov	r18, r24
 cfe:	30 e0       	ldi	r19, 0x00	; 0
 d00:	3b 83       	std	Y+3, r19	; 0x03
 d02:	2a 83       	std	Y+2, r18	; 0x02
 d04:	8a 81       	ldd	r24, Y+2	; 0x02
 d06:	9b 81       	ldd	r25, Y+3	; 0x03
 d08:	00 97       	sbiw	r24, 0x00	; 0
 d0a:	69 f0       	breq	.+26     	; 0xd26 <EXTI_voidGLOBAL_En_Dis+0x3a>
 d0c:	2a 81       	ldd	r18, Y+2	; 0x02
 d0e:	3b 81       	ldd	r19, Y+3	; 0x03
 d10:	21 30       	cpi	r18, 0x01	; 1
 d12:	31 05       	cpc	r19, r1
 d14:	79 f4       	brne	.+30     	; 0xd34 <EXTI_voidGLOBAL_En_Dis+0x48>
	{
		case EXTI_u8ENABLE:
			set_bit(EXTI_u8_SREG,7);
 d16:	af e5       	ldi	r26, 0x5F	; 95
 d18:	b0 e0       	ldi	r27, 0x00	; 0
 d1a:	ef e5       	ldi	r30, 0x5F	; 95
 d1c:	f0 e0       	ldi	r31, 0x00	; 0
 d1e:	80 81       	ld	r24, Z
 d20:	80 68       	ori	r24, 0x80	; 128
 d22:	8c 93       	st	X, r24
 d24:	07 c0       	rjmp	.+14     	; 0xd34 <EXTI_voidGLOBAL_En_Dis+0x48>
			break;

		case EXTI_u8DISABLE:
			clear_bit(EXTI_u8_SREG,7);
 d26:	af e5       	ldi	r26, 0x5F	; 95
 d28:	b0 e0       	ldi	r27, 0x00	; 0
 d2a:	ef e5       	ldi	r30, 0x5F	; 95
 d2c:	f0 e0       	ldi	r31, 0x00	; 0
 d2e:	80 81       	ld	r24, Z
 d30:	8f 77       	andi	r24, 0x7F	; 127
 d32:	8c 93       	st	X, r24
			break;

	}
}
 d34:	0f 90       	pop	r0
 d36:	0f 90       	pop	r0
 d38:	0f 90       	pop	r0
 d3a:	cf 91       	pop	r28
 d3c:	df 91       	pop	r29
 d3e:	08 95       	ret

00000d40 <BLink_LED0>:
#include "EXTERNAL_INTERRUPT_config.h"
#include "External_interface.h"

u8 flag0=0;
u8 flag1=0;
void BLink_LED0(void){
 d40:	df 93       	push	r29
 d42:	cf 93       	push	r28
 d44:	cd b7       	in	r28, 0x3d	; 61
 d46:	de b7       	in	r29, 0x3e	; 62
	if(flag0%2==0)
 d48:	80 91 66 00 	lds	r24, 0x0066
 d4c:	88 2f       	mov	r24, r24
 d4e:	90 e0       	ldi	r25, 0x00	; 0
 d50:	81 70       	andi	r24, 0x01	; 1
 d52:	90 70       	andi	r25, 0x00	; 0
 d54:	00 97       	sbiw	r24, 0x00	; 0
 d56:	59 f4       	brne	.+22     	; 0xd6e <BLink_LED0+0x2e>
	{
	DIO_u8set_pin_value(GROUP_A,DIO_u8_PIN_0,DIO_u8_HIGH);
 d58:	80 e0       	ldi	r24, 0x00	; 0
 d5a:	60 e0       	ldi	r22, 0x00	; 0
 d5c:	41 e0       	ldi	r20, 0x01	; 1
 d5e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8set_pin_value>
	flag0++;
 d62:	80 91 66 00 	lds	r24, 0x0066
 d66:	8f 5f       	subi	r24, 0xFF	; 255
 d68:	80 93 66 00 	sts	0x0066, r24
 d6c:	0a c0       	rjmp	.+20     	; 0xd82 <BLink_LED0+0x42>
	}
	else
	{
	DIO_u8set_pin_value(GROUP_A,DIO_u8_PIN_0,DIO_u8_LOW);
 d6e:	80 e0       	ldi	r24, 0x00	; 0
 d70:	60 e0       	ldi	r22, 0x00	; 0
 d72:	40 e0       	ldi	r20, 0x00	; 0
 d74:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8set_pin_value>
	flag0++;
 d78:	80 91 66 00 	lds	r24, 0x0066
 d7c:	8f 5f       	subi	r24, 0xFF	; 255
 d7e:	80 93 66 00 	sts	0x0066, r24
	}

}
 d82:	cf 91       	pop	r28
 d84:	df 91       	pop	r29
 d86:	08 95       	ret

00000d88 <BLink_LED1>:
void BLink_LED1(void){
 d88:	df 93       	push	r29
 d8a:	cf 93       	push	r28
 d8c:	cd b7       	in	r28, 0x3d	; 61
 d8e:	de b7       	in	r29, 0x3e	; 62
	if(flag1%2==0)
 d90:	80 91 67 00 	lds	r24, 0x0067
 d94:	88 2f       	mov	r24, r24
 d96:	90 e0       	ldi	r25, 0x00	; 0
 d98:	81 70       	andi	r24, 0x01	; 1
 d9a:	90 70       	andi	r25, 0x00	; 0
 d9c:	00 97       	sbiw	r24, 0x00	; 0
 d9e:	59 f4       	brne	.+22     	; 0xdb6 <BLink_LED1+0x2e>
	{
	DIO_u8set_pin_value(GROUP_A,DIO_u8_PIN_1,DIO_u8_HIGH);
 da0:	80 e0       	ldi	r24, 0x00	; 0
 da2:	61 e0       	ldi	r22, 0x01	; 1
 da4:	41 e0       	ldi	r20, 0x01	; 1
 da6:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8set_pin_value>
	flag1++;
 daa:	80 91 67 00 	lds	r24, 0x0067
 dae:	8f 5f       	subi	r24, 0xFF	; 255
 db0:	80 93 67 00 	sts	0x0067, r24
 db4:	0a c0       	rjmp	.+20     	; 0xdca <BLink_LED1+0x42>
	}
	else
	{
	DIO_u8set_pin_value(GROUP_A,DIO_u8_PIN_1,DIO_u8_LOW);
 db6:	80 e0       	ldi	r24, 0x00	; 0
 db8:	61 e0       	ldi	r22, 0x01	; 1
 dba:	40 e0       	ldi	r20, 0x00	; 0
 dbc:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8set_pin_value>
	flag1++;
 dc0:	80 91 67 00 	lds	r24, 0x0067
 dc4:	8f 5f       	subi	r24, 0xFF	; 255
 dc6:	80 93 67 00 	sts	0x0067, r24
	}
}
 dca:	cf 91       	pop	r28
 dcc:	df 91       	pop	r29
 dce:	08 95       	ret

00000dd0 <main>:


void main(void){
 dd0:	df 93       	push	r29
 dd2:	cf 93       	push	r28
 dd4:	cd b7       	in	r28, 0x3d	; 61
 dd6:	de b7       	in	r29, 0x3e	; 62
//lab 1 imt toggle 2LED
	EXTI_INIT(EXTI_u8EXTI0,DIO_u8_INPUT,DIO_u8_HIGH);
 dd8:	80 e0       	ldi	r24, 0x00	; 0
 dda:	60 e0       	ldi	r22, 0x00	; 0
 ddc:	41 e0       	ldi	r20, 0x01	; 1
 dde:	0e 94 67 04 	call	0x8ce	; 0x8ce <EXTI_INIT>
	EXTI_INIT(EXTI_u8EXTI1,DIO_u8_INPUT,DIO_u8_HIGH);
 de2:	81 e0       	ldi	r24, 0x01	; 1
 de4:	60 e0       	ldi	r22, 0x00	; 0
 de6:	41 e0       	ldi	r20, 0x01	; 1
 de8:	0e 94 67 04 	call	0x8ce	; 0x8ce <EXTI_INIT>

	DIO_u8set_pin_dir(GROUP_A,DIO_u8_PIN_0,DIO_u8_OUTPUT);
 dec:	80 e0       	ldi	r24, 0x00	; 0
 dee:	60 e0       	ldi	r22, 0x00	; 0
 df0:	41 e0       	ldi	r20, 0x01	; 1
 df2:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_u8set_pin_dir>
	DIO_u8set_pin_dir(GROUP_A,DIO_u8_PIN_1,DIO_u8_OUTPUT);
 df6:	80 e0       	ldi	r24, 0x00	; 0
 df8:	61 e0       	ldi	r22, 0x01	; 1
 dfa:	41 e0       	ldi	r20, 0x01	; 1
 dfc:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_u8set_pin_dir>


	EXTI_voidSET_CallBack(EXTI_u8EXTI0,BLink_LED0);
 e00:	20 ea       	ldi	r18, 0xA0	; 160
 e02:	36 e0       	ldi	r19, 0x06	; 6
 e04:	80 e0       	ldi	r24, 0x00	; 0
 e06:	b9 01       	movw	r22, r18
 e08:	0e 94 ed 05 	call	0xbda	; 0xbda <EXTI_voidSET_CallBack>
	EXTI_voidSET_CallBack(EXTI_u8EXTI1,BLink_LED1);
 e0c:	24 ec       	ldi	r18, 0xC4	; 196
 e0e:	36 e0       	ldi	r19, 0x06	; 6
 e10:	81 e0       	ldi	r24, 0x01	; 1
 e12:	b9 01       	movw	r22, r18
 e14:	0e 94 ed 05 	call	0xbda	; 0xbda <EXTI_voidSET_CallBack>
	EXTI_voidSet_MODE(EXTI_u8EXTI0,EXTI_u8EXTI0_FALLING_EDGE);
 e18:	80 e0       	ldi	r24, 0x00	; 0
 e1a:	62 e0       	ldi	r22, 0x02	; 2
 e1c:	0e 94 ac 04 	call	0x958	; 0x958 <EXTI_voidSet_MODE>
	EXTI_voidSet_MODE(EXTI_u8EXTI1,EXTI_u8EXTI1_FALLING_EDGE);
 e20:	81 e0       	ldi	r24, 0x01	; 1
 e22:	62 e0       	ldi	r22, 0x02	; 2
 e24:	0e 94 ac 04 	call	0x958	; 0x958 <EXTI_voidSet_MODE>
	EXTI_voidEnable(EXTI_u8EXTI0);
 e28:	80 e0       	ldi	r24, 0x00	; 0
 e2a:	0e 94 08 06 	call	0xc10	; 0xc10 <EXTI_voidEnable>
	EXTI_voidEnable(EXTI_u8EXTI1);
 e2e:	81 e0       	ldi	r24, 0x01	; 1
 e30:	0e 94 08 06 	call	0xc10	; 0xc10 <EXTI_voidEnable>
	EXTI_voidGLOBAL_En_Dis(EXTI_u8ENABLE);
 e34:	81 e0       	ldi	r24, 0x01	; 1
 e36:	0e 94 76 06 	call	0xcec	; 0xcec <EXTI_voidGLOBAL_En_Dis>
 e3a:	ff cf       	rjmp	.-2      	; 0xe3a <main+0x6a>

00000e3c <_exit>:
 e3c:	f8 94       	cli

00000e3e <__stop_program>:
 e3e:	ff cf       	rjmp	.-2      	; 0xe3e <__stop_program>
