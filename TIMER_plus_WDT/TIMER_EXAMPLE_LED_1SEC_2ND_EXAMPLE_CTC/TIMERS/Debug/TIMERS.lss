
TIMERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000812  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000b58  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000085c  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c6 03 	call	0x78c	; 0x78c <main>
  64:	0c 94 07 04 	jmp	0x80e	; 0x80e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8set_pin_value>:
#include "../MCAL/DIO/DIO_INTERFACE.h"



u8 DIO_u8set_pin_value(u8 Copy_u8_port_ID,u8 Copy_u8_pin_ID,u8 Copy_u8_pin_val)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_u8set_pin_value+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_u8set_pin_value+0x8>
  74:	00 d0       	rcall	.+0      	; 0x76 <DIO_u8set_pin_value+0xa>
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	8a 83       	std	Y+2, r24	; 0x02
  7c:	6b 83       	std	Y+3, r22	; 0x03
  7e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
  80:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
  82:	8a 81       	ldd	r24, Y+2	; 0x02
  84:	84 30       	cpi	r24, 0x04	; 4
  86:	08 f0       	brcs	.+2      	; 0x8a <DIO_u8set_pin_value+0x1e>
  88:	e3 c0       	rjmp	.+454    	; 0x250 <DIO_u8set_pin_value+0x1e4>
	{
		if((Copy_u8_pin_ID>=MIN_u8_PIN_ID)&&(Copy_u8_pin_ID<=MAX_u8_PIN_ID))
  8a:	8b 81       	ldd	r24, Y+3	; 0x03
  8c:	88 30       	cpi	r24, 0x08	; 8
  8e:	08 f0       	brcs	.+2      	; 0x92 <DIO_u8set_pin_value+0x26>
  90:	dc c0       	rjmp	.+440    	; 0x24a <DIO_u8set_pin_value+0x1de>
		{
			if((Copy_u8_pin_val==MIN_u8_PIN_VAL)||(Copy_u8_pin_val==MAX_u8_PIN_VAL))
  92:	8c 81       	ldd	r24, Y+4	; 0x04
  94:	88 23       	and	r24, r24
  96:	21 f0       	breq	.+8      	; 0xa0 <DIO_u8set_pin_value+0x34>
  98:	8c 81       	ldd	r24, Y+4	; 0x04
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_u8set_pin_value+0x34>
  9e:	d2 c0       	rjmp	.+420    	; 0x244 <DIO_u8set_pin_value+0x1d8>
					{
						switch(Copy_u8_port_ID)
  a0:	8a 81       	ldd	r24, Y+2	; 0x02
  a2:	28 2f       	mov	r18, r24
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	3e 83       	std	Y+6, r19	; 0x06
  a8:	2d 83       	std	Y+5, r18	; 0x05
  aa:	8d 81       	ldd	r24, Y+5	; 0x05
  ac:	9e 81       	ldd	r25, Y+6	; 0x06
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	91 05       	cpc	r25, r1
  b2:	09 f4       	brne	.+2      	; 0xb6 <DIO_u8set_pin_value+0x4a>
  b4:	43 c0       	rjmp	.+134    	; 0x13c <DIO_u8set_pin_value+0xd0>
  b6:	2d 81       	ldd	r18, Y+5	; 0x05
  b8:	3e 81       	ldd	r19, Y+6	; 0x06
  ba:	22 30       	cpi	r18, 0x02	; 2
  bc:	31 05       	cpc	r19, r1
  be:	2c f4       	brge	.+10     	; 0xca <DIO_u8set_pin_value+0x5e>
  c0:	8d 81       	ldd	r24, Y+5	; 0x05
  c2:	9e 81       	ldd	r25, Y+6	; 0x06
  c4:	00 97       	sbiw	r24, 0x00	; 0
  c6:	71 f0       	breq	.+28     	; 0xe4 <DIO_u8set_pin_value+0x78>
  c8:	c5 c0       	rjmp	.+394    	; 0x254 <DIO_u8set_pin_value+0x1e8>
  ca:	2d 81       	ldd	r18, Y+5	; 0x05
  cc:	3e 81       	ldd	r19, Y+6	; 0x06
  ce:	22 30       	cpi	r18, 0x02	; 2
  d0:	31 05       	cpc	r19, r1
  d2:	09 f4       	brne	.+2      	; 0xd6 <DIO_u8set_pin_value+0x6a>
  d4:	5f c0       	rjmp	.+190    	; 0x194 <DIO_u8set_pin_value+0x128>
  d6:	8d 81       	ldd	r24, Y+5	; 0x05
  d8:	9e 81       	ldd	r25, Y+6	; 0x06
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	91 05       	cpc	r25, r1
  de:	09 f4       	brne	.+2      	; 0xe2 <DIO_u8set_pin_value+0x76>
  e0:	85 c0       	rjmp	.+266    	; 0x1ec <DIO_u8set_pin_value+0x180>
  e2:	b8 c0       	rjmp	.+368    	; 0x254 <DIO_u8set_pin_value+0x1e8>
							{
								case GROUP_A:
									Assign_Bit(DIO_U8_PORTA,Copy_u8_pin_ID,Copy_u8_pin_val);
  e4:	8c 81       	ldd	r24, Y+4	; 0x04
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	a1 f4       	brne	.+40     	; 0x112 <DIO_u8set_pin_value+0xa6>
  ea:	ab e3       	ldi	r26, 0x3B	; 59
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	eb e3       	ldi	r30, 0x3B	; 59
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	48 2f       	mov	r20, r24
  f6:	8b 81       	ldd	r24, Y+3	; 0x03
  f8:	28 2f       	mov	r18, r24
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 2e       	mov	r0, r18
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_u8set_pin_value+0x9c>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	0a 94       	dec	r0
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_u8set_pin_value+0x98>
 10c:	84 2b       	or	r24, r20
 10e:	8c 93       	st	X, r24
 110:	a1 c0       	rjmp	.+322    	; 0x254 <DIO_u8set_pin_value+0x1e8>
 112:	ab e3       	ldi	r26, 0x3B	; 59
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	eb e3       	ldi	r30, 0x3B	; 59
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	48 2f       	mov	r20, r24
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	28 2f       	mov	r18, r24
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 2e       	mov	r0, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_u8set_pin_value+0xc4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_u8set_pin_value+0xc0>
 134:	80 95       	com	r24
 136:	84 23       	and	r24, r20
 138:	8c 93       	st	X, r24
 13a:	8c c0       	rjmp	.+280    	; 0x254 <DIO_u8set_pin_value+0x1e8>
									break;
								case GROUP_B:
									Assign_Bit(DIO_U8_PORTB,Copy_u8_pin_ID,Copy_u8_pin_val);
 13c:	8c 81       	ldd	r24, Y+4	; 0x04
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	a1 f4       	brne	.+40     	; 0x16a <DIO_u8set_pin_value+0xfe>
 142:	a8 e3       	ldi	r26, 0x38	; 56
 144:	b0 e0       	ldi	r27, 0x00	; 0
 146:	e8 e3       	ldi	r30, 0x38	; 56
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	48 2f       	mov	r20, r24
 14e:	8b 81       	ldd	r24, Y+3	; 0x03
 150:	28 2f       	mov	r18, r24
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 2e       	mov	r0, r18
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_u8set_pin_value+0xf4>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	0a 94       	dec	r0
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_u8set_pin_value+0xf0>
 164:	84 2b       	or	r24, r20
 166:	8c 93       	st	X, r24
 168:	75 c0       	rjmp	.+234    	; 0x254 <DIO_u8set_pin_value+0x1e8>
 16a:	a8 e3       	ldi	r26, 0x38	; 56
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	e8 e3       	ldi	r30, 0x38	; 56
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	48 2f       	mov	r20, r24
 176:	8b 81       	ldd	r24, Y+3	; 0x03
 178:	28 2f       	mov	r18, r24
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 2e       	mov	r0, r18
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_u8set_pin_value+0x11c>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_u8set_pin_value+0x118>
 18c:	80 95       	com	r24
 18e:	84 23       	and	r24, r20
 190:	8c 93       	st	X, r24
 192:	60 c0       	rjmp	.+192    	; 0x254 <DIO_u8set_pin_value+0x1e8>
									break;
								case GROUP_C:
									Assign_Bit(DIO_U8_PORTC,Copy_u8_pin_ID,Copy_u8_pin_val);
 194:	8c 81       	ldd	r24, Y+4	; 0x04
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	a1 f4       	brne	.+40     	; 0x1c2 <DIO_u8set_pin_value+0x156>
 19a:	a5 e3       	ldi	r26, 0x35	; 53
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	e5 e3       	ldi	r30, 0x35	; 53
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	48 2f       	mov	r20, r24
 1a6:	8b 81       	ldd	r24, Y+3	; 0x03
 1a8:	28 2f       	mov	r18, r24
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 2e       	mov	r0, r18
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_u8set_pin_value+0x14c>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	0a 94       	dec	r0
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_u8set_pin_value+0x148>
 1bc:	84 2b       	or	r24, r20
 1be:	8c 93       	st	X, r24
 1c0:	49 c0       	rjmp	.+146    	; 0x254 <DIO_u8set_pin_value+0x1e8>
 1c2:	a5 e3       	ldi	r26, 0x35	; 53
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	e5 e3       	ldi	r30, 0x35	; 53
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	48 2f       	mov	r20, r24
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	28 2f       	mov	r18, r24
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 2e       	mov	r0, r18
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_u8set_pin_value+0x174>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	0a 94       	dec	r0
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_u8set_pin_value+0x170>
 1e4:	80 95       	com	r24
 1e6:	84 23       	and	r24, r20
 1e8:	8c 93       	st	X, r24
 1ea:	34 c0       	rjmp	.+104    	; 0x254 <DIO_u8set_pin_value+0x1e8>
									break;
								case GROUP_D:
									Assign_Bit(DIO_U8_PORTD,Copy_u8_pin_ID,Copy_u8_pin_val);
 1ec:	8c 81       	ldd	r24, Y+4	; 0x04
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	a1 f4       	brne	.+40     	; 0x21a <DIO_u8set_pin_value+0x1ae>
 1f2:	a2 e3       	ldi	r26, 0x32	; 50
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	e2 e3       	ldi	r30, 0x32	; 50
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	48 2f       	mov	r20, r24
 1fe:	8b 81       	ldd	r24, Y+3	; 0x03
 200:	28 2f       	mov	r18, r24
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 2e       	mov	r0, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_u8set_pin_value+0x1a4>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_u8set_pin_value+0x1a0>
 214:	84 2b       	or	r24, r20
 216:	8c 93       	st	X, r24
 218:	1d c0       	rjmp	.+58     	; 0x254 <DIO_u8set_pin_value+0x1e8>
 21a:	a2 e3       	ldi	r26, 0x32	; 50
 21c:	b0 e0       	ldi	r27, 0x00	; 0
 21e:	e2 e3       	ldi	r30, 0x32	; 50
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	48 2f       	mov	r20, r24
 226:	8b 81       	ldd	r24, Y+3	; 0x03
 228:	28 2f       	mov	r18, r24
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 2e       	mov	r0, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_u8set_pin_value+0x1cc>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	0a 94       	dec	r0
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_u8set_pin_value+0x1c8>
 23c:	80 95       	com	r24
 23e:	84 23       	and	r24, r20
 240:	8c 93       	st	X, r24
 242:	08 c0       	rjmp	.+16     	; 0x254 <DIO_u8set_pin_value+0x1e8>

							}
					}
			else
				{
				Loc_u8Error_state=DIO_u8_PIN_VAL_ERROR;
 244:	89 e0       	ldi	r24, 0x09	; 9
 246:	89 83       	std	Y+1, r24	; 0x01
 248:	05 c0       	rjmp	.+10     	; 0x254 <DIO_u8set_pin_value+0x1e8>
				}

			}
		else
						{
			Loc_u8Error_state=DIO_u8_PIN_ID_ERROR;
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	89 83       	std	Y+1, r24	; 0x01
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_u8set_pin_value+0x1e8>


	}
	else
	{
			Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	89 83       	std	Y+1, r24	; 0x01
	}

	return Loc_u8Error_state;
 254:	89 81       	ldd	r24, Y+1	; 0x01
}
 256:	26 96       	adiw	r28, 0x06	; 6
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	f8 94       	cli
 25c:	de bf       	out	0x3e, r29	; 62
 25e:	0f be       	out	0x3f, r0	; 63
 260:	cd bf       	out	0x3d, r28	; 61
 262:	cf 91       	pop	r28
 264:	df 91       	pop	r29
 266:	08 95       	ret

00000268 <DIO_u8set_pin_dir>:

u8 DIO_u8set_pin_dir(u8 Copy_u8_port_ID,u8 Copy_u8_pin_ID,u8 Copy_u8_pin_dir)
{
 268:	df 93       	push	r29
 26a:	cf 93       	push	r28
 26c:	00 d0       	rcall	.+0      	; 0x26e <DIO_u8set_pin_dir+0x6>
 26e:	00 d0       	rcall	.+0      	; 0x270 <DIO_u8set_pin_dir+0x8>
 270:	00 d0       	rcall	.+0      	; 0x272 <DIO_u8set_pin_dir+0xa>
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
 276:	8a 83       	std	Y+2, r24	; 0x02
 278:	6b 83       	std	Y+3, r22	; 0x03
 27a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
 27c:	19 82       	std	Y+1, r1	; 0x01
		if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
 27e:	8a 81       	ldd	r24, Y+2	; 0x02
 280:	84 30       	cpi	r24, 0x04	; 4
 282:	08 f0       	brcs	.+2      	; 0x286 <DIO_u8set_pin_dir+0x1e>
 284:	e3 c0       	rjmp	.+454    	; 0x44c <DIO_u8set_pin_dir+0x1e4>
		{
			if((Copy_u8_pin_ID>=MIN_u8_PIN_ID)&&(Copy_u8_pin_ID<=MAX_u8_PIN_ID))
 286:	8b 81       	ldd	r24, Y+3	; 0x03
 288:	88 30       	cpi	r24, 0x08	; 8
 28a:	08 f0       	brcs	.+2      	; 0x28e <DIO_u8set_pin_dir+0x26>
 28c:	dc c0       	rjmp	.+440    	; 0x446 <DIO_u8set_pin_dir+0x1de>
			{
				if((Copy_u8_pin_dir==MIN_u8_PIN_DIR)||(Copy_u8_pin_dir==MAX_u8_PIN_DIR))
 28e:	8c 81       	ldd	r24, Y+4	; 0x04
 290:	88 23       	and	r24, r24
 292:	21 f0       	breq	.+8      	; 0x29c <DIO_u8set_pin_dir+0x34>
 294:	8c 81       	ldd	r24, Y+4	; 0x04
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	09 f0       	breq	.+2      	; 0x29c <DIO_u8set_pin_dir+0x34>
 29a:	d2 c0       	rjmp	.+420    	; 0x440 <DIO_u8set_pin_dir+0x1d8>
						{
							switch(Copy_u8_port_ID)
 29c:	8a 81       	ldd	r24, Y+2	; 0x02
 29e:	28 2f       	mov	r18, r24
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	3e 83       	std	Y+6, r19	; 0x06
 2a4:	2d 83       	std	Y+5, r18	; 0x05
 2a6:	8d 81       	ldd	r24, Y+5	; 0x05
 2a8:	9e 81       	ldd	r25, Y+6	; 0x06
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	91 05       	cpc	r25, r1
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <DIO_u8set_pin_dir+0x4a>
 2b0:	43 c0       	rjmp	.+134    	; 0x338 <DIO_u8set_pin_dir+0xd0>
 2b2:	2d 81       	ldd	r18, Y+5	; 0x05
 2b4:	3e 81       	ldd	r19, Y+6	; 0x06
 2b6:	22 30       	cpi	r18, 0x02	; 2
 2b8:	31 05       	cpc	r19, r1
 2ba:	2c f4       	brge	.+10     	; 0x2c6 <DIO_u8set_pin_dir+0x5e>
 2bc:	8d 81       	ldd	r24, Y+5	; 0x05
 2be:	9e 81       	ldd	r25, Y+6	; 0x06
 2c0:	00 97       	sbiw	r24, 0x00	; 0
 2c2:	71 f0       	breq	.+28     	; 0x2e0 <DIO_u8set_pin_dir+0x78>
 2c4:	c5 c0       	rjmp	.+394    	; 0x450 <DIO_u8set_pin_dir+0x1e8>
 2c6:	2d 81       	ldd	r18, Y+5	; 0x05
 2c8:	3e 81       	ldd	r19, Y+6	; 0x06
 2ca:	22 30       	cpi	r18, 0x02	; 2
 2cc:	31 05       	cpc	r19, r1
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <DIO_u8set_pin_dir+0x6a>
 2d0:	5f c0       	rjmp	.+190    	; 0x390 <DIO_u8set_pin_dir+0x128>
 2d2:	8d 81       	ldd	r24, Y+5	; 0x05
 2d4:	9e 81       	ldd	r25, Y+6	; 0x06
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	91 05       	cpc	r25, r1
 2da:	09 f4       	brne	.+2      	; 0x2de <DIO_u8set_pin_dir+0x76>
 2dc:	85 c0       	rjmp	.+266    	; 0x3e8 <DIO_u8set_pin_dir+0x180>
 2de:	b8 c0       	rjmp	.+368    	; 0x450 <DIO_u8set_pin_dir+0x1e8>
								{
									case GROUP_A:
										Assign_Bit(DIO_U8_DDRA,Copy_u8_pin_ID,Copy_u8_pin_dir);
 2e0:	8c 81       	ldd	r24, Y+4	; 0x04
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	a1 f4       	brne	.+40     	; 0x30e <DIO_u8set_pin_dir+0xa6>
 2e6:	aa e3       	ldi	r26, 0x3A	; 58
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	ea e3       	ldi	r30, 0x3A	; 58
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	48 2f       	mov	r20, r24
 2f2:	8b 81       	ldd	r24, Y+3	; 0x03
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 2e       	mov	r0, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_u8set_pin_dir+0x9c>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_u8set_pin_dir+0x98>
 308:	84 2b       	or	r24, r20
 30a:	8c 93       	st	X, r24
 30c:	a1 c0       	rjmp	.+322    	; 0x450 <DIO_u8set_pin_dir+0x1e8>
 30e:	aa e3       	ldi	r26, 0x3A	; 58
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	ea e3       	ldi	r30, 0x3A	; 58
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	48 2f       	mov	r20, r24
 31a:	8b 81       	ldd	r24, Y+3	; 0x03
 31c:	28 2f       	mov	r18, r24
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 2e       	mov	r0, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_u8set_pin_dir+0xc4>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_u8set_pin_dir+0xc0>
 330:	80 95       	com	r24
 332:	84 23       	and	r24, r20
 334:	8c 93       	st	X, r24
 336:	8c c0       	rjmp	.+280    	; 0x450 <DIO_u8set_pin_dir+0x1e8>
										break;
									case GROUP_B:
										Assign_Bit(DIO_U8_DDRB,Copy_u8_pin_ID,Copy_u8_pin_dir);
 338:	8c 81       	ldd	r24, Y+4	; 0x04
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	a1 f4       	brne	.+40     	; 0x366 <DIO_u8set_pin_dir+0xfe>
 33e:	a7 e3       	ldi	r26, 0x37	; 55
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	e7 e3       	ldi	r30, 0x37	; 55
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	48 2f       	mov	r20, r24
 34a:	8b 81       	ldd	r24, Y+3	; 0x03
 34c:	28 2f       	mov	r18, r24
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 2e       	mov	r0, r18
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_u8set_pin_dir+0xf4>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	0a 94       	dec	r0
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_u8set_pin_dir+0xf0>
 360:	84 2b       	or	r24, r20
 362:	8c 93       	st	X, r24
 364:	75 c0       	rjmp	.+234    	; 0x450 <DIO_u8set_pin_dir+0x1e8>
 366:	a7 e3       	ldi	r26, 0x37	; 55
 368:	b0 e0       	ldi	r27, 0x00	; 0
 36a:	e7 e3       	ldi	r30, 0x37	; 55
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	48 2f       	mov	r20, r24
 372:	8b 81       	ldd	r24, Y+3	; 0x03
 374:	28 2f       	mov	r18, r24
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	02 2e       	mov	r0, r18
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_u8set_pin_dir+0x11c>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	0a 94       	dec	r0
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_u8set_pin_dir+0x118>
 388:	80 95       	com	r24
 38a:	84 23       	and	r24, r20
 38c:	8c 93       	st	X, r24
 38e:	60 c0       	rjmp	.+192    	; 0x450 <DIO_u8set_pin_dir+0x1e8>
										break;
									case GROUP_C:
										Assign_Bit(DIO_U8_DDRC,Copy_u8_pin_ID,Copy_u8_pin_dir);
 390:	8c 81       	ldd	r24, Y+4	; 0x04
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	a1 f4       	brne	.+40     	; 0x3be <DIO_u8set_pin_dir+0x156>
 396:	a4 e3       	ldi	r26, 0x34	; 52
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	e4 e3       	ldi	r30, 0x34	; 52
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	48 2f       	mov	r20, r24
 3a2:	8b 81       	ldd	r24, Y+3	; 0x03
 3a4:	28 2f       	mov	r18, r24
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 2e       	mov	r0, r18
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_u8set_pin_dir+0x14c>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_u8set_pin_dir+0x148>
 3b8:	84 2b       	or	r24, r20
 3ba:	8c 93       	st	X, r24
 3bc:	49 c0       	rjmp	.+146    	; 0x450 <DIO_u8set_pin_dir+0x1e8>
 3be:	a4 e3       	ldi	r26, 0x34	; 52
 3c0:	b0 e0       	ldi	r27, 0x00	; 0
 3c2:	e4 e3       	ldi	r30, 0x34	; 52
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	48 2f       	mov	r20, r24
 3ca:	8b 81       	ldd	r24, Y+3	; 0x03
 3cc:	28 2f       	mov	r18, r24
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 2e       	mov	r0, r18
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_u8set_pin_dir+0x174>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	0a 94       	dec	r0
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_u8set_pin_dir+0x170>
 3e0:	80 95       	com	r24
 3e2:	84 23       	and	r24, r20
 3e4:	8c 93       	st	X, r24
 3e6:	34 c0       	rjmp	.+104    	; 0x450 <DIO_u8set_pin_dir+0x1e8>
										break;
									case GROUP_D:
										Assign_Bit(DIO_U8_DDRD,Copy_u8_pin_ID,Copy_u8_pin_dir);
 3e8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	a1 f4       	brne	.+40     	; 0x416 <DIO_u8set_pin_dir+0x1ae>
 3ee:	a1 e3       	ldi	r26, 0x31	; 49
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	e1 e3       	ldi	r30, 0x31	; 49
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	48 2f       	mov	r20, r24
 3fa:	8b 81       	ldd	r24, Y+3	; 0x03
 3fc:	28 2f       	mov	r18, r24
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 2e       	mov	r0, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_u8set_pin_dir+0x1a4>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	0a 94       	dec	r0
 40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_u8set_pin_dir+0x1a0>
 410:	84 2b       	or	r24, r20
 412:	8c 93       	st	X, r24
 414:	1d c0       	rjmp	.+58     	; 0x450 <DIO_u8set_pin_dir+0x1e8>
 416:	a1 e3       	ldi	r26, 0x31	; 49
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	e1 e3       	ldi	r30, 0x31	; 49
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	48 2f       	mov	r20, r24
 422:	8b 81       	ldd	r24, Y+3	; 0x03
 424:	28 2f       	mov	r18, r24
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 2e       	mov	r0, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_u8set_pin_dir+0x1cc>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	0a 94       	dec	r0
 436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_u8set_pin_dir+0x1c8>
 438:	80 95       	com	r24
 43a:	84 23       	and	r24, r20
 43c:	8c 93       	st	X, r24
 43e:	08 c0       	rjmp	.+16     	; 0x450 <DIO_u8set_pin_dir+0x1e8>

								}
						}
				else
					{
					Loc_u8Error_state=DIO_u8_PIN_DIR_ERROR;
 440:	8c e0       	ldi	r24, 0x0C	; 12
 442:	89 83       	std	Y+1, r24	; 0x01
 444:	05 c0       	rjmp	.+10     	; 0x450 <DIO_u8set_pin_dir+0x1e8>
					}

				}
			else
							{
				Loc_u8Error_state=DIO_u8_PIN_ID_ERROR;
 446:	86 e0       	ldi	r24, 0x06	; 6
 448:	89 83       	std	Y+1, r24	; 0x01
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_u8set_pin_dir+0x1e8>


		}
		else
		{
				Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
 44c:	83 e0       	ldi	r24, 0x03	; 3
 44e:	89 83       	std	Y+1, r24	; 0x01
		}

		return Loc_u8Error_state;
 450:	89 81       	ldd	r24, Y+1	; 0x01

}
 452:	26 96       	adiw	r28, 0x06	; 6
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	f8 94       	cli
 458:	de bf       	out	0x3e, r29	; 62
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	cd bf       	out	0x3d, r28	; 61
 45e:	cf 91       	pop	r28
 460:	df 91       	pop	r29
 462:	08 95       	ret

00000464 <DIO_u8set_port_value>:

u8 DIO_u8set_port_value(u8 Copy_u8_port_ID,u8 Copy_u8_port_val)
{
 464:	df 93       	push	r29
 466:	cf 93       	push	r28
 468:	00 d0       	rcall	.+0      	; 0x46a <DIO_u8set_port_value+0x6>
 46a:	00 d0       	rcall	.+0      	; 0x46c <DIO_u8set_port_value+0x8>
 46c:	0f 92       	push	r0
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
 472:	8a 83       	std	Y+2, r24	; 0x02
 474:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
 476:	19 82       	std	Y+1, r1	; 0x01
			if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
 478:	8a 81       	ldd	r24, Y+2	; 0x02
 47a:	84 30       	cpi	r24, 0x04	; 4
 47c:	e0 f5       	brcc	.+120    	; 0x4f6 <DIO_u8set_port_value+0x92>
			{
				//solution  for this problem
					if((Copy_u8_port_val==MIN_u8_PORT_VAL)||(Copy_u8_port_val==MAX_u8_PORT_VAL))
 47e:	8b 81       	ldd	r24, Y+3	; 0x03
 480:	88 23       	and	r24, r24
 482:	19 f0       	breq	.+6      	; 0x48a <DIO_u8set_port_value+0x26>
 484:	8b 81       	ldd	r24, Y+3	; 0x03
 486:	8f 3f       	cpi	r24, 0xFF	; 255
 488:	99 f5       	brne	.+102    	; 0x4f0 <DIO_u8set_port_value+0x8c>
							{
								switch(Copy_u8_port_ID)
 48a:	8a 81       	ldd	r24, Y+2	; 0x02
 48c:	28 2f       	mov	r18, r24
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	3d 83       	std	Y+5, r19	; 0x05
 492:	2c 83       	std	Y+4, r18	; 0x04
 494:	8c 81       	ldd	r24, Y+4	; 0x04
 496:	9d 81       	ldd	r25, Y+5	; 0x05
 498:	81 30       	cpi	r24, 0x01	; 1
 49a:	91 05       	cpc	r25, r1
 49c:	d1 f0       	breq	.+52     	; 0x4d2 <DIO_u8set_port_value+0x6e>
 49e:	2c 81       	ldd	r18, Y+4	; 0x04
 4a0:	3d 81       	ldd	r19, Y+5	; 0x05
 4a2:	22 30       	cpi	r18, 0x02	; 2
 4a4:	31 05       	cpc	r19, r1
 4a6:	2c f4       	brge	.+10     	; 0x4b2 <DIO_u8set_port_value+0x4e>
 4a8:	8c 81       	ldd	r24, Y+4	; 0x04
 4aa:	9d 81       	ldd	r25, Y+5	; 0x05
 4ac:	00 97       	sbiw	r24, 0x00	; 0
 4ae:	61 f0       	breq	.+24     	; 0x4c8 <DIO_u8set_port_value+0x64>
 4b0:	24 c0       	rjmp	.+72     	; 0x4fa <DIO_u8set_port_value+0x96>
 4b2:	2c 81       	ldd	r18, Y+4	; 0x04
 4b4:	3d 81       	ldd	r19, Y+5	; 0x05
 4b6:	22 30       	cpi	r18, 0x02	; 2
 4b8:	31 05       	cpc	r19, r1
 4ba:	81 f0       	breq	.+32     	; 0x4dc <DIO_u8set_port_value+0x78>
 4bc:	8c 81       	ldd	r24, Y+4	; 0x04
 4be:	9d 81       	ldd	r25, Y+5	; 0x05
 4c0:	83 30       	cpi	r24, 0x03	; 3
 4c2:	91 05       	cpc	r25, r1
 4c4:	81 f0       	breq	.+32     	; 0x4e6 <DIO_u8set_port_value+0x82>
 4c6:	19 c0       	rjmp	.+50     	; 0x4fa <DIO_u8set_port_value+0x96>
									{
										case GROUP_A:
											DIO_U8_PORTA=Copy_u8_port_val;
 4c8:	eb e3       	ldi	r30, 0x3B	; 59
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	8b 81       	ldd	r24, Y+3	; 0x03
 4ce:	80 83       	st	Z, r24
 4d0:	14 c0       	rjmp	.+40     	; 0x4fa <DIO_u8set_port_value+0x96>
											//Assign_Bit(DIO_U8_PORTA,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_B:
											DIO_U8_PORTB=Copy_u8_port_val;
 4d2:	e8 e3       	ldi	r30, 0x38	; 56
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	8b 81       	ldd	r24, Y+3	; 0x03
 4d8:	80 83       	st	Z, r24
 4da:	0f c0       	rjmp	.+30     	; 0x4fa <DIO_u8set_port_value+0x96>
											//Assign_Bit(DIO_U8_PORTB,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_C:
											DIO_U8_PORTC=Copy_u8_port_val;
 4dc:	e5 e3       	ldi	r30, 0x35	; 53
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	8b 81       	ldd	r24, Y+3	; 0x03
 4e2:	80 83       	st	Z, r24
 4e4:	0a c0       	rjmp	.+20     	; 0x4fa <DIO_u8set_port_value+0x96>
											//Assign_Bit(DIO_U8_PORTC,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_D:
											DIO_U8_PORTD=Copy_u8_port_val;
 4e6:	e2 e3       	ldi	r30, 0x32	; 50
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	8b 81       	ldd	r24, Y+3	; 0x03
 4ec:	80 83       	st	Z, r24
 4ee:	05 c0       	rjmp	.+10     	; 0x4fa <DIO_u8set_port_value+0x96>

									}
							}
					else
						{
						Loc_u8Error_state=DIO_u8_PORT_VAL_ERROR;
 4f0:	8f e0       	ldi	r24, 0x0F	; 15
 4f2:	89 83       	std	Y+1, r24	; 0x01
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <DIO_u8set_port_value+0x96>

			}

			else
			{
					Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
 4f6:	83 e0       	ldi	r24, 0x03	; 3
 4f8:	89 83       	std	Y+1, r24	; 0x01
			}

			return Loc_u8Error_state;
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
}
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	0f 90       	pop	r0
 504:	0f 90       	pop	r0
 506:	cf 91       	pop	r28
 508:	df 91       	pop	r29
 50a:	08 95       	ret

0000050c <DIO_u8set_port_dir>:

u8 DIO_u8set_port_dir(u8 Copy_u8_port_ID,u8 Copy_u8_port_dir)
{
 50c:	df 93       	push	r29
 50e:	cf 93       	push	r28
 510:	00 d0       	rcall	.+0      	; 0x512 <DIO_u8set_port_dir+0x6>
 512:	00 d0       	rcall	.+0      	; 0x514 <DIO_u8set_port_dir+0x8>
 514:	0f 92       	push	r0
 516:	cd b7       	in	r28, 0x3d	; 61
 518:	de b7       	in	r29, 0x3e	; 62
 51a:	8a 83       	std	Y+2, r24	; 0x02
 51c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
 51e:	19 82       	std	Y+1, r1	; 0x01
			if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
 520:	8a 81       	ldd	r24, Y+2	; 0x02
 522:	84 30       	cpi	r24, 0x04	; 4
 524:	e0 f5       	brcc	.+120    	; 0x59e <DIO_u8set_port_dir+0x92>
			{
				//solution  for this problem
					if((Copy_u8_port_dir==MIN_u8_PORT_DIR)||(Copy_u8_port_dir==MAX_u8_PORT_DIR))
 526:	8b 81       	ldd	r24, Y+3	; 0x03
 528:	88 23       	and	r24, r24
 52a:	19 f0       	breq	.+6      	; 0x532 <DIO_u8set_port_dir+0x26>
 52c:	8b 81       	ldd	r24, Y+3	; 0x03
 52e:	8f 3f       	cpi	r24, 0xFF	; 255
 530:	99 f5       	brne	.+102    	; 0x598 <DIO_u8set_port_dir+0x8c>
							{
								switch(Copy_u8_port_ID)
 532:	8a 81       	ldd	r24, Y+2	; 0x02
 534:	28 2f       	mov	r18, r24
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	3d 83       	std	Y+5, r19	; 0x05
 53a:	2c 83       	std	Y+4, r18	; 0x04
 53c:	8c 81       	ldd	r24, Y+4	; 0x04
 53e:	9d 81       	ldd	r25, Y+5	; 0x05
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	91 05       	cpc	r25, r1
 544:	d1 f0       	breq	.+52     	; 0x57a <DIO_u8set_port_dir+0x6e>
 546:	2c 81       	ldd	r18, Y+4	; 0x04
 548:	3d 81       	ldd	r19, Y+5	; 0x05
 54a:	22 30       	cpi	r18, 0x02	; 2
 54c:	31 05       	cpc	r19, r1
 54e:	2c f4       	brge	.+10     	; 0x55a <DIO_u8set_port_dir+0x4e>
 550:	8c 81       	ldd	r24, Y+4	; 0x04
 552:	9d 81       	ldd	r25, Y+5	; 0x05
 554:	00 97       	sbiw	r24, 0x00	; 0
 556:	61 f0       	breq	.+24     	; 0x570 <DIO_u8set_port_dir+0x64>
 558:	24 c0       	rjmp	.+72     	; 0x5a2 <DIO_u8set_port_dir+0x96>
 55a:	2c 81       	ldd	r18, Y+4	; 0x04
 55c:	3d 81       	ldd	r19, Y+5	; 0x05
 55e:	22 30       	cpi	r18, 0x02	; 2
 560:	31 05       	cpc	r19, r1
 562:	81 f0       	breq	.+32     	; 0x584 <DIO_u8set_port_dir+0x78>
 564:	8c 81       	ldd	r24, Y+4	; 0x04
 566:	9d 81       	ldd	r25, Y+5	; 0x05
 568:	83 30       	cpi	r24, 0x03	; 3
 56a:	91 05       	cpc	r25, r1
 56c:	81 f0       	breq	.+32     	; 0x58e <DIO_u8set_port_dir+0x82>
 56e:	19 c0       	rjmp	.+50     	; 0x5a2 <DIO_u8set_port_dir+0x96>
									{
										case GROUP_A:
											DIO_U8_DDRA=Copy_u8_port_dir;
 570:	ea e3       	ldi	r30, 0x3A	; 58
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	8b 81       	ldd	r24, Y+3	; 0x03
 576:	80 83       	st	Z, r24
 578:	14 c0       	rjmp	.+40     	; 0x5a2 <DIO_u8set_port_dir+0x96>
											//Assign_Bit(DIO_U8_PORTA,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_B:
											DIO_U8_DDRB=Copy_u8_port_dir;
 57a:	e7 e3       	ldi	r30, 0x37	; 55
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	8b 81       	ldd	r24, Y+3	; 0x03
 580:	80 83       	st	Z, r24
 582:	0f c0       	rjmp	.+30     	; 0x5a2 <DIO_u8set_port_dir+0x96>
											//Assign_Bit(DIO_U8_PORTB,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_C:
											DIO_U8_DDRC=Copy_u8_port_dir;
 584:	e4 e3       	ldi	r30, 0x34	; 52
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	8b 81       	ldd	r24, Y+3	; 0x03
 58a:	80 83       	st	Z, r24
 58c:	0a c0       	rjmp	.+20     	; 0x5a2 <DIO_u8set_port_dir+0x96>
											//Assign_Bit(DIO_U8_PORTC,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_D:
											DIO_U8_DDRD=Copy_u8_port_dir;
 58e:	e1 e3       	ldi	r30, 0x31	; 49
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	8b 81       	ldd	r24, Y+3	; 0x03
 594:	80 83       	st	Z, r24
 596:	05 c0       	rjmp	.+10     	; 0x5a2 <DIO_u8set_port_dir+0x96>

									}
							}
					else
						{
						Loc_u8Error_state=DIO_u8_PORT_DIR_ERROR;
 598:	82 e1       	ldi	r24, 0x12	; 18
 59a:	89 83       	std	Y+1, r24	; 0x01
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_u8set_port_dir+0x96>

			}

			else
			{
					Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
 59e:	83 e0       	ldi	r24, 0x03	; 3
 5a0:	89 83       	std	Y+1, r24	; 0x01
			}

			return Loc_u8Error_state;
 5a2:	89 81       	ldd	r24, Y+1	; 0x01
}
 5a4:	0f 90       	pop	r0
 5a6:	0f 90       	pop	r0
 5a8:	0f 90       	pop	r0
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	cf 91       	pop	r28
 5b0:	df 91       	pop	r29
 5b2:	08 95       	ret

000005b4 <DIO_u8get_pin_value>:

u8 DIO_u8get_pin_value(u8 Copy_u8_port_ID,u8 Copy_u8_pin_ID,u8 *Copy_u8_pin_val)
{
 5b4:	df 93       	push	r29
 5b6:	cf 93       	push	r28
 5b8:	cd b7       	in	r28, 0x3d	; 61
 5ba:	de b7       	in	r29, 0x3e	; 62
 5bc:	27 97       	sbiw	r28, 0x07	; 7
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	f8 94       	cli
 5c2:	de bf       	out	0x3e, r29	; 62
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	cd bf       	out	0x3d, r28	; 61
 5c8:	8a 83       	std	Y+2, r24	; 0x02
 5ca:	6b 83       	std	Y+3, r22	; 0x03
 5cc:	5d 83       	std	Y+5, r21	; 0x05
 5ce:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
 5d0:	19 82       	std	Y+1, r1	; 0x01
		if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
 5d2:	8a 81       	ldd	r24, Y+2	; 0x02
 5d4:	84 30       	cpi	r24, 0x04	; 4
 5d6:	08 f0       	brcs	.+2      	; 0x5da <DIO_u8get_pin_value+0x26>
 5d8:	78 c0       	rjmp	.+240    	; 0x6ca <DIO_u8get_pin_value+0x116>
		{
			if((Copy_u8_pin_ID>=MIN_u8_PIN_ID)&&(Copy_u8_pin_ID<=MAX_u8_PIN_ID))
 5da:	8b 81       	ldd	r24, Y+3	; 0x03
 5dc:	88 30       	cpi	r24, 0x08	; 8
 5de:	08 f0       	brcs	.+2      	; 0x5e2 <DIO_u8get_pin_value+0x2e>
 5e0:	71 c0       	rjmp	.+226    	; 0x6c4 <DIO_u8get_pin_value+0x110>
			{

							switch(Copy_u8_port_ID)
 5e2:	8a 81       	ldd	r24, Y+2	; 0x02
 5e4:	28 2f       	mov	r18, r24
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	3f 83       	std	Y+7, r19	; 0x07
 5ea:	2e 83       	std	Y+6, r18	; 0x06
 5ec:	4e 81       	ldd	r20, Y+6	; 0x06
 5ee:	5f 81       	ldd	r21, Y+7	; 0x07
 5f0:	41 30       	cpi	r20, 0x01	; 1
 5f2:	51 05       	cpc	r21, r1
 5f4:	59 f1       	breq	.+86     	; 0x64c <DIO_u8get_pin_value+0x98>
 5f6:	8e 81       	ldd	r24, Y+6	; 0x06
 5f8:	9f 81       	ldd	r25, Y+7	; 0x07
 5fa:	82 30       	cpi	r24, 0x02	; 2
 5fc:	91 05       	cpc	r25, r1
 5fe:	34 f4       	brge	.+12     	; 0x60c <DIO_u8get_pin_value+0x58>
 600:	2e 81       	ldd	r18, Y+6	; 0x06
 602:	3f 81       	ldd	r19, Y+7	; 0x07
 604:	21 15       	cp	r18, r1
 606:	31 05       	cpc	r19, r1
 608:	69 f0       	breq	.+26     	; 0x624 <DIO_u8get_pin_value+0x70>
 60a:	61 c0       	rjmp	.+194    	; 0x6ce <DIO_u8get_pin_value+0x11a>
 60c:	4e 81       	ldd	r20, Y+6	; 0x06
 60e:	5f 81       	ldd	r21, Y+7	; 0x07
 610:	42 30       	cpi	r20, 0x02	; 2
 612:	51 05       	cpc	r21, r1
 614:	79 f1       	breq	.+94     	; 0x674 <DIO_u8get_pin_value+0xc0>
 616:	8e 81       	ldd	r24, Y+6	; 0x06
 618:	9f 81       	ldd	r25, Y+7	; 0x07
 61a:	83 30       	cpi	r24, 0x03	; 3
 61c:	91 05       	cpc	r25, r1
 61e:	09 f4       	brne	.+2      	; 0x622 <DIO_u8get_pin_value+0x6e>
 620:	3d c0       	rjmp	.+122    	; 0x69c <DIO_u8get_pin_value+0xe8>
 622:	55 c0       	rjmp	.+170    	; 0x6ce <DIO_u8get_pin_value+0x11a>
								{
									case GROUP_A:
										*Copy_u8_pin_val = get_bit(DIO_U8_PINA,Copy_u8_pin_ID);
 624:	e9 e3       	ldi	r30, 0x39	; 57
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	28 2f       	mov	r18, r24
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	8b 81       	ldd	r24, Y+3	; 0x03
 630:	88 2f       	mov	r24, r24
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	a9 01       	movw	r20, r18
 636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_u8get_pin_value+0x88>
 638:	55 95       	asr	r21
 63a:	47 95       	ror	r20
 63c:	8a 95       	dec	r24
 63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_u8get_pin_value+0x84>
 640:	ca 01       	movw	r24, r20
 642:	81 70       	andi	r24, 0x01	; 1
 644:	ec 81       	ldd	r30, Y+4	; 0x04
 646:	fd 81       	ldd	r31, Y+5	; 0x05
 648:	80 83       	st	Z, r24
 64a:	41 c0       	rjmp	.+130    	; 0x6ce <DIO_u8get_pin_value+0x11a>
										break;
									case GROUP_B:
										*Copy_u8_pin_val = get_bit(DIO_U8_PINB,Copy_u8_pin_ID);
 64c:	e6 e3       	ldi	r30, 0x36	; 54
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	80 81       	ld	r24, Z
 652:	28 2f       	mov	r18, r24
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	8b 81       	ldd	r24, Y+3	; 0x03
 658:	88 2f       	mov	r24, r24
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	a9 01       	movw	r20, r18
 65e:	02 c0       	rjmp	.+4      	; 0x664 <DIO_u8get_pin_value+0xb0>
 660:	55 95       	asr	r21
 662:	47 95       	ror	r20
 664:	8a 95       	dec	r24
 666:	e2 f7       	brpl	.-8      	; 0x660 <DIO_u8get_pin_value+0xac>
 668:	ca 01       	movw	r24, r20
 66a:	81 70       	andi	r24, 0x01	; 1
 66c:	ec 81       	ldd	r30, Y+4	; 0x04
 66e:	fd 81       	ldd	r31, Y+5	; 0x05
 670:	80 83       	st	Z, r24
 672:	2d c0       	rjmp	.+90     	; 0x6ce <DIO_u8get_pin_value+0x11a>
										break;
									case GROUP_C:
										*Copy_u8_pin_val = get_bit(DIO_U8_PINC,Copy_u8_pin_ID);
 674:	e3 e3       	ldi	r30, 0x33	; 51
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	80 81       	ld	r24, Z
 67a:	28 2f       	mov	r18, r24
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	8b 81       	ldd	r24, Y+3	; 0x03
 680:	88 2f       	mov	r24, r24
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	a9 01       	movw	r20, r18
 686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_u8get_pin_value+0xd8>
 688:	55 95       	asr	r21
 68a:	47 95       	ror	r20
 68c:	8a 95       	dec	r24
 68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_u8get_pin_value+0xd4>
 690:	ca 01       	movw	r24, r20
 692:	81 70       	andi	r24, 0x01	; 1
 694:	ec 81       	ldd	r30, Y+4	; 0x04
 696:	fd 81       	ldd	r31, Y+5	; 0x05
 698:	80 83       	st	Z, r24
 69a:	19 c0       	rjmp	.+50     	; 0x6ce <DIO_u8get_pin_value+0x11a>
										break;
									case GROUP_D:
										*Copy_u8_pin_val = get_bit(DIO_U8_PIND,Copy_u8_pin_ID);
 69c:	e0 e3       	ldi	r30, 0x30	; 48
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	80 81       	ld	r24, Z
 6a2:	28 2f       	mov	r18, r24
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	8b 81       	ldd	r24, Y+3	; 0x03
 6a8:	88 2f       	mov	r24, r24
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	a9 01       	movw	r20, r18
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_u8get_pin_value+0x100>
 6b0:	55 95       	asr	r21
 6b2:	47 95       	ror	r20
 6b4:	8a 95       	dec	r24
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_u8get_pin_value+0xfc>
 6b8:	ca 01       	movw	r24, r20
 6ba:	81 70       	andi	r24, 0x01	; 1
 6bc:	ec 81       	ldd	r30, Y+4	; 0x04
 6be:	fd 81       	ldd	r31, Y+5	; 0x05
 6c0:	80 83       	st	Z, r24
 6c2:	05 c0       	rjmp	.+10     	; 0x6ce <DIO_u8get_pin_value+0x11a>


				}
			else
							{
				Loc_u8Error_state=DIO_u8_PIN_ID_ERROR;
 6c4:	86 e0       	ldi	r24, 0x06	; 6
 6c6:	89 83       	std	Y+1, r24	; 0x01
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <DIO_u8get_pin_value+0x11a>


		}
		else
		{
				Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
 6ca:	83 e0       	ldi	r24, 0x03	; 3
 6cc:	89 83       	std	Y+1, r24	; 0x01
		}

		return Loc_u8Error_state;
 6ce:	89 81       	ldd	r24, Y+1	; 0x01
}
 6d0:	27 96       	adiw	r28, 0x07	; 7
 6d2:	0f b6       	in	r0, 0x3f	; 63
 6d4:	f8 94       	cli
 6d6:	de bf       	out	0x3e, r29	; 62
 6d8:	0f be       	out	0x3f, r0	; 63
 6da:	cd bf       	out	0x3d, r28	; 61
 6dc:	cf 91       	pop	r28
 6de:	df 91       	pop	r29
 6e0:	08 95       	ret

000006e2 <DIO_u8Get_port_value>:

u8 DIO_u8Get_port_value(u8 Copy_u8_port_ID,u8 *Copy_u8_port_val)
{
 6e2:	df 93       	push	r29
 6e4:	cf 93       	push	r28
 6e6:	00 d0       	rcall	.+0      	; 0x6e8 <DIO_u8Get_port_value+0x6>
 6e8:	00 d0       	rcall	.+0      	; 0x6ea <DIO_u8Get_port_value+0x8>
 6ea:	00 d0       	rcall	.+0      	; 0x6ec <DIO_u8Get_port_value+0xa>
 6ec:	cd b7       	in	r28, 0x3d	; 61
 6ee:	de b7       	in	r29, 0x3e	; 62
 6f0:	8a 83       	std	Y+2, r24	; 0x02
 6f2:	7c 83       	std	Y+4, r23	; 0x04
 6f4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
 6f6:	19 82       	std	Y+1, r1	; 0x01
			if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
 6f8:	8a 81       	ldd	r24, Y+2	; 0x02
 6fa:	84 30       	cpi	r24, 0x04	; 4
 6fc:	d8 f5       	brcc	.+118    	; 0x774 <DIO_u8Get_port_value+0x92>
			{

								switch(Copy_u8_port_ID)
 6fe:	8a 81       	ldd	r24, Y+2	; 0x02
 700:	28 2f       	mov	r18, r24
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	3e 83       	std	Y+6, r19	; 0x06
 706:	2d 83       	std	Y+5, r18	; 0x05
 708:	8d 81       	ldd	r24, Y+5	; 0x05
 70a:	9e 81       	ldd	r25, Y+6	; 0x06
 70c:	81 30       	cpi	r24, 0x01	; 1
 70e:	91 05       	cpc	r25, r1
 710:	e1 f0       	breq	.+56     	; 0x74a <DIO_u8Get_port_value+0x68>
 712:	2d 81       	ldd	r18, Y+5	; 0x05
 714:	3e 81       	ldd	r19, Y+6	; 0x06
 716:	22 30       	cpi	r18, 0x02	; 2
 718:	31 05       	cpc	r19, r1
 71a:	2c f4       	brge	.+10     	; 0x726 <DIO_u8Get_port_value+0x44>
 71c:	8d 81       	ldd	r24, Y+5	; 0x05
 71e:	9e 81       	ldd	r25, Y+6	; 0x06
 720:	00 97       	sbiw	r24, 0x00	; 0
 722:	61 f0       	breq	.+24     	; 0x73c <DIO_u8Get_port_value+0x5a>
 724:	29 c0       	rjmp	.+82     	; 0x778 <DIO_u8Get_port_value+0x96>
 726:	2d 81       	ldd	r18, Y+5	; 0x05
 728:	3e 81       	ldd	r19, Y+6	; 0x06
 72a:	22 30       	cpi	r18, 0x02	; 2
 72c:	31 05       	cpc	r19, r1
 72e:	a1 f0       	breq	.+40     	; 0x758 <DIO_u8Get_port_value+0x76>
 730:	8d 81       	ldd	r24, Y+5	; 0x05
 732:	9e 81       	ldd	r25, Y+6	; 0x06
 734:	83 30       	cpi	r24, 0x03	; 3
 736:	91 05       	cpc	r25, r1
 738:	b1 f0       	breq	.+44     	; 0x766 <DIO_u8Get_port_value+0x84>
 73a:	1e c0       	rjmp	.+60     	; 0x778 <DIO_u8Get_port_value+0x96>
									{
										case GROUP_A:
											*Copy_u8_port_val = DIO_U8_PINA;
 73c:	e9 e3       	ldi	r30, 0x39	; 57
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	80 81       	ld	r24, Z
 742:	eb 81       	ldd	r30, Y+3	; 0x03
 744:	fc 81       	ldd	r31, Y+4	; 0x04
 746:	80 83       	st	Z, r24
 748:	17 c0       	rjmp	.+46     	; 0x778 <DIO_u8Get_port_value+0x96>
											break;
										case GROUP_B:
											*Copy_u8_port_val = DIO_U8_PINB;
 74a:	e6 e3       	ldi	r30, 0x36	; 54
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 81       	ld	r24, Z
 750:	eb 81       	ldd	r30, Y+3	; 0x03
 752:	fc 81       	ldd	r31, Y+4	; 0x04
 754:	80 83       	st	Z, r24
 756:	10 c0       	rjmp	.+32     	; 0x778 <DIO_u8Get_port_value+0x96>
											break;
										case GROUP_C:
											*Copy_u8_port_val = DIO_U8_PINC;
 758:	e3 e3       	ldi	r30, 0x33	; 51
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	80 81       	ld	r24, Z
 75e:	eb 81       	ldd	r30, Y+3	; 0x03
 760:	fc 81       	ldd	r31, Y+4	; 0x04
 762:	80 83       	st	Z, r24
 764:	09 c0       	rjmp	.+18     	; 0x778 <DIO_u8Get_port_value+0x96>
											break;
										case GROUP_D:
											*Copy_u8_port_val =DIO_U8_PIND;
 766:	e0 e3       	ldi	r30, 0x30	; 48
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	80 81       	ld	r24, Z
 76c:	eb 81       	ldd	r30, Y+3	; 0x03
 76e:	fc 81       	ldd	r31, Y+4	; 0x04
 770:	80 83       	st	Z, r24
 772:	02 c0       	rjmp	.+4      	; 0x778 <DIO_u8Get_port_value+0x96>

			}

			else
			{
					Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
 774:	83 e0       	ldi	r24, 0x03	; 3
 776:	89 83       	std	Y+1, r24	; 0x01
			}

			return Loc_u8Error_state;
 778:	89 81       	ldd	r24, Y+1	; 0x01

}
 77a:	26 96       	adiw	r28, 0x06	; 6
 77c:	0f b6       	in	r0, 0x3f	; 63
 77e:	f8 94       	cli
 780:	de bf       	out	0x3e, r29	; 62
 782:	0f be       	out	0x3f, r0	; 63
 784:	cd bf       	out	0x3d, r28	; 61
 786:	cf 91       	pop	r28
 788:	df 91       	pop	r29
 78a:	08 95       	ret

0000078c <main>:
#include "Timer_Config.h"
#include "TIMER_INTERFACE.h"


void main()
{
 78c:	df 93       	push	r29
 78e:	cf 93       	push	r28
 790:	00 d0       	rcall	.+0      	; 0x792 <main+0x6>
 792:	cd b7       	in	r28, 0x3d	; 61
 794:	de b7       	in	r29, 0x3e	; 62
	//this is example shows  that  how to  calculate 1 seconde on LED by  ctc
	DIO_u8set_pin_dir(GROUP_A,DIO_u8_PIN_0,DIO_u8_OUTPUT);
 796:	80 e0       	ldi	r24, 0x00	; 0
 798:	60 e0       	ldi	r22, 0x00	; 0
 79a:	41 e0       	ldi	r20, 0x01	; 1
 79c:	0e 94 34 01 	call	0x268	; 0x268 <DIO_u8set_pin_dir>
	DIO_u8set_pin_value(GROUP_A,DIO_u8_PIN_0,DIO_u8_HIGH);
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	60 e0       	ldi	r22, 0x00	; 0
 7a4:	41 e0       	ldi	r20, 0x01	; 1
 7a6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8set_pin_value>
	u32 num_CM=0;
 7aa:	1a 82       	std	Y+2, r1	; 0x02
 7ac:	19 82       	std	Y+1, r1	; 0x01
	TIMER_OCR0=125;//-------> this mean that 1ms when  the counter reaches 125
 7ae:	ec e5       	ldi	r30, 0x5C	; 92
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	8d e7       	ldi	r24, 0x7D	; 125
 7b4:	80 83       	st	Z, r24
	TIMER_TCCR0=0x0B;//64 prescalar and ovf AND CTC MODE
 7b6:	e3 e5       	ldi	r30, 0x53	; 83
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	8b e0       	ldi	r24, 0x0B	; 11
 7bc:	80 83       	st	Z, r24
while(1)
{
	num_CM=0;
 7be:	1a 82       	std	Y+2, r1	; 0x02
 7c0:	19 82       	std	Y+1, r1	; 0x01
 7c2:	16 c0       	rjmp	.+44     	; 0x7f0 <main+0x64>

	while(num_CM<1000)
	{
		while(get_bit(TIMER_TIFR,1)==0);// compare match  flag
 7c4:	e8 e5       	ldi	r30, 0x58	; 88
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	80 81       	ld	r24, Z
 7ca:	86 95       	lsr	r24
 7cc:	88 2f       	mov	r24, r24
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	81 70       	andi	r24, 0x01	; 1
 7d2:	90 70       	andi	r25, 0x00	; 0
 7d4:	00 97       	sbiw	r24, 0x00	; 0
 7d6:	b1 f3       	breq	.-20     	; 0x7c4 <main+0x38>
		set_bit(TIMER_TIFR,1);          //clear the flag
 7d8:	a8 e5       	ldi	r26, 0x58	; 88
 7da:	b0 e0       	ldi	r27, 0x00	; 0
 7dc:	e8 e5       	ldi	r30, 0x58	; 88
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	80 81       	ld	r24, Z
 7e2:	82 60       	ori	r24, 0x02	; 2
 7e4:	8c 93       	st	X, r24
		num_CM++;
 7e6:	89 81       	ldd	r24, Y+1	; 0x01
 7e8:	9a 81       	ldd	r25, Y+2	; 0x02
 7ea:	01 96       	adiw	r24, 0x01	; 1
 7ec:	9a 83       	std	Y+2, r25	; 0x02
 7ee:	89 83       	std	Y+1, r24	; 0x01
	TIMER_TCCR0=0x0B;//64 prescalar and ovf AND CTC MODE
while(1)
{
	num_CM=0;

	while(num_CM<1000)
 7f0:	89 81       	ldd	r24, Y+1	; 0x01
 7f2:	9a 81       	ldd	r25, Y+2	; 0x02
 7f4:	23 e0       	ldi	r18, 0x03	; 3
 7f6:	88 3e       	cpi	r24, 0xE8	; 232
 7f8:	92 07       	cpc	r25, r18
 7fa:	20 f3       	brcs	.-56     	; 0x7c4 <main+0x38>
		while(get_bit(TIMER_TIFR,1)==0);// compare match  flag
		set_bit(TIMER_TIFR,1);          //clear the flag
		num_CM++;
	}

	toggle_bit(DIO_U8_PORTA,0);
 7fc:	ab e3       	ldi	r26, 0x3B	; 59
 7fe:	b0 e0       	ldi	r27, 0x00	; 0
 800:	eb e3       	ldi	r30, 0x3B	; 59
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	90 81       	ld	r25, Z
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	89 27       	eor	r24, r25
 80a:	8c 93       	st	X, r24
 80c:	d8 cf       	rjmp	.-80     	; 0x7be <main+0x32>

0000080e <_exit>:
 80e:	f8 94       	cli

00000810 <__stop_program>:
 810:	ff cf       	rjmp	.-2      	; 0x810 <__stop_program>
