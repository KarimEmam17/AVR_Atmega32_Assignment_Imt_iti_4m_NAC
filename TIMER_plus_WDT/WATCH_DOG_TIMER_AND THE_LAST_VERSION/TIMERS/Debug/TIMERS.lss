
TIMERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f44  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000f  00800060  00800060  00000fb8  2**0
                  ALLOC
  2 .stab         00001284  00000000  00000000  00000fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c4b  00000000  00000000  0000223c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	af 36       	cpi	r26, 0x6F	; 111
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 20 07 	call	0xe40	; 0xe40 <main>
  74:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8set_pin_value>:
#include "../MCAL/DIO/DIO_INTERFACE.h"



u8 DIO_u8set_pin_value(u8 Copy_u8_port_ID,u8 Copy_u8_pin_ID,u8 Copy_u8_pin_val)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_u8set_pin_value+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <DIO_u8set_pin_value+0x8>
  84:	00 d0       	rcall	.+0      	; 0x86 <DIO_u8set_pin_value+0xa>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	8a 83       	std	Y+2, r24	; 0x02
  8c:	6b 83       	std	Y+3, r22	; 0x03
  8e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
  90:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
  92:	8a 81       	ldd	r24, Y+2	; 0x02
  94:	84 30       	cpi	r24, 0x04	; 4
  96:	08 f0       	brcs	.+2      	; 0x9a <DIO_u8set_pin_value+0x1e>
  98:	e3 c0       	rjmp	.+454    	; 0x260 <DIO_u8set_pin_value+0x1e4>
	{
		if((Copy_u8_pin_ID>=MIN_u8_PIN_ID)&&(Copy_u8_pin_ID<=MAX_u8_PIN_ID))
  9a:	8b 81       	ldd	r24, Y+3	; 0x03
  9c:	88 30       	cpi	r24, 0x08	; 8
  9e:	08 f0       	brcs	.+2      	; 0xa2 <DIO_u8set_pin_value+0x26>
  a0:	dc c0       	rjmp	.+440    	; 0x25a <DIO_u8set_pin_value+0x1de>
		{
			if((Copy_u8_pin_val==MIN_u8_PIN_VAL)||(Copy_u8_pin_val==MAX_u8_PIN_VAL))
  a2:	8c 81       	ldd	r24, Y+4	; 0x04
  a4:	88 23       	and	r24, r24
  a6:	21 f0       	breq	.+8      	; 0xb0 <DIO_u8set_pin_value+0x34>
  a8:	8c 81       	ldd	r24, Y+4	; 0x04
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	09 f0       	breq	.+2      	; 0xb0 <DIO_u8set_pin_value+0x34>
  ae:	d2 c0       	rjmp	.+420    	; 0x254 <DIO_u8set_pin_value+0x1d8>
					{
						switch(Copy_u8_port_ID)
  b0:	8a 81       	ldd	r24, Y+2	; 0x02
  b2:	28 2f       	mov	r18, r24
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	3e 83       	std	Y+6, r19	; 0x06
  b8:	2d 83       	std	Y+5, r18	; 0x05
  ba:	8d 81       	ldd	r24, Y+5	; 0x05
  bc:	9e 81       	ldd	r25, Y+6	; 0x06
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	91 05       	cpc	r25, r1
  c2:	09 f4       	brne	.+2      	; 0xc6 <DIO_u8set_pin_value+0x4a>
  c4:	43 c0       	rjmp	.+134    	; 0x14c <DIO_u8set_pin_value+0xd0>
  c6:	2d 81       	ldd	r18, Y+5	; 0x05
  c8:	3e 81       	ldd	r19, Y+6	; 0x06
  ca:	22 30       	cpi	r18, 0x02	; 2
  cc:	31 05       	cpc	r19, r1
  ce:	2c f4       	brge	.+10     	; 0xda <DIO_u8set_pin_value+0x5e>
  d0:	8d 81       	ldd	r24, Y+5	; 0x05
  d2:	9e 81       	ldd	r25, Y+6	; 0x06
  d4:	00 97       	sbiw	r24, 0x00	; 0
  d6:	71 f0       	breq	.+28     	; 0xf4 <DIO_u8set_pin_value+0x78>
  d8:	c5 c0       	rjmp	.+394    	; 0x264 <DIO_u8set_pin_value+0x1e8>
  da:	2d 81       	ldd	r18, Y+5	; 0x05
  dc:	3e 81       	ldd	r19, Y+6	; 0x06
  de:	22 30       	cpi	r18, 0x02	; 2
  e0:	31 05       	cpc	r19, r1
  e2:	09 f4       	brne	.+2      	; 0xe6 <DIO_u8set_pin_value+0x6a>
  e4:	5f c0       	rjmp	.+190    	; 0x1a4 <DIO_u8set_pin_value+0x128>
  e6:	8d 81       	ldd	r24, Y+5	; 0x05
  e8:	9e 81       	ldd	r25, Y+6	; 0x06
  ea:	83 30       	cpi	r24, 0x03	; 3
  ec:	91 05       	cpc	r25, r1
  ee:	09 f4       	brne	.+2      	; 0xf2 <DIO_u8set_pin_value+0x76>
  f0:	85 c0       	rjmp	.+266    	; 0x1fc <DIO_u8set_pin_value+0x180>
  f2:	b8 c0       	rjmp	.+368    	; 0x264 <DIO_u8set_pin_value+0x1e8>
							{
								case GROUP_A:
									Assign_Bit(DIO_U8_PORTA,Copy_u8_pin_ID,Copy_u8_pin_val);
  f4:	8c 81       	ldd	r24, Y+4	; 0x04
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	a1 f4       	brne	.+40     	; 0x122 <DIO_u8set_pin_value+0xa6>
  fa:	ab e3       	ldi	r26, 0x3B	; 59
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	eb e3       	ldi	r30, 0x3B	; 59
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	48 2f       	mov	r20, r24
 106:	8b 81       	ldd	r24, Y+3	; 0x03
 108:	28 2f       	mov	r18, r24
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 2e       	mov	r0, r18
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_u8set_pin_value+0x9c>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	0a 94       	dec	r0
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_u8set_pin_value+0x98>
 11c:	84 2b       	or	r24, r20
 11e:	8c 93       	st	X, r24
 120:	a1 c0       	rjmp	.+322    	; 0x264 <DIO_u8set_pin_value+0x1e8>
 122:	ab e3       	ldi	r26, 0x3B	; 59
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	eb e3       	ldi	r30, 0x3B	; 59
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	48 2f       	mov	r20, r24
 12e:	8b 81       	ldd	r24, Y+3	; 0x03
 130:	28 2f       	mov	r18, r24
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 2e       	mov	r0, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_u8set_pin_value+0xc4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_u8set_pin_value+0xc0>
 144:	80 95       	com	r24
 146:	84 23       	and	r24, r20
 148:	8c 93       	st	X, r24
 14a:	8c c0       	rjmp	.+280    	; 0x264 <DIO_u8set_pin_value+0x1e8>
									break;
								case GROUP_B:
									Assign_Bit(DIO_U8_PORTB,Copy_u8_pin_ID,Copy_u8_pin_val);
 14c:	8c 81       	ldd	r24, Y+4	; 0x04
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	a1 f4       	brne	.+40     	; 0x17a <DIO_u8set_pin_value+0xfe>
 152:	a8 e3       	ldi	r26, 0x38	; 56
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	e8 e3       	ldi	r30, 0x38	; 56
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	48 2f       	mov	r20, r24
 15e:	8b 81       	ldd	r24, Y+3	; 0x03
 160:	28 2f       	mov	r18, r24
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 2e       	mov	r0, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_u8set_pin_value+0xf4>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_u8set_pin_value+0xf0>
 174:	84 2b       	or	r24, r20
 176:	8c 93       	st	X, r24
 178:	75 c0       	rjmp	.+234    	; 0x264 <DIO_u8set_pin_value+0x1e8>
 17a:	a8 e3       	ldi	r26, 0x38	; 56
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	e8 e3       	ldi	r30, 0x38	; 56
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	48 2f       	mov	r20, r24
 186:	8b 81       	ldd	r24, Y+3	; 0x03
 188:	28 2f       	mov	r18, r24
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 2e       	mov	r0, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_u8set_pin_value+0x11c>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_u8set_pin_value+0x118>
 19c:	80 95       	com	r24
 19e:	84 23       	and	r24, r20
 1a0:	8c 93       	st	X, r24
 1a2:	60 c0       	rjmp	.+192    	; 0x264 <DIO_u8set_pin_value+0x1e8>
									break;
								case GROUP_C:
									Assign_Bit(DIO_U8_PORTC,Copy_u8_pin_ID,Copy_u8_pin_val);
 1a4:	8c 81       	ldd	r24, Y+4	; 0x04
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	a1 f4       	brne	.+40     	; 0x1d2 <DIO_u8set_pin_value+0x156>
 1aa:	a5 e3       	ldi	r26, 0x35	; 53
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	e5 e3       	ldi	r30, 0x35	; 53
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	48 2f       	mov	r20, r24
 1b6:	8b 81       	ldd	r24, Y+3	; 0x03
 1b8:	28 2f       	mov	r18, r24
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 2e       	mov	r0, r18
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_u8set_pin_value+0x14c>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_u8set_pin_value+0x148>
 1cc:	84 2b       	or	r24, r20
 1ce:	8c 93       	st	X, r24
 1d0:	49 c0       	rjmp	.+146    	; 0x264 <DIO_u8set_pin_value+0x1e8>
 1d2:	a5 e3       	ldi	r26, 0x35	; 53
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	e5 e3       	ldi	r30, 0x35	; 53
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	48 2f       	mov	r20, r24
 1de:	8b 81       	ldd	r24, Y+3	; 0x03
 1e0:	28 2f       	mov	r18, r24
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 2e       	mov	r0, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_u8set_pin_value+0x174>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_u8set_pin_value+0x170>
 1f4:	80 95       	com	r24
 1f6:	84 23       	and	r24, r20
 1f8:	8c 93       	st	X, r24
 1fa:	34 c0       	rjmp	.+104    	; 0x264 <DIO_u8set_pin_value+0x1e8>
									break;
								case GROUP_D:
									Assign_Bit(DIO_U8_PORTD,Copy_u8_pin_ID,Copy_u8_pin_val);
 1fc:	8c 81       	ldd	r24, Y+4	; 0x04
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	a1 f4       	brne	.+40     	; 0x22a <DIO_u8set_pin_value+0x1ae>
 202:	a2 e3       	ldi	r26, 0x32	; 50
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	e2 e3       	ldi	r30, 0x32	; 50
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	48 2f       	mov	r20, r24
 20e:	8b 81       	ldd	r24, Y+3	; 0x03
 210:	28 2f       	mov	r18, r24
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 2e       	mov	r0, r18
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_u8set_pin_value+0x1a4>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	0a 94       	dec	r0
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_u8set_pin_value+0x1a0>
 224:	84 2b       	or	r24, r20
 226:	8c 93       	st	X, r24
 228:	1d c0       	rjmp	.+58     	; 0x264 <DIO_u8set_pin_value+0x1e8>
 22a:	a2 e3       	ldi	r26, 0x32	; 50
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	e2 e3       	ldi	r30, 0x32	; 50
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	48 2f       	mov	r20, r24
 236:	8b 81       	ldd	r24, Y+3	; 0x03
 238:	28 2f       	mov	r18, r24
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 2e       	mov	r0, r18
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_u8set_pin_value+0x1cc>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	0a 94       	dec	r0
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_u8set_pin_value+0x1c8>
 24c:	80 95       	com	r24
 24e:	84 23       	and	r24, r20
 250:	8c 93       	st	X, r24
 252:	08 c0       	rjmp	.+16     	; 0x264 <DIO_u8set_pin_value+0x1e8>

							}
					}
			else
				{
				Loc_u8Error_state=DIO_u8_PIN_VAL_ERROR;
 254:	89 e0       	ldi	r24, 0x09	; 9
 256:	89 83       	std	Y+1, r24	; 0x01
 258:	05 c0       	rjmp	.+10     	; 0x264 <DIO_u8set_pin_value+0x1e8>
				}

			}
		else
						{
			Loc_u8Error_state=DIO_u8_PIN_ID_ERROR;
 25a:	86 e0       	ldi	r24, 0x06	; 6
 25c:	89 83       	std	Y+1, r24	; 0x01
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_u8set_pin_value+0x1e8>


	}
	else
	{
			Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	89 83       	std	Y+1, r24	; 0x01
	}

	return Loc_u8Error_state;
 264:	89 81       	ldd	r24, Y+1	; 0x01
}
 266:	26 96       	adiw	r28, 0x06	; 6
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	f8 94       	cli
 26c:	de bf       	out	0x3e, r29	; 62
 26e:	0f be       	out	0x3f, r0	; 63
 270:	cd bf       	out	0x3d, r28	; 61
 272:	cf 91       	pop	r28
 274:	df 91       	pop	r29
 276:	08 95       	ret

00000278 <DIO_u8set_pin_dir>:

u8 DIO_u8set_pin_dir(u8 Copy_u8_port_ID,u8 Copy_u8_pin_ID,u8 Copy_u8_pin_dir)
{
 278:	df 93       	push	r29
 27a:	cf 93       	push	r28
 27c:	00 d0       	rcall	.+0      	; 0x27e <DIO_u8set_pin_dir+0x6>
 27e:	00 d0       	rcall	.+0      	; 0x280 <DIO_u8set_pin_dir+0x8>
 280:	00 d0       	rcall	.+0      	; 0x282 <DIO_u8set_pin_dir+0xa>
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	8a 83       	std	Y+2, r24	; 0x02
 288:	6b 83       	std	Y+3, r22	; 0x03
 28a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
 28c:	19 82       	std	Y+1, r1	; 0x01
		if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
 28e:	8a 81       	ldd	r24, Y+2	; 0x02
 290:	84 30       	cpi	r24, 0x04	; 4
 292:	08 f0       	brcs	.+2      	; 0x296 <DIO_u8set_pin_dir+0x1e>
 294:	e3 c0       	rjmp	.+454    	; 0x45c <DIO_u8set_pin_dir+0x1e4>
		{
			if((Copy_u8_pin_ID>=MIN_u8_PIN_ID)&&(Copy_u8_pin_ID<=MAX_u8_PIN_ID))
 296:	8b 81       	ldd	r24, Y+3	; 0x03
 298:	88 30       	cpi	r24, 0x08	; 8
 29a:	08 f0       	brcs	.+2      	; 0x29e <DIO_u8set_pin_dir+0x26>
 29c:	dc c0       	rjmp	.+440    	; 0x456 <DIO_u8set_pin_dir+0x1de>
			{
				if((Copy_u8_pin_dir==MIN_u8_PIN_DIR)||(Copy_u8_pin_dir==MAX_u8_PIN_DIR))
 29e:	8c 81       	ldd	r24, Y+4	; 0x04
 2a0:	88 23       	and	r24, r24
 2a2:	21 f0       	breq	.+8      	; 0x2ac <DIO_u8set_pin_dir+0x34>
 2a4:	8c 81       	ldd	r24, Y+4	; 0x04
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	09 f0       	breq	.+2      	; 0x2ac <DIO_u8set_pin_dir+0x34>
 2aa:	d2 c0       	rjmp	.+420    	; 0x450 <DIO_u8set_pin_dir+0x1d8>
						{
							switch(Copy_u8_port_ID)
 2ac:	8a 81       	ldd	r24, Y+2	; 0x02
 2ae:	28 2f       	mov	r18, r24
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	3e 83       	std	Y+6, r19	; 0x06
 2b4:	2d 83       	std	Y+5, r18	; 0x05
 2b6:	8d 81       	ldd	r24, Y+5	; 0x05
 2b8:	9e 81       	ldd	r25, Y+6	; 0x06
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	91 05       	cpc	r25, r1
 2be:	09 f4       	brne	.+2      	; 0x2c2 <DIO_u8set_pin_dir+0x4a>
 2c0:	43 c0       	rjmp	.+134    	; 0x348 <DIO_u8set_pin_dir+0xd0>
 2c2:	2d 81       	ldd	r18, Y+5	; 0x05
 2c4:	3e 81       	ldd	r19, Y+6	; 0x06
 2c6:	22 30       	cpi	r18, 0x02	; 2
 2c8:	31 05       	cpc	r19, r1
 2ca:	2c f4       	brge	.+10     	; 0x2d6 <DIO_u8set_pin_dir+0x5e>
 2cc:	8d 81       	ldd	r24, Y+5	; 0x05
 2ce:	9e 81       	ldd	r25, Y+6	; 0x06
 2d0:	00 97       	sbiw	r24, 0x00	; 0
 2d2:	71 f0       	breq	.+28     	; 0x2f0 <DIO_u8set_pin_dir+0x78>
 2d4:	c5 c0       	rjmp	.+394    	; 0x460 <DIO_u8set_pin_dir+0x1e8>
 2d6:	2d 81       	ldd	r18, Y+5	; 0x05
 2d8:	3e 81       	ldd	r19, Y+6	; 0x06
 2da:	22 30       	cpi	r18, 0x02	; 2
 2dc:	31 05       	cpc	r19, r1
 2de:	09 f4       	brne	.+2      	; 0x2e2 <DIO_u8set_pin_dir+0x6a>
 2e0:	5f c0       	rjmp	.+190    	; 0x3a0 <DIO_u8set_pin_dir+0x128>
 2e2:	8d 81       	ldd	r24, Y+5	; 0x05
 2e4:	9e 81       	ldd	r25, Y+6	; 0x06
 2e6:	83 30       	cpi	r24, 0x03	; 3
 2e8:	91 05       	cpc	r25, r1
 2ea:	09 f4       	brne	.+2      	; 0x2ee <DIO_u8set_pin_dir+0x76>
 2ec:	85 c0       	rjmp	.+266    	; 0x3f8 <DIO_u8set_pin_dir+0x180>
 2ee:	b8 c0       	rjmp	.+368    	; 0x460 <DIO_u8set_pin_dir+0x1e8>
								{
									case GROUP_A:
										Assign_Bit(DIO_U8_DDRA,Copy_u8_pin_ID,Copy_u8_pin_dir);
 2f0:	8c 81       	ldd	r24, Y+4	; 0x04
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	a1 f4       	brne	.+40     	; 0x31e <DIO_u8set_pin_dir+0xa6>
 2f6:	aa e3       	ldi	r26, 0x3A	; 58
 2f8:	b0 e0       	ldi	r27, 0x00	; 0
 2fa:	ea e3       	ldi	r30, 0x3A	; 58
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	48 2f       	mov	r20, r24
 302:	8b 81       	ldd	r24, Y+3	; 0x03
 304:	28 2f       	mov	r18, r24
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 2e       	mov	r0, r18
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_u8set_pin_dir+0x9c>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	0a 94       	dec	r0
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_u8set_pin_dir+0x98>
 318:	84 2b       	or	r24, r20
 31a:	8c 93       	st	X, r24
 31c:	a1 c0       	rjmp	.+322    	; 0x460 <DIO_u8set_pin_dir+0x1e8>
 31e:	aa e3       	ldi	r26, 0x3A	; 58
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	ea e3       	ldi	r30, 0x3A	; 58
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	48 2f       	mov	r20, r24
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	28 2f       	mov	r18, r24
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 2e       	mov	r0, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_u8set_pin_dir+0xc4>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_u8set_pin_dir+0xc0>
 340:	80 95       	com	r24
 342:	84 23       	and	r24, r20
 344:	8c 93       	st	X, r24
 346:	8c c0       	rjmp	.+280    	; 0x460 <DIO_u8set_pin_dir+0x1e8>
										break;
									case GROUP_B:
										Assign_Bit(DIO_U8_DDRB,Copy_u8_pin_ID,Copy_u8_pin_dir);
 348:	8c 81       	ldd	r24, Y+4	; 0x04
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	a1 f4       	brne	.+40     	; 0x376 <DIO_u8set_pin_dir+0xfe>
 34e:	a7 e3       	ldi	r26, 0x37	; 55
 350:	b0 e0       	ldi	r27, 0x00	; 0
 352:	e7 e3       	ldi	r30, 0x37	; 55
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	48 2f       	mov	r20, r24
 35a:	8b 81       	ldd	r24, Y+3	; 0x03
 35c:	28 2f       	mov	r18, r24
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 2e       	mov	r0, r18
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_u8set_pin_dir+0xf4>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	0a 94       	dec	r0
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_u8set_pin_dir+0xf0>
 370:	84 2b       	or	r24, r20
 372:	8c 93       	st	X, r24
 374:	75 c0       	rjmp	.+234    	; 0x460 <DIO_u8set_pin_dir+0x1e8>
 376:	a7 e3       	ldi	r26, 0x37	; 55
 378:	b0 e0       	ldi	r27, 0x00	; 0
 37a:	e7 e3       	ldi	r30, 0x37	; 55
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	48 2f       	mov	r20, r24
 382:	8b 81       	ldd	r24, Y+3	; 0x03
 384:	28 2f       	mov	r18, r24
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 2e       	mov	r0, r18
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_u8set_pin_dir+0x11c>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_u8set_pin_dir+0x118>
 398:	80 95       	com	r24
 39a:	84 23       	and	r24, r20
 39c:	8c 93       	st	X, r24
 39e:	60 c0       	rjmp	.+192    	; 0x460 <DIO_u8set_pin_dir+0x1e8>
										break;
									case GROUP_C:
										Assign_Bit(DIO_U8_DDRC,Copy_u8_pin_ID,Copy_u8_pin_dir);
 3a0:	8c 81       	ldd	r24, Y+4	; 0x04
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	a1 f4       	brne	.+40     	; 0x3ce <DIO_u8set_pin_dir+0x156>
 3a6:	a4 e3       	ldi	r26, 0x34	; 52
 3a8:	b0 e0       	ldi	r27, 0x00	; 0
 3aa:	e4 e3       	ldi	r30, 0x34	; 52
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	48 2f       	mov	r20, r24
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	28 2f       	mov	r18, r24
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 2e       	mov	r0, r18
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_u8set_pin_dir+0x14c>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	0a 94       	dec	r0
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_u8set_pin_dir+0x148>
 3c8:	84 2b       	or	r24, r20
 3ca:	8c 93       	st	X, r24
 3cc:	49 c0       	rjmp	.+146    	; 0x460 <DIO_u8set_pin_dir+0x1e8>
 3ce:	a4 e3       	ldi	r26, 0x34	; 52
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	e4 e3       	ldi	r30, 0x34	; 52
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	48 2f       	mov	r20, r24
 3da:	8b 81       	ldd	r24, Y+3	; 0x03
 3dc:	28 2f       	mov	r18, r24
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 2e       	mov	r0, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_u8set_pin_dir+0x174>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	0a 94       	dec	r0
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_u8set_pin_dir+0x170>
 3f0:	80 95       	com	r24
 3f2:	84 23       	and	r24, r20
 3f4:	8c 93       	st	X, r24
 3f6:	34 c0       	rjmp	.+104    	; 0x460 <DIO_u8set_pin_dir+0x1e8>
										break;
									case GROUP_D:
										Assign_Bit(DIO_U8_DDRD,Copy_u8_pin_ID,Copy_u8_pin_dir);
 3f8:	8c 81       	ldd	r24, Y+4	; 0x04
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	a1 f4       	brne	.+40     	; 0x426 <DIO_u8set_pin_dir+0x1ae>
 3fe:	a1 e3       	ldi	r26, 0x31	; 49
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	e1 e3       	ldi	r30, 0x31	; 49
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	48 2f       	mov	r20, r24
 40a:	8b 81       	ldd	r24, Y+3	; 0x03
 40c:	28 2f       	mov	r18, r24
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	02 2e       	mov	r0, r18
 416:	02 c0       	rjmp	.+4      	; 0x41c <DIO_u8set_pin_dir+0x1a4>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	0a 94       	dec	r0
 41e:	e2 f7       	brpl	.-8      	; 0x418 <DIO_u8set_pin_dir+0x1a0>
 420:	84 2b       	or	r24, r20
 422:	8c 93       	st	X, r24
 424:	1d c0       	rjmp	.+58     	; 0x460 <DIO_u8set_pin_dir+0x1e8>
 426:	a1 e3       	ldi	r26, 0x31	; 49
 428:	b0 e0       	ldi	r27, 0x00	; 0
 42a:	e1 e3       	ldi	r30, 0x31	; 49
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	48 2f       	mov	r20, r24
 432:	8b 81       	ldd	r24, Y+3	; 0x03
 434:	28 2f       	mov	r18, r24
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 2e       	mov	r0, r18
 43e:	02 c0       	rjmp	.+4      	; 0x444 <DIO_u8set_pin_dir+0x1cc>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	0a 94       	dec	r0
 446:	e2 f7       	brpl	.-8      	; 0x440 <DIO_u8set_pin_dir+0x1c8>
 448:	80 95       	com	r24
 44a:	84 23       	and	r24, r20
 44c:	8c 93       	st	X, r24
 44e:	08 c0       	rjmp	.+16     	; 0x460 <DIO_u8set_pin_dir+0x1e8>

								}
						}
				else
					{
					Loc_u8Error_state=DIO_u8_PIN_DIR_ERROR;
 450:	8c e0       	ldi	r24, 0x0C	; 12
 452:	89 83       	std	Y+1, r24	; 0x01
 454:	05 c0       	rjmp	.+10     	; 0x460 <DIO_u8set_pin_dir+0x1e8>
					}

				}
			else
							{
				Loc_u8Error_state=DIO_u8_PIN_ID_ERROR;
 456:	86 e0       	ldi	r24, 0x06	; 6
 458:	89 83       	std	Y+1, r24	; 0x01
 45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_u8set_pin_dir+0x1e8>


		}
		else
		{
				Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
 45c:	83 e0       	ldi	r24, 0x03	; 3
 45e:	89 83       	std	Y+1, r24	; 0x01
		}

		return Loc_u8Error_state;
 460:	89 81       	ldd	r24, Y+1	; 0x01

}
 462:	26 96       	adiw	r28, 0x06	; 6
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	f8 94       	cli
 468:	de bf       	out	0x3e, r29	; 62
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	cd bf       	out	0x3d, r28	; 61
 46e:	cf 91       	pop	r28
 470:	df 91       	pop	r29
 472:	08 95       	ret

00000474 <DIO_u8set_port_value>:

u8 DIO_u8set_port_value(u8 Copy_u8_port_ID,u8 Copy_u8_port_val)
{
 474:	df 93       	push	r29
 476:	cf 93       	push	r28
 478:	00 d0       	rcall	.+0      	; 0x47a <DIO_u8set_port_value+0x6>
 47a:	00 d0       	rcall	.+0      	; 0x47c <DIO_u8set_port_value+0x8>
 47c:	0f 92       	push	r0
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
 482:	8a 83       	std	Y+2, r24	; 0x02
 484:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
 486:	19 82       	std	Y+1, r1	; 0x01
			if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
 488:	8a 81       	ldd	r24, Y+2	; 0x02
 48a:	84 30       	cpi	r24, 0x04	; 4
 48c:	e0 f5       	brcc	.+120    	; 0x506 <DIO_u8set_port_value+0x92>
			{
				//solution  for this problem
					if((Copy_u8_port_val==MIN_u8_PORT_VAL)||(Copy_u8_port_val==MAX_u8_PORT_VAL))
 48e:	8b 81       	ldd	r24, Y+3	; 0x03
 490:	88 23       	and	r24, r24
 492:	19 f0       	breq	.+6      	; 0x49a <DIO_u8set_port_value+0x26>
 494:	8b 81       	ldd	r24, Y+3	; 0x03
 496:	8f 3f       	cpi	r24, 0xFF	; 255
 498:	99 f5       	brne	.+102    	; 0x500 <DIO_u8set_port_value+0x8c>
							{
								switch(Copy_u8_port_ID)
 49a:	8a 81       	ldd	r24, Y+2	; 0x02
 49c:	28 2f       	mov	r18, r24
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	3d 83       	std	Y+5, r19	; 0x05
 4a2:	2c 83       	std	Y+4, r18	; 0x04
 4a4:	8c 81       	ldd	r24, Y+4	; 0x04
 4a6:	9d 81       	ldd	r25, Y+5	; 0x05
 4a8:	81 30       	cpi	r24, 0x01	; 1
 4aa:	91 05       	cpc	r25, r1
 4ac:	d1 f0       	breq	.+52     	; 0x4e2 <DIO_u8set_port_value+0x6e>
 4ae:	2c 81       	ldd	r18, Y+4	; 0x04
 4b0:	3d 81       	ldd	r19, Y+5	; 0x05
 4b2:	22 30       	cpi	r18, 0x02	; 2
 4b4:	31 05       	cpc	r19, r1
 4b6:	2c f4       	brge	.+10     	; 0x4c2 <DIO_u8set_port_value+0x4e>
 4b8:	8c 81       	ldd	r24, Y+4	; 0x04
 4ba:	9d 81       	ldd	r25, Y+5	; 0x05
 4bc:	00 97       	sbiw	r24, 0x00	; 0
 4be:	61 f0       	breq	.+24     	; 0x4d8 <DIO_u8set_port_value+0x64>
 4c0:	24 c0       	rjmp	.+72     	; 0x50a <DIO_u8set_port_value+0x96>
 4c2:	2c 81       	ldd	r18, Y+4	; 0x04
 4c4:	3d 81       	ldd	r19, Y+5	; 0x05
 4c6:	22 30       	cpi	r18, 0x02	; 2
 4c8:	31 05       	cpc	r19, r1
 4ca:	81 f0       	breq	.+32     	; 0x4ec <DIO_u8set_port_value+0x78>
 4cc:	8c 81       	ldd	r24, Y+4	; 0x04
 4ce:	9d 81       	ldd	r25, Y+5	; 0x05
 4d0:	83 30       	cpi	r24, 0x03	; 3
 4d2:	91 05       	cpc	r25, r1
 4d4:	81 f0       	breq	.+32     	; 0x4f6 <DIO_u8set_port_value+0x82>
 4d6:	19 c0       	rjmp	.+50     	; 0x50a <DIO_u8set_port_value+0x96>
									{
										case GROUP_A:
											DIO_U8_PORTA=Copy_u8_port_val;
 4d8:	eb e3       	ldi	r30, 0x3B	; 59
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	8b 81       	ldd	r24, Y+3	; 0x03
 4de:	80 83       	st	Z, r24
 4e0:	14 c0       	rjmp	.+40     	; 0x50a <DIO_u8set_port_value+0x96>
											//Assign_Bit(DIO_U8_PORTA,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_B:
											DIO_U8_PORTB=Copy_u8_port_val;
 4e2:	e8 e3       	ldi	r30, 0x38	; 56
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	8b 81       	ldd	r24, Y+3	; 0x03
 4e8:	80 83       	st	Z, r24
 4ea:	0f c0       	rjmp	.+30     	; 0x50a <DIO_u8set_port_value+0x96>
											//Assign_Bit(DIO_U8_PORTB,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_C:
											DIO_U8_PORTC=Copy_u8_port_val;
 4ec:	e5 e3       	ldi	r30, 0x35	; 53
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	8b 81       	ldd	r24, Y+3	; 0x03
 4f2:	80 83       	st	Z, r24
 4f4:	0a c0       	rjmp	.+20     	; 0x50a <DIO_u8set_port_value+0x96>
											//Assign_Bit(DIO_U8_PORTC,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_D:
											DIO_U8_PORTD=Copy_u8_port_val;
 4f6:	e2 e3       	ldi	r30, 0x32	; 50
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	8b 81       	ldd	r24, Y+3	; 0x03
 4fc:	80 83       	st	Z, r24
 4fe:	05 c0       	rjmp	.+10     	; 0x50a <DIO_u8set_port_value+0x96>

									}
							}
					else
						{
						Loc_u8Error_state=DIO_u8_PORT_VAL_ERROR;
 500:	8f e0       	ldi	r24, 0x0F	; 15
 502:	89 83       	std	Y+1, r24	; 0x01
 504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_u8set_port_value+0x96>

			}

			else
			{
					Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
 506:	83 e0       	ldi	r24, 0x03	; 3
 508:	89 83       	std	Y+1, r24	; 0x01
			}

			return Loc_u8Error_state;
 50a:	89 81       	ldd	r24, Y+1	; 0x01
}
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	0f 90       	pop	r0
 516:	cf 91       	pop	r28
 518:	df 91       	pop	r29
 51a:	08 95       	ret

0000051c <DIO_u8set_port_dir>:

u8 DIO_u8set_port_dir(u8 Copy_u8_port_ID,u8 Copy_u8_port_dir)
{
 51c:	df 93       	push	r29
 51e:	cf 93       	push	r28
 520:	00 d0       	rcall	.+0      	; 0x522 <DIO_u8set_port_dir+0x6>
 522:	00 d0       	rcall	.+0      	; 0x524 <DIO_u8set_port_dir+0x8>
 524:	0f 92       	push	r0
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
 52a:	8a 83       	std	Y+2, r24	; 0x02
 52c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
 52e:	19 82       	std	Y+1, r1	; 0x01
			if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
 530:	8a 81       	ldd	r24, Y+2	; 0x02
 532:	84 30       	cpi	r24, 0x04	; 4
 534:	e0 f5       	brcc	.+120    	; 0x5ae <DIO_u8set_port_dir+0x92>
			{
				//solution  for this problem
					if((Copy_u8_port_dir==MIN_u8_PORT_DIR)||(Copy_u8_port_dir==MAX_u8_PORT_DIR))
 536:	8b 81       	ldd	r24, Y+3	; 0x03
 538:	88 23       	and	r24, r24
 53a:	19 f0       	breq	.+6      	; 0x542 <DIO_u8set_port_dir+0x26>
 53c:	8b 81       	ldd	r24, Y+3	; 0x03
 53e:	8f 3f       	cpi	r24, 0xFF	; 255
 540:	99 f5       	brne	.+102    	; 0x5a8 <DIO_u8set_port_dir+0x8c>
							{
								switch(Copy_u8_port_ID)
 542:	8a 81       	ldd	r24, Y+2	; 0x02
 544:	28 2f       	mov	r18, r24
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	3d 83       	std	Y+5, r19	; 0x05
 54a:	2c 83       	std	Y+4, r18	; 0x04
 54c:	8c 81       	ldd	r24, Y+4	; 0x04
 54e:	9d 81       	ldd	r25, Y+5	; 0x05
 550:	81 30       	cpi	r24, 0x01	; 1
 552:	91 05       	cpc	r25, r1
 554:	d1 f0       	breq	.+52     	; 0x58a <DIO_u8set_port_dir+0x6e>
 556:	2c 81       	ldd	r18, Y+4	; 0x04
 558:	3d 81       	ldd	r19, Y+5	; 0x05
 55a:	22 30       	cpi	r18, 0x02	; 2
 55c:	31 05       	cpc	r19, r1
 55e:	2c f4       	brge	.+10     	; 0x56a <DIO_u8set_port_dir+0x4e>
 560:	8c 81       	ldd	r24, Y+4	; 0x04
 562:	9d 81       	ldd	r25, Y+5	; 0x05
 564:	00 97       	sbiw	r24, 0x00	; 0
 566:	61 f0       	breq	.+24     	; 0x580 <DIO_u8set_port_dir+0x64>
 568:	24 c0       	rjmp	.+72     	; 0x5b2 <DIO_u8set_port_dir+0x96>
 56a:	2c 81       	ldd	r18, Y+4	; 0x04
 56c:	3d 81       	ldd	r19, Y+5	; 0x05
 56e:	22 30       	cpi	r18, 0x02	; 2
 570:	31 05       	cpc	r19, r1
 572:	81 f0       	breq	.+32     	; 0x594 <DIO_u8set_port_dir+0x78>
 574:	8c 81       	ldd	r24, Y+4	; 0x04
 576:	9d 81       	ldd	r25, Y+5	; 0x05
 578:	83 30       	cpi	r24, 0x03	; 3
 57a:	91 05       	cpc	r25, r1
 57c:	81 f0       	breq	.+32     	; 0x59e <DIO_u8set_port_dir+0x82>
 57e:	19 c0       	rjmp	.+50     	; 0x5b2 <DIO_u8set_port_dir+0x96>
									{
										case GROUP_A:
											DIO_U8_DDRA=Copy_u8_port_dir;
 580:	ea e3       	ldi	r30, 0x3A	; 58
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	8b 81       	ldd	r24, Y+3	; 0x03
 586:	80 83       	st	Z, r24
 588:	14 c0       	rjmp	.+40     	; 0x5b2 <DIO_u8set_port_dir+0x96>
											//Assign_Bit(DIO_U8_PORTA,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_B:
											DIO_U8_DDRB=Copy_u8_port_dir;
 58a:	e7 e3       	ldi	r30, 0x37	; 55
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	8b 81       	ldd	r24, Y+3	; 0x03
 590:	80 83       	st	Z, r24
 592:	0f c0       	rjmp	.+30     	; 0x5b2 <DIO_u8set_port_dir+0x96>
											//Assign_Bit(DIO_U8_PORTB,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_C:
											DIO_U8_DDRC=Copy_u8_port_dir;
 594:	e4 e3       	ldi	r30, 0x34	; 52
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	8b 81       	ldd	r24, Y+3	; 0x03
 59a:	80 83       	st	Z, r24
 59c:	0a c0       	rjmp	.+20     	; 0x5b2 <DIO_u8set_port_dir+0x96>
											//Assign_Bit(DIO_U8_PORTC,Copy_u8_pin_ID,Copy_u8_port_val);
											break;
										case GROUP_D:
											DIO_U8_DDRD=Copy_u8_port_dir;
 59e:	e1 e3       	ldi	r30, 0x31	; 49
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	8b 81       	ldd	r24, Y+3	; 0x03
 5a4:	80 83       	st	Z, r24
 5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <DIO_u8set_port_dir+0x96>

									}
							}
					else
						{
						Loc_u8Error_state=DIO_u8_PORT_DIR_ERROR;
 5a8:	82 e1       	ldi	r24, 0x12	; 18
 5aa:	89 83       	std	Y+1, r24	; 0x01
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_u8set_port_dir+0x96>

			}

			else
			{
					Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
 5ae:	83 e0       	ldi	r24, 0x03	; 3
 5b0:	89 83       	std	Y+1, r24	; 0x01
			}

			return Loc_u8Error_state;
 5b2:	89 81       	ldd	r24, Y+1	; 0x01
}
 5b4:	0f 90       	pop	r0
 5b6:	0f 90       	pop	r0
 5b8:	0f 90       	pop	r0
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
 5be:	cf 91       	pop	r28
 5c0:	df 91       	pop	r29
 5c2:	08 95       	ret

000005c4 <DIO_u8get_pin_value>:

u8 DIO_u8get_pin_value(u8 Copy_u8_port_ID,u8 Copy_u8_pin_ID,u8 *Copy_u8_pin_val)
{
 5c4:	df 93       	push	r29
 5c6:	cf 93       	push	r28
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
 5cc:	27 97       	sbiw	r28, 0x07	; 7
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	f8 94       	cli
 5d2:	de bf       	out	0x3e, r29	; 62
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	cd bf       	out	0x3d, r28	; 61
 5d8:	8a 83       	std	Y+2, r24	; 0x02
 5da:	6b 83       	std	Y+3, r22	; 0x03
 5dc:	5d 83       	std	Y+5, r21	; 0x05
 5de:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
 5e0:	19 82       	std	Y+1, r1	; 0x01
		if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
 5e2:	8a 81       	ldd	r24, Y+2	; 0x02
 5e4:	84 30       	cpi	r24, 0x04	; 4
 5e6:	08 f0       	brcs	.+2      	; 0x5ea <DIO_u8get_pin_value+0x26>
 5e8:	78 c0       	rjmp	.+240    	; 0x6da <DIO_u8get_pin_value+0x116>
		{
			if((Copy_u8_pin_ID>=MIN_u8_PIN_ID)&&(Copy_u8_pin_ID<=MAX_u8_PIN_ID))
 5ea:	8b 81       	ldd	r24, Y+3	; 0x03
 5ec:	88 30       	cpi	r24, 0x08	; 8
 5ee:	08 f0       	brcs	.+2      	; 0x5f2 <DIO_u8get_pin_value+0x2e>
 5f0:	71 c0       	rjmp	.+226    	; 0x6d4 <DIO_u8get_pin_value+0x110>
			{

							switch(Copy_u8_port_ID)
 5f2:	8a 81       	ldd	r24, Y+2	; 0x02
 5f4:	28 2f       	mov	r18, r24
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	3f 83       	std	Y+7, r19	; 0x07
 5fa:	2e 83       	std	Y+6, r18	; 0x06
 5fc:	4e 81       	ldd	r20, Y+6	; 0x06
 5fe:	5f 81       	ldd	r21, Y+7	; 0x07
 600:	41 30       	cpi	r20, 0x01	; 1
 602:	51 05       	cpc	r21, r1
 604:	59 f1       	breq	.+86     	; 0x65c <DIO_u8get_pin_value+0x98>
 606:	8e 81       	ldd	r24, Y+6	; 0x06
 608:	9f 81       	ldd	r25, Y+7	; 0x07
 60a:	82 30       	cpi	r24, 0x02	; 2
 60c:	91 05       	cpc	r25, r1
 60e:	34 f4       	brge	.+12     	; 0x61c <DIO_u8get_pin_value+0x58>
 610:	2e 81       	ldd	r18, Y+6	; 0x06
 612:	3f 81       	ldd	r19, Y+7	; 0x07
 614:	21 15       	cp	r18, r1
 616:	31 05       	cpc	r19, r1
 618:	69 f0       	breq	.+26     	; 0x634 <DIO_u8get_pin_value+0x70>
 61a:	61 c0       	rjmp	.+194    	; 0x6de <DIO_u8get_pin_value+0x11a>
 61c:	4e 81       	ldd	r20, Y+6	; 0x06
 61e:	5f 81       	ldd	r21, Y+7	; 0x07
 620:	42 30       	cpi	r20, 0x02	; 2
 622:	51 05       	cpc	r21, r1
 624:	79 f1       	breq	.+94     	; 0x684 <DIO_u8get_pin_value+0xc0>
 626:	8e 81       	ldd	r24, Y+6	; 0x06
 628:	9f 81       	ldd	r25, Y+7	; 0x07
 62a:	83 30       	cpi	r24, 0x03	; 3
 62c:	91 05       	cpc	r25, r1
 62e:	09 f4       	brne	.+2      	; 0x632 <DIO_u8get_pin_value+0x6e>
 630:	3d c0       	rjmp	.+122    	; 0x6ac <DIO_u8get_pin_value+0xe8>
 632:	55 c0       	rjmp	.+170    	; 0x6de <DIO_u8get_pin_value+0x11a>
								{
									case GROUP_A:
										*Copy_u8_pin_val = get_bit(DIO_U8_PINA,Copy_u8_pin_ID);
 634:	e9 e3       	ldi	r30, 0x39	; 57
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
 63a:	28 2f       	mov	r18, r24
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	8b 81       	ldd	r24, Y+3	; 0x03
 640:	88 2f       	mov	r24, r24
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	a9 01       	movw	r20, r18
 646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_u8get_pin_value+0x88>
 648:	55 95       	asr	r21
 64a:	47 95       	ror	r20
 64c:	8a 95       	dec	r24
 64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_u8get_pin_value+0x84>
 650:	ca 01       	movw	r24, r20
 652:	81 70       	andi	r24, 0x01	; 1
 654:	ec 81       	ldd	r30, Y+4	; 0x04
 656:	fd 81       	ldd	r31, Y+5	; 0x05
 658:	80 83       	st	Z, r24
 65a:	41 c0       	rjmp	.+130    	; 0x6de <DIO_u8get_pin_value+0x11a>
										break;
									case GROUP_B:
										*Copy_u8_pin_val = get_bit(DIO_U8_PINB,Copy_u8_pin_ID);
 65c:	e6 e3       	ldi	r30, 0x36	; 54
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	80 81       	ld	r24, Z
 662:	28 2f       	mov	r18, r24
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	8b 81       	ldd	r24, Y+3	; 0x03
 668:	88 2f       	mov	r24, r24
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	a9 01       	movw	r20, r18
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_u8get_pin_value+0xb0>
 670:	55 95       	asr	r21
 672:	47 95       	ror	r20
 674:	8a 95       	dec	r24
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_u8get_pin_value+0xac>
 678:	ca 01       	movw	r24, r20
 67a:	81 70       	andi	r24, 0x01	; 1
 67c:	ec 81       	ldd	r30, Y+4	; 0x04
 67e:	fd 81       	ldd	r31, Y+5	; 0x05
 680:	80 83       	st	Z, r24
 682:	2d c0       	rjmp	.+90     	; 0x6de <DIO_u8get_pin_value+0x11a>
										break;
									case GROUP_C:
										*Copy_u8_pin_val = get_bit(DIO_U8_PINC,Copy_u8_pin_ID);
 684:	e3 e3       	ldi	r30, 0x33	; 51
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	28 2f       	mov	r18, r24
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	8b 81       	ldd	r24, Y+3	; 0x03
 690:	88 2f       	mov	r24, r24
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	a9 01       	movw	r20, r18
 696:	02 c0       	rjmp	.+4      	; 0x69c <DIO_u8get_pin_value+0xd8>
 698:	55 95       	asr	r21
 69a:	47 95       	ror	r20
 69c:	8a 95       	dec	r24
 69e:	e2 f7       	brpl	.-8      	; 0x698 <DIO_u8get_pin_value+0xd4>
 6a0:	ca 01       	movw	r24, r20
 6a2:	81 70       	andi	r24, 0x01	; 1
 6a4:	ec 81       	ldd	r30, Y+4	; 0x04
 6a6:	fd 81       	ldd	r31, Y+5	; 0x05
 6a8:	80 83       	st	Z, r24
 6aa:	19 c0       	rjmp	.+50     	; 0x6de <DIO_u8get_pin_value+0x11a>
										break;
									case GROUP_D:
										*Copy_u8_pin_val = get_bit(DIO_U8_PIND,Copy_u8_pin_ID);
 6ac:	e0 e3       	ldi	r30, 0x30	; 48
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	80 81       	ld	r24, Z
 6b2:	28 2f       	mov	r18, r24
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	8b 81       	ldd	r24, Y+3	; 0x03
 6b8:	88 2f       	mov	r24, r24
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	a9 01       	movw	r20, r18
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <DIO_u8get_pin_value+0x100>
 6c0:	55 95       	asr	r21
 6c2:	47 95       	ror	r20
 6c4:	8a 95       	dec	r24
 6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <DIO_u8get_pin_value+0xfc>
 6c8:	ca 01       	movw	r24, r20
 6ca:	81 70       	andi	r24, 0x01	; 1
 6cc:	ec 81       	ldd	r30, Y+4	; 0x04
 6ce:	fd 81       	ldd	r31, Y+5	; 0x05
 6d0:	80 83       	st	Z, r24
 6d2:	05 c0       	rjmp	.+10     	; 0x6de <DIO_u8get_pin_value+0x11a>


				}
			else
							{
				Loc_u8Error_state=DIO_u8_PIN_ID_ERROR;
 6d4:	86 e0       	ldi	r24, 0x06	; 6
 6d6:	89 83       	std	Y+1, r24	; 0x01
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <DIO_u8get_pin_value+0x11a>


		}
		else
		{
				Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
 6da:	83 e0       	ldi	r24, 0x03	; 3
 6dc:	89 83       	std	Y+1, r24	; 0x01
		}

		return Loc_u8Error_state;
 6de:	89 81       	ldd	r24, Y+1	; 0x01
}
 6e0:	27 96       	adiw	r28, 0x07	; 7
 6e2:	0f b6       	in	r0, 0x3f	; 63
 6e4:	f8 94       	cli
 6e6:	de bf       	out	0x3e, r29	; 62
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	cd bf       	out	0x3d, r28	; 61
 6ec:	cf 91       	pop	r28
 6ee:	df 91       	pop	r29
 6f0:	08 95       	ret

000006f2 <DIO_u8Get_port_value>:

u8 DIO_u8Get_port_value(u8 Copy_u8_port_ID,u8 *Copy_u8_port_val)
{
 6f2:	df 93       	push	r29
 6f4:	cf 93       	push	r28
 6f6:	00 d0       	rcall	.+0      	; 0x6f8 <DIO_u8Get_port_value+0x6>
 6f8:	00 d0       	rcall	.+0      	; 0x6fa <DIO_u8Get_port_value+0x8>
 6fa:	00 d0       	rcall	.+0      	; 0x6fc <DIO_u8Get_port_value+0xa>
 6fc:	cd b7       	in	r28, 0x3d	; 61
 6fe:	de b7       	in	r29, 0x3e	; 62
 700:	8a 83       	std	Y+2, r24	; 0x02
 702:	7c 83       	std	Y+4, r23	; 0x04
 704:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Error_state=DIO_u8_ERROR_INIT_VAl;
 706:	19 82       	std	Y+1, r1	; 0x01
			if ((Copy_u8_port_ID>=MIN_u8_PORT_ID)&&(Copy_u8_port_ID<=MAX_u8_PORT_ID))
 708:	8a 81       	ldd	r24, Y+2	; 0x02
 70a:	84 30       	cpi	r24, 0x04	; 4
 70c:	d8 f5       	brcc	.+118    	; 0x784 <DIO_u8Get_port_value+0x92>
			{

								switch(Copy_u8_port_ID)
 70e:	8a 81       	ldd	r24, Y+2	; 0x02
 710:	28 2f       	mov	r18, r24
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	3e 83       	std	Y+6, r19	; 0x06
 716:	2d 83       	std	Y+5, r18	; 0x05
 718:	8d 81       	ldd	r24, Y+5	; 0x05
 71a:	9e 81       	ldd	r25, Y+6	; 0x06
 71c:	81 30       	cpi	r24, 0x01	; 1
 71e:	91 05       	cpc	r25, r1
 720:	e1 f0       	breq	.+56     	; 0x75a <DIO_u8Get_port_value+0x68>
 722:	2d 81       	ldd	r18, Y+5	; 0x05
 724:	3e 81       	ldd	r19, Y+6	; 0x06
 726:	22 30       	cpi	r18, 0x02	; 2
 728:	31 05       	cpc	r19, r1
 72a:	2c f4       	brge	.+10     	; 0x736 <DIO_u8Get_port_value+0x44>
 72c:	8d 81       	ldd	r24, Y+5	; 0x05
 72e:	9e 81       	ldd	r25, Y+6	; 0x06
 730:	00 97       	sbiw	r24, 0x00	; 0
 732:	61 f0       	breq	.+24     	; 0x74c <DIO_u8Get_port_value+0x5a>
 734:	29 c0       	rjmp	.+82     	; 0x788 <DIO_u8Get_port_value+0x96>
 736:	2d 81       	ldd	r18, Y+5	; 0x05
 738:	3e 81       	ldd	r19, Y+6	; 0x06
 73a:	22 30       	cpi	r18, 0x02	; 2
 73c:	31 05       	cpc	r19, r1
 73e:	a1 f0       	breq	.+40     	; 0x768 <DIO_u8Get_port_value+0x76>
 740:	8d 81       	ldd	r24, Y+5	; 0x05
 742:	9e 81       	ldd	r25, Y+6	; 0x06
 744:	83 30       	cpi	r24, 0x03	; 3
 746:	91 05       	cpc	r25, r1
 748:	b1 f0       	breq	.+44     	; 0x776 <DIO_u8Get_port_value+0x84>
 74a:	1e c0       	rjmp	.+60     	; 0x788 <DIO_u8Get_port_value+0x96>
									{
										case GROUP_A:
											*Copy_u8_port_val = DIO_U8_PINA;
 74c:	e9 e3       	ldi	r30, 0x39	; 57
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	eb 81       	ldd	r30, Y+3	; 0x03
 754:	fc 81       	ldd	r31, Y+4	; 0x04
 756:	80 83       	st	Z, r24
 758:	17 c0       	rjmp	.+46     	; 0x788 <DIO_u8Get_port_value+0x96>
											break;
										case GROUP_B:
											*Copy_u8_port_val = DIO_U8_PINB;
 75a:	e6 e3       	ldi	r30, 0x36	; 54
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	80 81       	ld	r24, Z
 760:	eb 81       	ldd	r30, Y+3	; 0x03
 762:	fc 81       	ldd	r31, Y+4	; 0x04
 764:	80 83       	st	Z, r24
 766:	10 c0       	rjmp	.+32     	; 0x788 <DIO_u8Get_port_value+0x96>
											break;
										case GROUP_C:
											*Copy_u8_port_val = DIO_U8_PINC;
 768:	e3 e3       	ldi	r30, 0x33	; 51
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	80 81       	ld	r24, Z
 76e:	eb 81       	ldd	r30, Y+3	; 0x03
 770:	fc 81       	ldd	r31, Y+4	; 0x04
 772:	80 83       	st	Z, r24
 774:	09 c0       	rjmp	.+18     	; 0x788 <DIO_u8Get_port_value+0x96>
											break;
										case GROUP_D:
											*Copy_u8_port_val =DIO_U8_PIND;
 776:	e0 e3       	ldi	r30, 0x30	; 48
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	80 81       	ld	r24, Z
 77c:	eb 81       	ldd	r30, Y+3	; 0x03
 77e:	fc 81       	ldd	r31, Y+4	; 0x04
 780:	80 83       	st	Z, r24
 782:	02 c0       	rjmp	.+4      	; 0x788 <DIO_u8Get_port_value+0x96>

			}

			else
			{
					Loc_u8Error_state=DIO_u8_PORT_ID_ERROR;
 784:	83 e0       	ldi	r24, 0x03	; 3
 786:	89 83       	std	Y+1, r24	; 0x01
			}

			return Loc_u8Error_state;
 788:	89 81       	ldd	r24, Y+1	; 0x01

}
 78a:	26 96       	adiw	r28, 0x06	; 6
 78c:	0f b6       	in	r0, 0x3f	; 63
 78e:	f8 94       	cli
 790:	de bf       	out	0x3e, r29	; 62
 792:	0f be       	out	0x3f, r0	; 63
 794:	cd bf       	out	0x3d, r28	; 61
 796:	cf 91       	pop	r28
 798:	df 91       	pop	r29
 79a:	08 95       	ret

0000079c <Timer_Start>:
static void (*PTRFUNC_TIMER1_ISR)(void)=NULL;
static void (*PTRFUNC_TIMER2_ISR)(void)=NULL;

/***********************************************************************************************/
static void Timer_Start(u8 COPY_u8_Timer_Num)
{
 79c:	df 93       	push	r29
 79e:	cf 93       	push	r28
 7a0:	00 d0       	rcall	.+0      	; 0x7a2 <Timer_Start+0x6>
 7a2:	0f 92       	push	r0
 7a4:	cd b7       	in	r28, 0x3d	; 61
 7a6:	de b7       	in	r29, 0x3e	; 62
 7a8:	89 83       	std	Y+1, r24	; 0x01
	switch (COPY_u8_Timer_Num)
 7aa:	89 81       	ldd	r24, Y+1	; 0x01
 7ac:	28 2f       	mov	r18, r24
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	3b 83       	std	Y+3, r19	; 0x03
 7b2:	2a 83       	std	Y+2, r18	; 0x02
 7b4:	8a 81       	ldd	r24, Y+2	; 0x02
 7b6:	9b 81       	ldd	r25, Y+3	; 0x03
 7b8:	00 97       	sbiw	r24, 0x00	; 0
 7ba:	31 f0       	breq	.+12     	; 0x7c8 <Timer_Start+0x2c>
 7bc:	2a 81       	ldd	r18, Y+2	; 0x02
 7be:	3b 81       	ldd	r19, Y+3	; 0x03
 7c0:	21 30       	cpi	r18, 0x01	; 1
 7c2:	31 05       	cpc	r19, r1
 7c4:	a9 f0       	breq	.+42     	; 0x7f0 <Timer_Start+0x54>
 7c6:	31 c0       	rjmp	.+98     	; 0x82a <Timer_Start+0x8e>
		{
		case Timer0:
			/*STOPPING TIMER0 */
			TIMER_TCCR0 &=Timer0_Stop;
 7c8:	a3 e5       	ldi	r26, 0x53	; 83
 7ca:	b0 e0       	ldi	r27, 0x00	; 0
 7cc:	e3 e5       	ldi	r30, 0x53	; 83
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	80 81       	ld	r24, Z
 7d2:	88 7f       	andi	r24, 0xF8	; 248
 7d4:	8c 93       	st	X, r24

			/******Reseting  Timer/counter  register *******/

			TIMER_TCNT0=0;
 7d6:	e2 e5       	ldi	r30, 0x52	; 82
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	10 82       	st	Z, r1
			/***********STARTING  THE TIMER0***************/
			TIMER_TCCR0 |=COPY_STATIC_Timer0_Prescalar;
 7dc:	a3 e5       	ldi	r26, 0x53	; 83
 7de:	b0 e0       	ldi	r27, 0x00	; 0
 7e0:	e3 e5       	ldi	r30, 0x53	; 83
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	90 81       	ld	r25, Z
 7e6:	80 91 66 00 	lds	r24, 0x0066
 7ea:	89 2b       	or	r24, r25
 7ec:	8c 93       	st	X, r24
 7ee:	1d c0       	rjmp	.+58     	; 0x82a <Timer_Start+0x8e>
			break;

		case Timer1:
			/*STOPPING TIMER0 */
			TIMER_TCCR1 &=TIMER1_STOP;
 7f0:	ae e4       	ldi	r26, 0x4E	; 78
 7f2:	b0 e0       	ldi	r27, 0x00	; 0
 7f4:	ee e4       	ldi	r30, 0x4E	; 78
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	80 81       	ld	r24, Z
 7fa:	91 81       	ldd	r25, Z+1	; 0x01
 7fc:	88 7f       	andi	r24, 0xF8	; 248
 7fe:	11 96       	adiw	r26, 0x01	; 1
 800:	9c 93       	st	X, r25
 802:	8e 93       	st	-X, r24

			/******Reseting  Timer/counter  register *******/

			TIMER_TCNT1=0;
 804:	ec e4       	ldi	r30, 0x4C	; 76
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	11 82       	std	Z+1, r1	; 0x01
 80a:	10 82       	st	Z, r1
			/***********STARTING  THE TIMER0***************/
			TIMER_TCCR1 |=COPY_STATIC_Timer1_Prescalar;
 80c:	ae e4       	ldi	r26, 0x4E	; 78
 80e:	b0 e0       	ldi	r27, 0x00	; 0
 810:	ee e4       	ldi	r30, 0x4E	; 78
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	20 81       	ld	r18, Z
 816:	31 81       	ldd	r19, Z+1	; 0x01
 818:	80 91 67 00 	lds	r24, 0x0067
 81c:	88 2f       	mov	r24, r24
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	82 2b       	or	r24, r18
 822:	93 2b       	or	r25, r19
 824:	11 96       	adiw	r26, 0x01	; 1
 826:	9c 93       	st	X, r25
 828:	8e 93       	st	-X, r24
			break;

		default:
			break;
		}
}
 82a:	0f 90       	pop	r0
 82c:	0f 90       	pop	r0
 82e:	0f 90       	pop	r0
 830:	cf 91       	pop	r28
 832:	df 91       	pop	r29
 834:	08 95       	ret

00000836 <Timer_Stop>:

static void Timer_Stop(u8 COPY_u8_Timer_Num)
{
 836:	df 93       	push	r29
 838:	cf 93       	push	r28
 83a:	00 d0       	rcall	.+0      	; 0x83c <Timer_Stop+0x6>
 83c:	0f 92       	push	r0
 83e:	cd b7       	in	r28, 0x3d	; 61
 840:	de b7       	in	r29, 0x3e	; 62
 842:	89 83       	std	Y+1, r24	; 0x01
	switch (COPY_u8_Timer_Num)
 844:	89 81       	ldd	r24, Y+1	; 0x01
 846:	28 2f       	mov	r18, r24
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	3b 83       	std	Y+3, r19	; 0x03
 84c:	2a 83       	std	Y+2, r18	; 0x02
 84e:	8a 81       	ldd	r24, Y+2	; 0x02
 850:	9b 81       	ldd	r25, Y+3	; 0x03
 852:	00 97       	sbiw	r24, 0x00	; 0
 854:	31 f0       	breq	.+12     	; 0x862 <__stack+0x3>
 856:	2a 81       	ldd	r18, Y+2	; 0x02
 858:	3b 81       	ldd	r19, Y+3	; 0x03
 85a:	21 30       	cpi	r18, 0x01	; 1
 85c:	31 05       	cpc	r19, r1
 85e:	49 f0       	breq	.+18     	; 0x872 <__stack+0x13>
 860:	12 c0       	rjmp	.+36     	; 0x886 <__stack+0x27>
		{
		case Timer0:
			/*STOPPING TIMER0 */
			TIMER_TCCR0 &=Timer0_Stop;
 862:	a3 e5       	ldi	r26, 0x53	; 83
 864:	b0 e0       	ldi	r27, 0x00	; 0
 866:	e3 e5       	ldi	r30, 0x53	; 83
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	80 81       	ld	r24, Z
 86c:	88 7f       	andi	r24, 0xF8	; 248
 86e:	8c 93       	st	X, r24
 870:	0a c0       	rjmp	.+20     	; 0x886 <__stack+0x27>
			break;

		case Timer1:
			TIMER_TCCR1 &=TIMER1_STOP;
 872:	ae e4       	ldi	r26, 0x4E	; 78
 874:	b0 e0       	ldi	r27, 0x00	; 0
 876:	ee e4       	ldi	r30, 0x4E	; 78
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	80 81       	ld	r24, Z
 87c:	91 81       	ldd	r25, Z+1	; 0x01
 87e:	88 7f       	andi	r24, 0xF8	; 248
 880:	11 96       	adiw	r26, 0x01	; 1
 882:	9c 93       	st	X, r25
 884:	8e 93       	st	-X, r24
			break;

		default:
			break;
		}
}
 886:	0f 90       	pop	r0
 888:	0f 90       	pop	r0
 88a:	0f 90       	pop	r0
 88c:	cf 91       	pop	r28
 88e:	df 91       	pop	r29
 890:	08 95       	ret

00000892 <Timer_DelayInit>:


void Timer_DelayInit(u8 COPY_u8_Timer_Num)
{
 892:	df 93       	push	r29
 894:	cf 93       	push	r28
 896:	00 d0       	rcall	.+0      	; 0x898 <Timer_DelayInit+0x6>
 898:	0f 92       	push	r0
 89a:	cd b7       	in	r28, 0x3d	; 61
 89c:	de b7       	in	r29, 0x3e	; 62
 89e:	89 83       	std	Y+1, r24	; 0x01
	switch (COPY_u8_Timer_Num)
 8a0:	89 81       	ldd	r24, Y+1	; 0x01
 8a2:	28 2f       	mov	r18, r24
 8a4:	30 e0       	ldi	r19, 0x00	; 0
 8a6:	3b 83       	std	Y+3, r19	; 0x03
 8a8:	2a 83       	std	Y+2, r18	; 0x02
 8aa:	8a 81       	ldd	r24, Y+2	; 0x02
 8ac:	9b 81       	ldd	r25, Y+3	; 0x03
 8ae:	81 30       	cpi	r24, 0x01	; 1
 8b0:	91 05       	cpc	r25, r1
 8b2:	c1 f0       	breq	.+48     	; 0x8e4 <Timer_DelayInit+0x52>
 8b4:	2a 81       	ldd	r18, Y+2	; 0x02
 8b6:	3b 81       	ldd	r19, Y+3	; 0x03
 8b8:	22 30       	cpi	r18, 0x02	; 2
 8ba:	31 05       	cpc	r19, r1
 8bc:	b9 f0       	breq	.+46     	; 0x8ec <Timer_DelayInit+0x5a>
 8be:	8a 81       	ldd	r24, Y+2	; 0x02
 8c0:	9b 81       	ldd	r25, Y+3	; 0x03
 8c2:	00 97       	sbiw	r24, 0x00	; 0
 8c4:	b1 f4       	brne	.+44     	; 0x8f2 <Timer_DelayInit+0x60>
	{
	case Timer0:
		/*********************SET The prescalar to Global VAR To USE It With START_FUNC------------->64------------>FRQ 8MHz *****************************/
		COPY_STATIC_Timer0_Prescalar=TiMER_64_PRESCALAR;
 8c6:	83 e0       	ldi	r24, 0x03	; 3
 8c8:	80 93 66 00 	sts	0x0066, r24
		/************ACTIVE THE CTC MODE************/
		set_bit(TIMER_TCCR0,TIMER_TCCR0_WGM01);
 8cc:	a3 e5       	ldi	r26, 0x53	; 83
 8ce:	b0 e0       	ldi	r27, 0x00	; 0
 8d0:	e3 e5       	ldi	r30, 0x53	; 83
 8d2:	f0 e0       	ldi	r31, 0x00	; 0
 8d4:	80 81       	ld	r24, Z
 8d6:	88 60       	ori	r24, 0x08	; 8
 8d8:	8c 93       	st	X, r24
		/*******************setting OCR0 VALUE TO  MAKE ADELAY 1ms at prescalar64 and FRQ 8MHZ ************************/

		TIMER_OCR0=125;
 8da:	ec e5       	ldi	r30, 0x5C	; 92
 8dc:	f0 e0       	ldi	r31, 0x00	; 0
 8de:	8d e7       	ldi	r24, 0x7D	; 125
 8e0:	80 83       	st	Z, r24
 8e2:	07 c0       	rjmp	.+14     	; 0x8f2 <Timer_DelayInit+0x60>
		break;

	case Timer1:
		/*********************SET The prescalar to Global VAR To USE It With START_FUNC *****************************/
				COPY_STATIC_Timer1_Prescalar=TiMER_64_PRESCALAR;
 8e4:	83 e0       	ldi	r24, 0x03	; 3
 8e6:	80 93 67 00 	sts	0x0067, r24
 8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <Timer_DelayInit+0x60>
		break;

	case Timer2:
		/*********************SET The prescalar to Global VAR To USE It With START_FUNC *****************************/
				COPY_STATIC_Timer2_Prescalar=TiMER_64_PRESCALAR;
 8ec:	83 e0       	ldi	r24, 0x03	; 3
 8ee:	80 93 68 00 	sts	0x0068, r24
		break;

	default:
		break;
	}
}
 8f2:	0f 90       	pop	r0
 8f4:	0f 90       	pop	r0
 8f6:	0f 90       	pop	r0
 8f8:	cf 91       	pop	r28
 8fa:	df 91       	pop	r29
 8fc:	08 95       	ret

000008fe <TIMER_PWMINIT>:

void TIMER_PWMINIT(u8 COPY_u8_TIMER_NUM,u8 COPY_u8_FREQUANCY)
{
 8fe:	df 93       	push	r29
 900:	cf 93       	push	r28
 902:	00 d0       	rcall	.+0      	; 0x904 <TIMER_PWMINIT+0x6>
 904:	00 d0       	rcall	.+0      	; 0x906 <TIMER_PWMINIT+0x8>
 906:	cd b7       	in	r28, 0x3d	; 61
 908:	de b7       	in	r29, 0x3e	; 62
 90a:	89 83       	std	Y+1, r24	; 0x01
 90c:	6a 83       	std	Y+2, r22	; 0x02
	switch (COPY_u8_TIMER_NUM)
 90e:	89 81       	ldd	r24, Y+1	; 0x01
 910:	88 2f       	mov	r24, r24
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	00 97       	sbiw	r24, 0x00	; 0
 916:	09 f0       	breq	.+2      	; 0x91a <TIMER_PWMINIT+0x1c>
 918:	59 c0       	rjmp	.+178    	; 0x9cc <TIMER_PWMINIT+0xce>
		{
		case Timer0:
			COPY_STATIC_Timer0_Prescalar=COPY_u8_FREQUANCY;
 91a:	8a 81       	ldd	r24, Y+2	; 0x02
 91c:	80 93 66 00 	sts	0x0066, r24
			switch(COPY_u8_FREQUANCY)
 920:	8a 81       	ldd	r24, Y+2	; 0x02
 922:	28 2f       	mov	r18, r24
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	3c 83       	std	Y+4, r19	; 0x04
 928:	2b 83       	std	Y+3, r18	; 0x03
 92a:	8b 81       	ldd	r24, Y+3	; 0x03
 92c:	9c 81       	ldd	r25, Y+4	; 0x04
 92e:	81 30       	cpi	r24, 0x01	; 1
 930:	91 05       	cpc	r25, r1
 932:	0c f4       	brge	.+2      	; 0x936 <TIMER_PWMINIT+0x38>
 934:	4b c0       	rjmp	.+150    	; 0x9cc <TIMER_PWMINIT+0xce>
 936:	2b 81       	ldd	r18, Y+3	; 0x03
 938:	3c 81       	ldd	r19, Y+4	; 0x04
 93a:	26 30       	cpi	r18, 0x06	; 6
 93c:	31 05       	cpc	r19, r1
 93e:	44 f0       	brlt	.+16     	; 0x950 <TIMER_PWMINIT+0x52>
 940:	8b 81       	ldd	r24, Y+3	; 0x03
 942:	9c 81       	ldd	r25, Y+4	; 0x04
 944:	0b 97       	sbiw	r24, 0x0b	; 11
 946:	85 30       	cpi	r24, 0x05	; 5
 948:	91 05       	cpc	r25, r1
 94a:	08 f0       	brcs	.+2      	; 0x94e <TIMER_PWMINIT+0x50>
 94c:	3f c0       	rjmp	.+126    	; 0x9cc <TIMER_PWMINIT+0xce>
 94e:	1d c0       	rjmp	.+58     	; 0x98a <TIMER_PWMINIT+0x8c>
			{
				/****case in  range of FAST  PWM*********************/
				case TIMER_FREQ_31_25KHZ ... TIMER_FREQ_30HZ:
					/************set tccr0 to fast pwm******************/
					set_bit(TIMER_TCCR0,TIMER_TCCR0_WGM00);
 950:	a3 e5       	ldi	r26, 0x53	; 83
 952:	b0 e0       	ldi	r27, 0x00	; 0
 954:	e3 e5       	ldi	r30, 0x53	; 83
 956:	f0 e0       	ldi	r31, 0x00	; 0
 958:	80 81       	ld	r24, Z
 95a:	80 64       	ori	r24, 0x40	; 64
 95c:	8c 93       	st	X, r24
					set_bit(TIMER_TCCR0,TIMER_TCCR0_WGM01);
 95e:	a3 e5       	ldi	r26, 0x53	; 83
 960:	b0 e0       	ldi	r27, 0x00	; 0
 962:	e3 e5       	ldi	r30, 0x53	; 83
 964:	f0 e0       	ldi	r31, 0x00	; 0
 966:	80 81       	ld	r24, Z
 968:	88 60       	ori	r24, 0x08	; 8
 96a:	8c 93       	st	X, r24
					/***********set tccr0 to non inverted mode ****************/
					set_bit(TIMER_TCCR0,TIMER_TCCR0_COM01);
 96c:	a3 e5       	ldi	r26, 0x53	; 83
 96e:	b0 e0       	ldi	r27, 0x00	; 0
 970:	e3 e5       	ldi	r30, 0x53	; 83
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	80 81       	ld	r24, Z
 976:	80 62       	ori	r24, 0x20	; 32
 978:	8c 93       	st	X, r24
					clear_bit(TIMER_TCCR0,TIMER_TCCR0_COM00);
 97a:	a3 e5       	ldi	r26, 0x53	; 83
 97c:	b0 e0       	ldi	r27, 0x00	; 0
 97e:	e3 e5       	ldi	r30, 0x53	; 83
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	80 81       	ld	r24, Z
 984:	8f 7e       	andi	r24, 0xEF	; 239
 986:	8c 93       	st	X, r24
 988:	21 c0       	rjmp	.+66     	; 0x9cc <TIMER_PWMINIT+0xce>
				break;
				/****case in  range of phase correct PWM*********************/
				case TIMER_FREQ_15_6KHZ ... TIMER_FREQ_15HZ:
					/**********REMOVING THE PHASE CORRECT OFFSET*************************************************/
					COPY_STATIC_Timer0_Prescalar-=PHASE_CORRECT_OFFSET;
 98a:	80 91 66 00 	lds	r24, 0x0066
 98e:	8a 50       	subi	r24, 0x0A	; 10
 990:	80 93 66 00 	sts	0x0066, r24
					/************set tccr0 to PHASE CORRECT PWM******************/
					set_bit(TIMER_TCCR0,TIMER_TCCR0_WGM00);
 994:	a3 e5       	ldi	r26, 0x53	; 83
 996:	b0 e0       	ldi	r27, 0x00	; 0
 998:	e3 e5       	ldi	r30, 0x53	; 83
 99a:	f0 e0       	ldi	r31, 0x00	; 0
 99c:	80 81       	ld	r24, Z
 99e:	80 64       	ori	r24, 0x40	; 64
 9a0:	8c 93       	st	X, r24
					clear_bit(TIMER_TCCR0,TIMER_TCCR0_WGM01);
 9a2:	a3 e5       	ldi	r26, 0x53	; 83
 9a4:	b0 e0       	ldi	r27, 0x00	; 0
 9a6:	e3 e5       	ldi	r30, 0x53	; 83
 9a8:	f0 e0       	ldi	r31, 0x00	; 0
 9aa:	80 81       	ld	r24, Z
 9ac:	87 7f       	andi	r24, 0xF7	; 247
 9ae:	8c 93       	st	X, r24
					/***********set tccr0 to non inverted mode ****************/
					set_bit(TIMER_TCCR0,TIMER_TCCR0_COM01);
 9b0:	a3 e5       	ldi	r26, 0x53	; 83
 9b2:	b0 e0       	ldi	r27, 0x00	; 0
 9b4:	e3 e5       	ldi	r30, 0x53	; 83
 9b6:	f0 e0       	ldi	r31, 0x00	; 0
 9b8:	80 81       	ld	r24, Z
 9ba:	80 62       	ori	r24, 0x20	; 32
 9bc:	8c 93       	st	X, r24
					clear_bit(TIMER_TCCR0,TIMER_TCCR0_COM00);
 9be:	a3 e5       	ldi	r26, 0x53	; 83
 9c0:	b0 e0       	ldi	r27, 0x00	; 0
 9c2:	e3 e5       	ldi	r30, 0x53	; 83
 9c4:	f0 e0       	ldi	r31, 0x00	; 0
 9c6:	80 81       	ld	r24, Z
 9c8:	8f 7e       	andi	r24, 0xEF	; 239
 9ca:	8c 93       	st	X, r24
			break;

		default:
			break;
		}
}
 9cc:	0f 90       	pop	r0
 9ce:	0f 90       	pop	r0
 9d0:	0f 90       	pop	r0
 9d2:	0f 90       	pop	r0
 9d4:	cf 91       	pop	r28
 9d6:	df 91       	pop	r29
 9d8:	08 95       	ret

000009da <TIMER_PWMRUN>:

void TIMER_PWMRUN(u8 COPY_u8_TIMER_NUM,u8 COPY_DUTY_CYCLE)
{
 9da:	df 93       	push	r29
 9dc:	cf 93       	push	r28
 9de:	00 d0       	rcall	.+0      	; 0x9e0 <TIMER_PWMRUN+0x6>
 9e0:	cd b7       	in	r28, 0x3d	; 61
 9e2:	de b7       	in	r29, 0x3e	; 62
 9e4:	89 83       	std	Y+1, r24	; 0x01
 9e6:	6a 83       	std	Y+2, r22	; 0x02
	switch (COPY_u8_TIMER_NUM)
 9e8:	89 81       	ldd	r24, Y+1	; 0x01
 9ea:	88 2f       	mov	r24, r24
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	00 97       	sbiw	r24, 0x00	; 0
 9f0:	39 f4       	brne	.+14     	; 0xa00 <TIMER_PWMRUN+0x26>
			{
			case Timer0:
				TIMER_OCR0=COPY_DUTY_CYCLE;
 9f2:	ec e5       	ldi	r30, 0x5C	; 92
 9f4:	f0 e0       	ldi	r31, 0x00	; 0
 9f6:	8a 81       	ldd	r24, Y+2	; 0x02
 9f8:	80 83       	st	Z, r24
				Timer_Start(Timer0);
 9fa:	80 e0       	ldi	r24, 0x00	; 0
 9fc:	0e 94 ce 03 	call	0x79c	; 0x79c <Timer_Start>
				break;

			default:
				break;
			}
}
 a00:	0f 90       	pop	r0
 a02:	0f 90       	pop	r0
 a04:	cf 91       	pop	r28
 a06:	df 91       	pop	r29
 a08:	08 95       	ret

00000a0a <TIMER_PWMSTOP>:

void TIMER_PWMSTOP(u8 COPY_u8_TIMER_NUM)
{
 a0a:	df 93       	push	r29
 a0c:	cf 93       	push	r28
 a0e:	0f 92       	push	r0
 a10:	cd b7       	in	r28, 0x3d	; 61
 a12:	de b7       	in	r29, 0x3e	; 62
 a14:	89 83       	std	Y+1, r24	; 0x01
	switch (COPY_u8_TIMER_NUM)
 a16:	89 81       	ldd	r24, Y+1	; 0x01
 a18:	88 2f       	mov	r24, r24
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	00 97       	sbiw	r24, 0x00	; 0
 a1e:	19 f4       	brne	.+6      	; 0xa26 <TIMER_PWMSTOP+0x1c>
				{
				case Timer0:
					Timer_Stop(Timer0);
 a20:	80 e0       	ldi	r24, 0x00	; 0
 a22:	0e 94 1b 04 	call	0x836	; 0x836 <Timer_Stop>
					break;

				default:
					break;
				}
}
 a26:	0f 90       	pop	r0
 a28:	cf 91       	pop	r28
 a2a:	df 91       	pop	r29
 a2c:	08 95       	ret

00000a2e <Timer_Delay_MS_Sync>:
void Timer_Delay_MS_Sync(u8 COPY_u8_Timer_Num,u32 COPY_u32_DelayPeriod_MS)//this function  generate  delay in polling
{
 a2e:	df 93       	push	r29
 a30:	cf 93       	push	r28
 a32:	00 d0       	rcall	.+0      	; 0xa34 <Timer_Delay_MS_Sync+0x6>
 a34:	00 d0       	rcall	.+0      	; 0xa36 <Timer_Delay_MS_Sync+0x8>
 a36:	cd b7       	in	r28, 0x3d	; 61
 a38:	de b7       	in	r29, 0x3e	; 62
 a3a:	89 83       	std	Y+1, r24	; 0x01
 a3c:	7b 83       	std	Y+3, r23	; 0x03
 a3e:	6a 83       	std	Y+2, r22	; 0x02
	switch (COPY_u8_Timer_Num)
 a40:	89 81       	ldd	r24, Y+1	; 0x01
 a42:	88 2f       	mov	r24, r24
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	00 97       	sbiw	r24, 0x00	; 0
 a48:	39 f5       	brne	.+78     	; 0xa98 <Timer_Delay_MS_Sync+0x6a>
		case Timer0:

			/*start timer 0*/


			Timer_Start(Timer0);
 a4a:	80 e0       	ldi	r24, 0x00	; 0
 a4c:	0e 94 ce 03 	call	0x79c	; 0x79c <Timer_Start>
 a50:	11 c0       	rjmp	.+34     	; 0xa74 <Timer_Delay_MS_Sync+0x46>
			/*looping over delay period*/
			while(COPY_u32_DelayPeriod_MS--)
			{
				/*waiting untile 1ms of delay passes*/
				while (get_bit(TIMER_TIFR,TIMER_TIFR_OCF0));
 a52:	e8 e5       	ldi	r30, 0x58	; 88
 a54:	f0 e0       	ldi	r31, 0x00	; 0
 a56:	80 81       	ld	r24, Z
 a58:	86 95       	lsr	r24
 a5a:	88 2f       	mov	r24, r24
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	81 70       	andi	r24, 0x01	; 1
 a60:	90 70       	andi	r25, 0x00	; 0
 a62:	88 23       	and	r24, r24
 a64:	b1 f7       	brne	.-20     	; 0xa52 <Timer_Delay_MS_Sync+0x24>
				/*clearing the flag bit CTC*/
				set_bit(TIMER_TIFR,TIMER_TIFR_OCF0);
 a66:	a8 e5       	ldi	r26, 0x58	; 88
 a68:	b0 e0       	ldi	r27, 0x00	; 0
 a6a:	e8 e5       	ldi	r30, 0x58	; 88
 a6c:	f0 e0       	ldi	r31, 0x00	; 0
 a6e:	80 81       	ld	r24, Z
 a70:	82 60       	ori	r24, 0x02	; 2
 a72:	8c 93       	st	X, r24
			/*start timer 0*/


			Timer_Start(Timer0);
			/*looping over delay period*/
			while(COPY_u32_DelayPeriod_MS--)
 a74:	1c 82       	std	Y+4, r1	; 0x04
 a76:	8a 81       	ldd	r24, Y+2	; 0x02
 a78:	9b 81       	ldd	r25, Y+3	; 0x03
 a7a:	00 97       	sbiw	r24, 0x00	; 0
 a7c:	11 f0       	breq	.+4      	; 0xa82 <Timer_Delay_MS_Sync+0x54>
 a7e:	81 e0       	ldi	r24, 0x01	; 1
 a80:	8c 83       	std	Y+4, r24	; 0x04
 a82:	8a 81       	ldd	r24, Y+2	; 0x02
 a84:	9b 81       	ldd	r25, Y+3	; 0x03
 a86:	01 97       	sbiw	r24, 0x01	; 1
 a88:	9b 83       	std	Y+3, r25	; 0x03
 a8a:	8a 83       	std	Y+2, r24	; 0x02
 a8c:	8c 81       	ldd	r24, Y+4	; 0x04
 a8e:	88 23       	and	r24, r24
 a90:	01 f7       	brne	.-64     	; 0xa52 <Timer_Delay_MS_Sync+0x24>
				while (get_bit(TIMER_TIFR,TIMER_TIFR_OCF0));
				/*clearing the flag bit CTC*/
				set_bit(TIMER_TIFR,TIMER_TIFR_OCF0);
			}
			/*start timer 0*/
			Timer_Stop(Timer0);
 a92:	80 e0       	ldi	r24, 0x00	; 0
 a94:	0e 94 1b 04 	call	0x836	; 0x836 <Timer_Stop>
			break;
		}



}
 a98:	0f 90       	pop	r0
 a9a:	0f 90       	pop	r0
 a9c:	0f 90       	pop	r0
 a9e:	0f 90       	pop	r0
 aa0:	cf 91       	pop	r28
 aa2:	df 91       	pop	r29
 aa4:	08 95       	ret

00000aa6 <Timer_Delay_MS_ASync>:
void Timer_Delay_MS_ASync(u8 COPY_u8_Timer_Num,u32 COPY_u32_DelayPeriod_MS,void (*PTRFUNC)(void))
{
 aa6:	df 93       	push	r29
 aa8:	cf 93       	push	r28
 aaa:	cd b7       	in	r28, 0x3d	; 61
 aac:	de b7       	in	r29, 0x3e	; 62
 aae:	27 97       	sbiw	r28, 0x07	; 7
 ab0:	0f b6       	in	r0, 0x3f	; 63
 ab2:	f8 94       	cli
 ab4:	de bf       	out	0x3e, r29	; 62
 ab6:	0f be       	out	0x3f, r0	; 63
 ab8:	cd bf       	out	0x3d, r28	; 61
 aba:	89 83       	std	Y+1, r24	; 0x01
 abc:	7b 83       	std	Y+3, r23	; 0x03
 abe:	6a 83       	std	Y+2, r22	; 0x02
 ac0:	5d 83       	std	Y+5, r21	; 0x05
 ac2:	4c 83       	std	Y+4, r20	; 0x04
	/********************this function  generate  delay in ISR*********************/
	/**********Enable global  interrupt*************/
	set_bit(TIMER_SREG,TIMER_SREG_I);
 ac4:	af e5       	ldi	r26, 0x5F	; 95
 ac6:	b0 e0       	ldi	r27, 0x00	; 0
 ac8:	ef e5       	ldi	r30, 0x5F	; 95
 aca:	f0 e0       	ldi	r31, 0x00	; 0
 acc:	80 81       	ld	r24, Z
 ace:	80 68       	ori	r24, 0x80	; 128
 ad0:	8c 93       	st	X, r24

	switch (COPY_u8_Timer_Num)
 ad2:	89 81       	ldd	r24, Y+1	; 0x01
 ad4:	28 2f       	mov	r18, r24
 ad6:	30 e0       	ldi	r19, 0x00	; 0
 ad8:	3f 83       	std	Y+7, r19	; 0x07
 ada:	2e 83       	std	Y+6, r18	; 0x06
 adc:	8e 81       	ldd	r24, Y+6	; 0x06
 ade:	9f 81       	ldd	r25, Y+7	; 0x07
 ae0:	81 30       	cpi	r24, 0x01	; 1
 ae2:	91 05       	cpc	r25, r1
 ae4:	01 f1       	breq	.+64     	; 0xb26 <Timer_Delay_MS_ASync+0x80>
 ae6:	2e 81       	ldd	r18, Y+6	; 0x06
 ae8:	3f 81       	ldd	r19, Y+7	; 0x07
 aea:	22 30       	cpi	r18, 0x02	; 2
 aec:	31 05       	cpc	r19, r1
 aee:	41 f1       	breq	.+80     	; 0xb40 <Timer_Delay_MS_ASync+0x9a>
 af0:	8e 81       	ldd	r24, Y+6	; 0x06
 af2:	9f 81       	ldd	r25, Y+7	; 0x07
 af4:	00 97       	sbiw	r24, 0x00	; 0
 af6:	81 f5       	brne	.+96     	; 0xb58 <Timer_Delay_MS_ASync+0xb2>
			{
			case Timer0:
				set_bit(TIMER_TIMSK,TIMER_TIMSK_OCIE0);
 af8:	a9 e5       	ldi	r26, 0x59	; 89
 afa:	b0 e0       	ldi	r27, 0x00	; 0
 afc:	e9 e5       	ldi	r30, 0x59	; 89
 afe:	f0 e0       	ldi	r31, 0x00	; 0
 b00:	80 81       	ld	r24, Z
 b02:	82 60       	ori	r24, 0x02	; 2
 b04:	8c 93       	st	X, r24
				/**************SAVING THE delay PERIOD TO CHECK IT AT ISR ***********/
				COPY_STATIC_TIMER0_DELAYPERIOD=COPY_u32_DelayPeriod_MS;
 b06:	8a 81       	ldd	r24, Y+2	; 0x02
 b08:	9b 81       	ldd	r25, Y+3	; 0x03
 b0a:	90 93 6a 00 	sts	0x006A, r25
 b0e:	80 93 69 00 	sts	0x0069, r24
				/********setting callback  function address***********/
				PTRFUNC_TIMER0_ISR=PTRFUNC;
 b12:	8c 81       	ldd	r24, Y+4	; 0x04
 b14:	9d 81       	ldd	r25, Y+5	; 0x05
 b16:	90 93 61 00 	sts	0x0061, r25
 b1a:	80 93 60 00 	sts	0x0060, r24
				/*start timer 0*/
				Timer_Start(Timer0);
 b1e:	80 e0       	ldi	r24, 0x00	; 0
 b20:	0e 94 ce 03 	call	0x79c	; 0x79c <Timer_Start>
 b24:	19 c0       	rjmp	.+50     	; 0xb58 <Timer_Delay_MS_ASync+0xb2>
				break;

			case Timer1:
				/*********************SET The prescalar to Global VAR To USE It With START_FUNC *****************************/
				/**************SAVING THE delay PERIOD TO CHECK IT AT ISR ***********/
				COPY_STATIC_TIMER1_DELAYPERIOD=COPY_u32_DelayPeriod_MS;
 b26:	8a 81       	ldd	r24, Y+2	; 0x02
 b28:	9b 81       	ldd	r25, Y+3	; 0x03
 b2a:	90 93 6c 00 	sts	0x006C, r25
 b2e:	80 93 6b 00 	sts	0x006B, r24
				/********setting callback  function address***********/
				PTRFUNC_TIMER1_ISR=PTRFUNC;
 b32:	8c 81       	ldd	r24, Y+4	; 0x04
 b34:	9d 81       	ldd	r25, Y+5	; 0x05
 b36:	90 93 63 00 	sts	0x0063, r25
 b3a:	80 93 62 00 	sts	0x0062, r24
 b3e:	0c c0       	rjmp	.+24     	; 0xb58 <Timer_Delay_MS_ASync+0xb2>
				break;

			case Timer2:
				/*********************SET The prescalar to Global VAR To USE It With START_FUNC *****************************/
				/**************SAVING THE delay PERIOD TO CHECK IT AT ISR ***********/
				COPY_STATIC_TIMER2_DELAYPERIOD=COPY_u32_DelayPeriod_MS;
 b40:	8a 81       	ldd	r24, Y+2	; 0x02
 b42:	9b 81       	ldd	r25, Y+3	; 0x03
 b44:	90 93 6e 00 	sts	0x006E, r25
 b48:	80 93 6d 00 	sts	0x006D, r24
				/********setting callback  function address***********/
				PTRFUNC_TIMER2_ISR=PTRFUNC;
 b4c:	8c 81       	ldd	r24, Y+4	; 0x04
 b4e:	9d 81       	ldd	r25, Y+5	; 0x05
 b50:	90 93 65 00 	sts	0x0065, r25
 b54:	80 93 64 00 	sts	0x0064, r24

			default:
				break;
			}

}
 b58:	27 96       	adiw	r28, 0x07	; 7
 b5a:	0f b6       	in	r0, 0x3f	; 63
 b5c:	f8 94       	cli
 b5e:	de bf       	out	0x3e, r29	; 62
 b60:	0f be       	out	0x3f, r0	; 63
 b62:	cd bf       	out	0x3d, r28	; 61
 b64:	cf 91       	pop	r28
 b66:	df 91       	pop	r29
 b68:	08 95       	ret

00000b6a <TIMER1_CUSTOM_FREQ_PWM_INIT>:

void TIMER1_CUSTOM_FREQ_PWM_INIT(u16 COPY_u16_periodic_time_US)
{
 b6a:	df 93       	push	r29
 b6c:	cf 93       	push	r28
 b6e:	00 d0       	rcall	.+0      	; 0xb70 <TIMER1_CUSTOM_FREQ_PWM_INIT+0x6>
 b70:	cd b7       	in	r28, 0x3d	; 61
 b72:	de b7       	in	r29, 0x3e	; 62
 b74:	9a 83       	std	Y+2, r25	; 0x02
 b76:	89 83       	std	Y+1, r24	; 0x01
	/*********setting non inverted mode  in  channel  A and B , selecting phase correct with  top at ICR1(mode 10 )*********************/
	TIMER_TCCR1=0xA210;
 b78:	ee e4       	ldi	r30, 0x4E	; 78
 b7a:	f0 e0       	ldi	r31, 0x00	; 0
 b7c:	80 e1       	ldi	r24, 0x10	; 16
 b7e:	92 ea       	ldi	r25, 0xA2	; 162
 b80:	91 83       	std	Z+1, r25	; 0x01
 b82:	80 83       	st	Z, r24
	/*********setting the periodic time  in  microseconde *********/
	TIMER_ICR1=COPY_u16_periodic_time_US/2;
 b84:	e6 e4       	ldi	r30, 0x46	; 70
 b86:	f0 e0       	ldi	r31, 0x00	; 0
 b88:	89 81       	ldd	r24, Y+1	; 0x01
 b8a:	9a 81       	ldd	r25, Y+2	; 0x02
 b8c:	96 95       	lsr	r25
 b8e:	87 95       	ror	r24
 b90:	91 83       	std	Z+1, r25	; 0x01
 b92:	80 83       	st	Z, r24
	/***********select prescalar 8prescalar to  get 1us tick  *************/
	COPY_STATIC_Timer1_Prescalar=TiMER_8_PRESCALAR;
 b94:	82 e0       	ldi	r24, 0x02	; 2
 b96:	80 93 67 00 	sts	0x0067, r24
}
 b9a:	0f 90       	pop	r0
 b9c:	0f 90       	pop	r0
 b9e:	cf 91       	pop	r28
 ba0:	df 91       	pop	r29
 ba2:	08 95       	ret

00000ba4 <TIMER1_CUSTOM_FREQ_PWM_RUN>:

void TIMER1_CUSTOM_FREQ_PWM_RUN(u8 CUSTOM_Channel,u16 COPY_u16_DUTYCYCLE)
{
 ba4:	df 93       	push	r29
 ba6:	cf 93       	push	r28
 ba8:	00 d0       	rcall	.+0      	; 0xbaa <TIMER1_CUSTOM_FREQ_PWM_RUN+0x6>
 baa:	00 d0       	rcall	.+0      	; 0xbac <TIMER1_CUSTOM_FREQ_PWM_RUN+0x8>
 bac:	0f 92       	push	r0
 bae:	cd b7       	in	r28, 0x3d	; 61
 bb0:	de b7       	in	r29, 0x3e	; 62
 bb2:	89 83       	std	Y+1, r24	; 0x01
 bb4:	7b 83       	std	Y+3, r23	; 0x03
 bb6:	6a 83       	std	Y+2, r22	; 0x02
	switch (CUSTOM_Channel)
 bb8:	89 81       	ldd	r24, Y+1	; 0x01
 bba:	28 2f       	mov	r18, r24
 bbc:	30 e0       	ldi	r19, 0x00	; 0
 bbe:	3d 83       	std	Y+5, r19	; 0x05
 bc0:	2c 83       	std	Y+4, r18	; 0x04
 bc2:	8c 81       	ldd	r24, Y+4	; 0x04
 bc4:	9d 81       	ldd	r25, Y+5	; 0x05
 bc6:	00 97       	sbiw	r24, 0x00	; 0
 bc8:	31 f0       	breq	.+12     	; 0xbd6 <TIMER1_CUSTOM_FREQ_PWM_RUN+0x32>
 bca:	2c 81       	ldd	r18, Y+4	; 0x04
 bcc:	3d 81       	ldd	r19, Y+5	; 0x05
 bce:	21 30       	cpi	r18, 0x01	; 1
 bd0:	31 05       	cpc	r19, r1
 bd2:	59 f0       	breq	.+22     	; 0xbea <TIMER1_CUSTOM_FREQ_PWM_RUN+0x46>
 bd4:	13 c0       	rjmp	.+38     	; 0xbfc <TIMER1_CUSTOM_FREQ_PWM_RUN+0x58>
	{
	case TIMER_CUSTOM_CHANNEL_A:
		/****setting the duty cycle****/
		TIMER_OCR1A=COPY_u16_DUTYCYCLE;
 bd6:	ea e4       	ldi	r30, 0x4A	; 74
 bd8:	f0 e0       	ldi	r31, 0x00	; 0
 bda:	8a 81       	ldd	r24, Y+2	; 0x02
 bdc:	9b 81       	ldd	r25, Y+3	; 0x03
 bde:	91 83       	std	Z+1, r25	; 0x01
 be0:	80 83       	st	Z, r24
		Timer_Start(Timer1);
 be2:	81 e0       	ldi	r24, 0x01	; 1
 be4:	0e 94 ce 03 	call	0x79c	; 0x79c <Timer_Start>
 be8:	09 c0       	rjmp	.+18     	; 0xbfc <TIMER1_CUSTOM_FREQ_PWM_RUN+0x58>
		break;
	case TIMER_CUSTOM_CHANNEL_B:
		/******setting the duty cycle*******/
		TIMER_OCR1B=COPY_u16_DUTYCYCLE;
 bea:	e8 e4       	ldi	r30, 0x48	; 72
 bec:	f0 e0       	ldi	r31, 0x00	; 0
 bee:	8a 81       	ldd	r24, Y+2	; 0x02
 bf0:	9b 81       	ldd	r25, Y+3	; 0x03
 bf2:	91 83       	std	Z+1, r25	; 0x01
 bf4:	80 83       	st	Z, r24
		Timer_Start(Timer1);
 bf6:	81 e0       	ldi	r24, 0x01	; 1
 bf8:	0e 94 ce 03 	call	0x79c	; 0x79c <Timer_Start>
		break;
	}

}
 bfc:	0f 90       	pop	r0
 bfe:	0f 90       	pop	r0
 c00:	0f 90       	pop	r0
 c02:	0f 90       	pop	r0
 c04:	0f 90       	pop	r0
 c06:	cf 91       	pop	r28
 c08:	df 91       	pop	r29
 c0a:	08 95       	ret

00000c0c <TIMER_PWMCAPTURE_INIT>:

void TIMER_PWMCAPTURE_INIT(void)
{
 c0c:	df 93       	push	r29
 c0e:	cf 93       	push	r28
 c10:	cd b7       	in	r28, 0x3d	; 61
 c12:	de b7       	in	r29, 0x3e	; 62
	/****ENABLE NORMAL MODE AND RISING EDGE FOR ICU *********/
	TIMER_TCCR1=0x0040;
 c14:	ee e4       	ldi	r30, 0x4E	; 78
 c16:	f0 e0       	ldi	r31, 0x00	; 0
 c18:	80 e4       	ldi	r24, 0x40	; 64
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	91 83       	std	Z+1, r25	; 0x01
 c1e:	80 83       	st	Z, r24
	/*****reset the ICR REGESTIR********/
	TIMER_ICR1=0;
 c20:	e6 e4       	ldi	r30, 0x46	; 70
 c22:	f0 e0       	ldi	r31, 0x00	; 0
 c24:	11 82       	std	Z+1, r1	; 0x01
 c26:	10 82       	st	Z, r1
	/*****CHOOSING PRESCALAR 8 To PROVIDE 1us TICK************/
	COPY_STATIC_Timer1_Prescalar=TiMER_8_PRESCALAR;
 c28:	82 e0       	ldi	r24, 0x02	; 2
 c2a:	80 93 67 00 	sts	0x0067, r24
}
 c2e:	cf 91       	pop	r28
 c30:	df 91       	pop	r29
 c32:	08 95       	ret

00000c34 <TIMER_PWMCATCH>:

void TIMER_PWMCATCH(u32 *PTR_32_dutycycle,u32 *PTR_32_FREQUANCY)
{
 c34:	df 93       	push	r29
 c36:	cf 93       	push	r28
 c38:	cd b7       	in	r28, 0x3d	; 61
 c3a:	de b7       	in	r29, 0x3e	; 62
 c3c:	2a 97       	sbiw	r28, 0x0a	; 10
 c3e:	0f b6       	in	r0, 0x3f	; 63
 c40:	f8 94       	cli
 c42:	de bf       	out	0x3e, r29	; 62
 c44:	0f be       	out	0x3f, r0	; 63
 c46:	cd bf       	out	0x3d, r28	; 61
 c48:	98 87       	std	Y+8, r25	; 0x08
 c4a:	8f 83       	std	Y+7, r24	; 0x07
 c4c:	7a 87       	std	Y+10, r23	; 0x0a
 c4e:	69 87       	std	Y+9, r22	; 0x09
	/*******LOCAL VAR **********/
	u16 u16_Timelap1=0;
 c50:	1e 82       	std	Y+6, r1	; 0x06
 c52:	1d 82       	std	Y+5, r1	; 0x05
	u16 u16_Timelap2=0;
 c54:	1c 82       	std	Y+4, r1	; 0x04
 c56:	1b 82       	std	Y+3, r1	; 0x03
	u16 u16_Timelap3=0;
 c58:	1a 82       	std	Y+2, r1	; 0x02
 c5a:	19 82       	std	Y+1, r1	; 0x01
	/*******start TIMER1*****************/
	Timer_Start(Timer1);
 c5c:	81 e0       	ldi	r24, 0x01	; 1
 c5e:	0e 94 ce 03 	call	0x79c	; 0x79c <Timer_Start>
	/*****POLLING ICU FLAG ******************/
	while (!get_bit(TIMER_TIFR,TIMER_TIFR_ICF1));
 c62:	e8 e5       	ldi	r30, 0x58	; 88
 c64:	f0 e0       	ldi	r31, 0x00	; 0
 c66:	80 81       	ld	r24, Z
 c68:	82 95       	swap	r24
 c6a:	86 95       	lsr	r24
 c6c:	87 70       	andi	r24, 0x07	; 7
 c6e:	88 2f       	mov	r24, r24
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	81 70       	andi	r24, 0x01	; 1
 c74:	90 70       	andi	r25, 0x00	; 0
 c76:	00 97       	sbiw	r24, 0x00	; 0
 c78:	a1 f3       	breq	.-24     	; 0xc62 <TIMER_PWMCATCH+0x2e>
	/*******clearing the flag*******/
	set_bit(TIMER_TIFR,TIMER_TIFR_ICF1);
 c7a:	a8 e5       	ldi	r26, 0x58	; 88
 c7c:	b0 e0       	ldi	r27, 0x00	; 0
 c7e:	e8 e5       	ldi	r30, 0x58	; 88
 c80:	f0 e0       	ldi	r31, 0x00	; 0
 c82:	80 81       	ld	r24, Z
 c84:	80 62       	ori	r24, 0x20	; 32
 c86:	8c 93       	st	X, r24
	/*******set  the first time lap value ********/
	u16_Timelap1=TIMER_ICR1;
 c88:	e6 e4       	ldi	r30, 0x46	; 70
 c8a:	f0 e0       	ldi	r31, 0x00	; 0
 c8c:	80 81       	ld	r24, Z
 c8e:	91 81       	ldd	r25, Z+1	; 0x01
 c90:	9e 83       	std	Y+6, r25	; 0x06
 c92:	8d 83       	std	Y+5, r24	; 0x05
	/******SELECTING THE FALLING EDGE ICU detection*****************/
	clear_bit(TIMER_TCCR1,TIMER_TCCR1_ICES1);
 c94:	ae e4       	ldi	r26, 0x4E	; 78
 c96:	b0 e0       	ldi	r27, 0x00	; 0
 c98:	ee e4       	ldi	r30, 0x4E	; 78
 c9a:	f0 e0       	ldi	r31, 0x00	; 0
 c9c:	80 81       	ld	r24, Z
 c9e:	91 81       	ldd	r25, Z+1	; 0x01
 ca0:	8f 7b       	andi	r24, 0xBF	; 191
 ca2:	11 96       	adiw	r26, 0x01	; 1
 ca4:	9c 93       	st	X, r25
 ca6:	8e 93       	st	-X, r24

	/*****POLLING ICU FLAG ******************/
	while (!get_bit(TIMER_TIFR,TIMER_TIFR_ICF1));
 ca8:	e8 e5       	ldi	r30, 0x58	; 88
 caa:	f0 e0       	ldi	r31, 0x00	; 0
 cac:	80 81       	ld	r24, Z
 cae:	82 95       	swap	r24
 cb0:	86 95       	lsr	r24
 cb2:	87 70       	andi	r24, 0x07	; 7
 cb4:	88 2f       	mov	r24, r24
 cb6:	90 e0       	ldi	r25, 0x00	; 0
 cb8:	81 70       	andi	r24, 0x01	; 1
 cba:	90 70       	andi	r25, 0x00	; 0
 cbc:	00 97       	sbiw	r24, 0x00	; 0
 cbe:	a1 f3       	breq	.-24     	; 0xca8 <TIMER_PWMCATCH+0x74>
	/*******clearing the flag*******/
	set_bit(TIMER_TIFR,TIMER_TIFR_ICF1);
 cc0:	a8 e5       	ldi	r26, 0x58	; 88
 cc2:	b0 e0       	ldi	r27, 0x00	; 0
 cc4:	e8 e5       	ldi	r30, 0x58	; 88
 cc6:	f0 e0       	ldi	r31, 0x00	; 0
 cc8:	80 81       	ld	r24, Z
 cca:	80 62       	ori	r24, 0x20	; 32
 ccc:	8c 93       	st	X, r24
	/*******set  the first time lap value ********/
	u16_Timelap2=TIMER_ICR1;
 cce:	e6 e4       	ldi	r30, 0x46	; 70
 cd0:	f0 e0       	ldi	r31, 0x00	; 0
 cd2:	80 81       	ld	r24, Z
 cd4:	91 81       	ldd	r25, Z+1	; 0x01
 cd6:	9c 83       	std	Y+4, r25	; 0x04
 cd8:	8b 83       	std	Y+3, r24	; 0x03
	/******SELECTING THE RISING EDGE ICU detection*****************/
	set_bit(TIMER_TCCR1,TIMER_TCCR1_ICES1);
 cda:	ae e4       	ldi	r26, 0x4E	; 78
 cdc:	b0 e0       	ldi	r27, 0x00	; 0
 cde:	ee e4       	ldi	r30, 0x4E	; 78
 ce0:	f0 e0       	ldi	r31, 0x00	; 0
 ce2:	80 81       	ld	r24, Z
 ce4:	91 81       	ldd	r25, Z+1	; 0x01
 ce6:	80 64       	ori	r24, 0x40	; 64
 ce8:	11 96       	adiw	r26, 0x01	; 1
 cea:	9c 93       	st	X, r25
 cec:	8e 93       	st	-X, r24

	/*****POLLING ICU FLAG ******************/
	while (!get_bit(TIMER_TIFR,TIMER_TIFR_ICF1));
 cee:	e8 e5       	ldi	r30, 0x58	; 88
 cf0:	f0 e0       	ldi	r31, 0x00	; 0
 cf2:	80 81       	ld	r24, Z
 cf4:	82 95       	swap	r24
 cf6:	86 95       	lsr	r24
 cf8:	87 70       	andi	r24, 0x07	; 7
 cfa:	88 2f       	mov	r24, r24
 cfc:	90 e0       	ldi	r25, 0x00	; 0
 cfe:	81 70       	andi	r24, 0x01	; 1
 d00:	90 70       	andi	r25, 0x00	; 0
 d02:	00 97       	sbiw	r24, 0x00	; 0
 d04:	a1 f3       	breq	.-24     	; 0xcee <TIMER_PWMCATCH+0xba>
	/*******clearing the flag*******/
	set_bit(TIMER_TIFR,TIMER_TIFR_ICF1);
 d06:	a8 e5       	ldi	r26, 0x58	; 88
 d08:	b0 e0       	ldi	r27, 0x00	; 0
 d0a:	e8 e5       	ldi	r30, 0x58	; 88
 d0c:	f0 e0       	ldi	r31, 0x00	; 0
 d0e:	80 81       	ld	r24, Z
 d10:	80 62       	ori	r24, 0x20	; 32
 d12:	8c 93       	st	X, r24
	/*******set  the first time lap value ********/
	u16_Timelap3=TIMER_ICR1;
 d14:	e6 e4       	ldi	r30, 0x46	; 70
 d16:	f0 e0       	ldi	r31, 0x00	; 0
 d18:	80 81       	ld	r24, Z
 d1a:	91 81       	ldd	r25, Z+1	; 0x01
 d1c:	9a 83       	std	Y+2, r25	; 0x02
 d1e:	89 83       	std	Y+1, r24	; 0x01
	/******stopping the timer******/
	Timer_Stop(Timer1);
 d20:	81 e0       	ldi	r24, 0x01	; 1
 d22:	0e 94 1b 04 	call	0x836	; 0x836 <Timer_Stop>

	*PTR_32_dutycycle=((u16_Timelap2-u16_Timelap1)*100)/(u16_Timelap3-u16_Timelap1);
 d26:	2b 81       	ldd	r18, Y+3	; 0x03
 d28:	3c 81       	ldd	r19, Y+4	; 0x04
 d2a:	8d 81       	ldd	r24, Y+5	; 0x05
 d2c:	9e 81       	ldd	r25, Y+6	; 0x06
 d2e:	28 1b       	sub	r18, r24
 d30:	39 0b       	sbc	r19, r25
 d32:	84 e6       	ldi	r24, 0x64	; 100
 d34:	90 e0       	ldi	r25, 0x00	; 0
 d36:	28 9f       	mul	r18, r24
 d38:	a0 01       	movw	r20, r0
 d3a:	29 9f       	mul	r18, r25
 d3c:	50 0d       	add	r21, r0
 d3e:	38 9f       	mul	r19, r24
 d40:	50 0d       	add	r21, r0
 d42:	11 24       	eor	r1, r1
 d44:	29 81       	ldd	r18, Y+1	; 0x01
 d46:	3a 81       	ldd	r19, Y+2	; 0x02
 d48:	8d 81       	ldd	r24, Y+5	; 0x05
 d4a:	9e 81       	ldd	r25, Y+6	; 0x06
 d4c:	28 1b       	sub	r18, r24
 d4e:	39 0b       	sbc	r19, r25
 d50:	ca 01       	movw	r24, r20
 d52:	b9 01       	movw	r22, r18
 d54:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__udivmodhi4>
 d58:	cb 01       	movw	r24, r22
 d5a:	ef 81       	ldd	r30, Y+7	; 0x07
 d5c:	f8 85       	ldd	r31, Y+8	; 0x08
 d5e:	91 83       	std	Z+1, r25	; 0x01
 d60:	80 83       	st	Z, r24
	/*********GET THE FREQUANCY IN HZ*************/
	*PTR_32_FREQUANCY=1000000/(u16_Timelap3-u16_Timelap1);
 d62:	29 81       	ldd	r18, Y+1	; 0x01
 d64:	3a 81       	ldd	r19, Y+2	; 0x02
 d66:	8d 81       	ldd	r24, Y+5	; 0x05
 d68:	9e 81       	ldd	r25, Y+6	; 0x06
 d6a:	a9 01       	movw	r20, r18
 d6c:	48 1b       	sub	r20, r24
 d6e:	59 0b       	sbc	r21, r25
 d70:	ca 01       	movw	r24, r20
 d72:	9c 01       	movw	r18, r24
 d74:	40 e0       	ldi	r20, 0x00	; 0
 d76:	50 e0       	ldi	r21, 0x00	; 0
 d78:	80 e4       	ldi	r24, 0x40	; 64
 d7a:	92 e4       	ldi	r25, 0x42	; 66
 d7c:	af e0       	ldi	r26, 0x0F	; 15
 d7e:	b0 e0       	ldi	r27, 0x00	; 0
 d80:	bc 01       	movw	r22, r24
 d82:	cd 01       	movw	r24, r26
 d84:	0e 94 63 07 	call	0xec6	; 0xec6 <__divmodsi4>
 d88:	da 01       	movw	r26, r20
 d8a:	c9 01       	movw	r24, r18
 d8c:	e9 85       	ldd	r30, Y+9	; 0x09
 d8e:	fa 85       	ldd	r31, Y+10	; 0x0a
 d90:	91 83       	std	Z+1, r25	; 0x01
 d92:	80 83       	st	Z, r24





}
 d94:	2a 96       	adiw	r28, 0x0a	; 10
 d96:	0f b6       	in	r0, 0x3f	; 63
 d98:	f8 94       	cli
 d9a:	de bf       	out	0x3e, r29	; 62
 d9c:	0f be       	out	0x3f, r0	; 63
 d9e:	cd bf       	out	0x3d, r28	; 61
 da0:	cf 91       	pop	r28
 da2:	df 91       	pop	r29
 da4:	08 95       	ret

00000da6 <__vector_10>:
/*******************TIMER ISR'S****************************************************************************************************/

/***********timer0 compare match  interrupt service routine   ISR****************/
void __vector_10 (void)
{
 da6:	1f 92       	push	r1
 da8:	0f 92       	push	r0
 daa:	0f b6       	in	r0, 0x3f	; 63
 dac:	0f 92       	push	r0
 dae:	11 24       	eor	r1, r1
 db0:	2f 93       	push	r18
 db2:	3f 93       	push	r19
 db4:	4f 93       	push	r20
 db6:	5f 93       	push	r21
 db8:	6f 93       	push	r22
 dba:	7f 93       	push	r23
 dbc:	8f 93       	push	r24
 dbe:	9f 93       	push	r25
 dc0:	af 93       	push	r26
 dc2:	bf 93       	push	r27
 dc4:	ef 93       	push	r30
 dc6:	ff 93       	push	r31
 dc8:	df 93       	push	r29
 dca:	cf 93       	push	r28
 dcc:	cd b7       	in	r28, 0x3d	; 61
 dce:	de b7       	in	r29, 0x3e	; 62


	if (PTRFUNC_TIMER0_ISR !=NULL)
 dd0:	80 91 60 00 	lds	r24, 0x0060
 dd4:	90 91 61 00 	lds	r25, 0x0061
 dd8:	00 97       	sbiw	r24, 0x00	; 0
 dda:	f9 f0       	breq	.+62     	; 0xe1a <__vector_10+0x74>

	{
		if(COPY_STATIC_TIMER0_DELAYPERIOD)
 ddc:	80 91 69 00 	lds	r24, 0x0069
 de0:	90 91 6a 00 	lds	r25, 0x006A
 de4:	00 97       	sbiw	r24, 0x00	; 0
 de6:	51 f0       	breq	.+20     	; 0xdfc <__vector_10+0x56>
		{
			/**********decrement by 1ms *********/
			COPY_STATIC_TIMER0_DELAYPERIOD--;
 de8:	80 91 69 00 	lds	r24, 0x0069
 dec:	90 91 6a 00 	lds	r25, 0x006A
 df0:	01 97       	sbiw	r24, 0x01	; 1
 df2:	90 93 6a 00 	sts	0x006A, r25
 df6:	80 93 69 00 	sts	0x0069, r24
 dfa:	0f c0       	rjmp	.+30     	; 0xe1a <__vector_10+0x74>
		}
		else
		{
			/*****call back  function ********/
			PTRFUNC_TIMER0_ISR();
 dfc:	e0 91 60 00 	lds	r30, 0x0060
 e00:	f0 91 61 00 	lds	r31, 0x0061
 e04:	09 95       	icall
			/*********disable the interrupt************/
			clear_bit(TIMER_TIMSK,TIMER_TIMSK_OCIE0);
 e06:	a9 e5       	ldi	r26, 0x59	; 89
 e08:	b0 e0       	ldi	r27, 0x00	; 0
 e0a:	e9 e5       	ldi	r30, 0x59	; 89
 e0c:	f0 e0       	ldi	r31, 0x00	; 0
 e0e:	80 81       	ld	r24, Z
 e10:	8d 7f       	andi	r24, 0xFD	; 253
 e12:	8c 93       	st	X, r24
			/*****stop  the timer*************/
			Timer_Stop(Timer0);
 e14:	80 e0       	ldi	r24, 0x00	; 0
 e16:	0e 94 1b 04 	call	0x836	; 0x836 <Timer_Stop>
		}


	}

}
 e1a:	cf 91       	pop	r28
 e1c:	df 91       	pop	r29
 e1e:	ff 91       	pop	r31
 e20:	ef 91       	pop	r30
 e22:	bf 91       	pop	r27
 e24:	af 91       	pop	r26
 e26:	9f 91       	pop	r25
 e28:	8f 91       	pop	r24
 e2a:	7f 91       	pop	r23
 e2c:	6f 91       	pop	r22
 e2e:	5f 91       	pop	r21
 e30:	4f 91       	pop	r20
 e32:	3f 91       	pop	r19
 e34:	2f 91       	pop	r18
 e36:	0f 90       	pop	r0
 e38:	0f be       	out	0x3f, r0	; 63
 e3a:	0f 90       	pop	r0
 e3c:	1f 90       	pop	r1
 e3e:	18 95       	reti

00000e40 <main>:
#include "TIMER_INTERFACE.h"



void main()
{
 e40:	df 93       	push	r29
 e42:	cf 93       	push	r28
 e44:	00 d0       	rcall	.+0      	; 0xe46 <main+0x6>
 e46:	00 d0       	rcall	.+0      	; 0xe48 <main+0x8>
 e48:	cd b7       	in	r28, 0x3d	; 61
 e4a:	de b7       	in	r29, 0x3e	; 62
	u32 duty_cycle;
	u32 FRQuacnY;
	DIO_u8set_pin_dir(GROUP_B,DIO_u8_PIN_3,DIO_u8_OUTPUT);
 e4c:	81 e0       	ldi	r24, 0x01	; 1
 e4e:	63 e0       	ldi	r22, 0x03	; 3
 e50:	41 e0       	ldi	r20, 0x01	; 1
 e52:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_u8set_pin_dir>
	DIO_u8set_pin_dir(GROUP_D,DIO_u8_PIN_6,DIO_u8_INPUT);
 e56:	83 e0       	ldi	r24, 0x03	; 3
 e58:	66 e0       	ldi	r22, 0x06	; 6
 e5a:	40 e0       	ldi	r20, 0x00	; 0
 e5c:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_u8set_pin_dir>
	TIMER_PWMINIT(Timer0,TIMER_FREQ_2KHZ);
 e60:	80 e0       	ldi	r24, 0x00	; 0
 e62:	6c e0       	ldi	r22, 0x0C	; 12
 e64:	0e 94 7f 04 	call	0x8fe	; 0x8fe <TIMER_PWMINIT>
	TIMER_PWMCAPTURE_INIT();
 e68:	0e 94 06 06 	call	0xc0c	; 0xc0c <TIMER_PWMCAPTURE_INIT>
	TIMER_PWMRUN(Timer0,200);
 e6c:	80 e0       	ldi	r24, 0x00	; 0
 e6e:	68 ec       	ldi	r22, 0xC8	; 200
 e70:	0e 94 ed 04 	call	0x9da	; 0x9da <TIMER_PWMRUN>
	while(1)
	{
		TIMER_PWMCATCH(&duty_cycle,&FRQuacnY);
 e74:	9e 01       	movw	r18, r28
 e76:	2d 5f       	subi	r18, 0xFD	; 253
 e78:	3f 4f       	sbci	r19, 0xFF	; 255
 e7a:	ce 01       	movw	r24, r28
 e7c:	01 96       	adiw	r24, 0x01	; 1
 e7e:	b9 01       	movw	r22, r18
 e80:	0e 94 1a 06 	call	0xc34	; 0xc34 <TIMER_PWMCATCH>

		TIMER_OCR1A=duty_cycle;
 e84:	ea e4       	ldi	r30, 0x4A	; 74
 e86:	f0 e0       	ldi	r31, 0x00	; 0
 e88:	89 81       	ldd	r24, Y+1	; 0x01
 e8a:	9a 81       	ldd	r25, Y+2	; 0x02
 e8c:	91 83       	std	Z+1, r25	; 0x01
 e8e:	80 83       	st	Z, r24

		TIMER_OCR1B=FRQuacnY;
 e90:	e8 e4       	ldi	r30, 0x48	; 72
 e92:	f0 e0       	ldi	r31, 0x00	; 0
 e94:	8b 81       	ldd	r24, Y+3	; 0x03
 e96:	9c 81       	ldd	r25, Y+4	; 0x04
 e98:	91 83       	std	Z+1, r25	; 0x01
 e9a:	80 83       	st	Z, r24
 e9c:	eb cf       	rjmp	.-42     	; 0xe74 <main+0x34>

00000e9e <__udivmodhi4>:
 e9e:	aa 1b       	sub	r26, r26
 ea0:	bb 1b       	sub	r27, r27
 ea2:	51 e1       	ldi	r21, 0x11	; 17
 ea4:	07 c0       	rjmp	.+14     	; 0xeb4 <__udivmodhi4_ep>

00000ea6 <__udivmodhi4_loop>:
 ea6:	aa 1f       	adc	r26, r26
 ea8:	bb 1f       	adc	r27, r27
 eaa:	a6 17       	cp	r26, r22
 eac:	b7 07       	cpc	r27, r23
 eae:	10 f0       	brcs	.+4      	; 0xeb4 <__udivmodhi4_ep>
 eb0:	a6 1b       	sub	r26, r22
 eb2:	b7 0b       	sbc	r27, r23

00000eb4 <__udivmodhi4_ep>:
 eb4:	88 1f       	adc	r24, r24
 eb6:	99 1f       	adc	r25, r25
 eb8:	5a 95       	dec	r21
 eba:	a9 f7       	brne	.-22     	; 0xea6 <__udivmodhi4_loop>
 ebc:	80 95       	com	r24
 ebe:	90 95       	com	r25
 ec0:	bc 01       	movw	r22, r24
 ec2:	cd 01       	movw	r24, r26
 ec4:	08 95       	ret

00000ec6 <__divmodsi4>:
 ec6:	97 fb       	bst	r25, 7
 ec8:	09 2e       	mov	r0, r25
 eca:	05 26       	eor	r0, r21
 ecc:	0e d0       	rcall	.+28     	; 0xeea <__divmodsi4_neg1>
 ece:	57 fd       	sbrc	r21, 7
 ed0:	04 d0       	rcall	.+8      	; 0xeda <__divmodsi4_neg2>
 ed2:	14 d0       	rcall	.+40     	; 0xefc <__udivmodsi4>
 ed4:	0a d0       	rcall	.+20     	; 0xeea <__divmodsi4_neg1>
 ed6:	00 1c       	adc	r0, r0
 ed8:	38 f4       	brcc	.+14     	; 0xee8 <__divmodsi4_exit>

00000eda <__divmodsi4_neg2>:
 eda:	50 95       	com	r21
 edc:	40 95       	com	r20
 ede:	30 95       	com	r19
 ee0:	21 95       	neg	r18
 ee2:	3f 4f       	sbci	r19, 0xFF	; 255
 ee4:	4f 4f       	sbci	r20, 0xFF	; 255
 ee6:	5f 4f       	sbci	r21, 0xFF	; 255

00000ee8 <__divmodsi4_exit>:
 ee8:	08 95       	ret

00000eea <__divmodsi4_neg1>:
 eea:	f6 f7       	brtc	.-4      	; 0xee8 <__divmodsi4_exit>
 eec:	90 95       	com	r25
 eee:	80 95       	com	r24
 ef0:	70 95       	com	r23
 ef2:	61 95       	neg	r22
 ef4:	7f 4f       	sbci	r23, 0xFF	; 255
 ef6:	8f 4f       	sbci	r24, 0xFF	; 255
 ef8:	9f 4f       	sbci	r25, 0xFF	; 255
 efa:	08 95       	ret

00000efc <__udivmodsi4>:
 efc:	a1 e2       	ldi	r26, 0x21	; 33
 efe:	1a 2e       	mov	r1, r26
 f00:	aa 1b       	sub	r26, r26
 f02:	bb 1b       	sub	r27, r27
 f04:	fd 01       	movw	r30, r26
 f06:	0d c0       	rjmp	.+26     	; 0xf22 <__udivmodsi4_ep>

00000f08 <__udivmodsi4_loop>:
 f08:	aa 1f       	adc	r26, r26
 f0a:	bb 1f       	adc	r27, r27
 f0c:	ee 1f       	adc	r30, r30
 f0e:	ff 1f       	adc	r31, r31
 f10:	a2 17       	cp	r26, r18
 f12:	b3 07       	cpc	r27, r19
 f14:	e4 07       	cpc	r30, r20
 f16:	f5 07       	cpc	r31, r21
 f18:	20 f0       	brcs	.+8      	; 0xf22 <__udivmodsi4_ep>
 f1a:	a2 1b       	sub	r26, r18
 f1c:	b3 0b       	sbc	r27, r19
 f1e:	e4 0b       	sbc	r30, r20
 f20:	f5 0b       	sbc	r31, r21

00000f22 <__udivmodsi4_ep>:
 f22:	66 1f       	adc	r22, r22
 f24:	77 1f       	adc	r23, r23
 f26:	88 1f       	adc	r24, r24
 f28:	99 1f       	adc	r25, r25
 f2a:	1a 94       	dec	r1
 f2c:	69 f7       	brne	.-38     	; 0xf08 <__udivmodsi4_loop>
 f2e:	60 95       	com	r22
 f30:	70 95       	com	r23
 f32:	80 95       	com	r24
 f34:	90 95       	com	r25
 f36:	9b 01       	movw	r18, r22
 f38:	ac 01       	movw	r20, r24
 f3a:	bd 01       	movw	r22, r26
 f3c:	cf 01       	movw	r24, r30
 f3e:	08 95       	ret

00000f40 <_exit>:
 f40:	f8 94       	cli

00000f42 <__stop_program>:
 f42:	ff cf       	rjmp	.-2      	; 0xf42 <__stop_program>
